BASIC52E                                                                                                      PAGE 1

                       1    $mod51
                       2    ;                                                             Ver.0.4 2023.05.20
                       3    ; WCH CH552E 対応バージョン(SFRアクセス機能付)
                       4    ;   Internal Clock 24MHz, CPU Clock(Fsys) 24MHz(Default->Extend)
                       5    ;   シリアルポートの自動速度認識機能が正常に動かないので19.2Kbps固定で使う。
                       6    ;   CH552EはUART0を使えないので、UART1を使用。
                       7    ;
                       8    ;   SFR領域のアクセス機能を追加
                       9    ;   I2CSFR  (C) H.-J. Boehling & D. Wulf 14.11.01
                      10    ;
                      11    ;   2023.05.20 CH552T/G版をCH552E用に書き換え。
                      12    ;
                      13    ;*****************************************************************************
                      14    ;*                                                                           *
                      15    ;*                    MCS-BASIC-52 V1.31 Source Listing                      *
                      16    ;*                           12/1986 till 11/2001                            *
                      17    ;*       The original source code of V1.1 (BASIC.SRC and FP52.SRC) by        *
                      18    ;*            Intel Corporation, Embedded Controller Operations              *
                      19    ;*                             is public donain                              *
                      20    ;*                                                                           *
                      21    ;*****************************************************************************
                      22    ;
                      23    ;*****************************************************************************
                      24    ;* General alterations made by D. Wulf, 12/1999.                             *
                      25    ;* e-mail: Detlef.Wulf@onlinehome.de                                         *
                      26    ;*****************************************************************************
                      27    ;
                      28    ;  The following general alterations are made to the original source code:
                      29    ;
                      30    ;  - The original source code had 2 files BASIC.SRC and FP52.SRC those have
                      31    ;    been incorporated into this file for easy of assembly.
                      32    ;
                      33    ;  - All absolute and relativ jumps and calls without labels were provided
                      34    ;    with labels.
                      35    ;
                      36    ;  - All machine code in the original source, coded in databytes are replaced
                      37    ;    by the menomics.
                      38    ;
                      39    ;  - One routine in the source was different to the ROM code and is replaced
                      40    ;    by the ROM code.
                      41    ;
                      42    ;  - Some "ORG" statements between BASIC and floating point code are remarked
                      43    ;    out.
                      44    ;
                      45    ;  - To get room for new code the "ego message" had to be disabled.
                      46    ;    (Remarked with "Sorry")
                      47    ;
                      48    ;  - To get more room for new code the "FPROG" command had to be disabled.
                      49    ;    (Remarked with "get room")
                      50    ;
                      51    ;*****************************************************************************
                      52    ;* Bugfixes for MCS-52-BASIC from D. Karmann, 8/1993.                        *
                      53    ;* e-mail: dankarmann@lucent.com                                             *
                      54    ;*****************************************************************************
                      55    ;
                      56    ;  - Corrected Intel bug to allow BASIC autoboot EPROM at 8000H with user
                      57    ;    command extensions to work.
                      58    ;    (Remarked as Karmann 1)
BASIC52E                                                                                                      PAGE 2

                      59    ;
                      60    ;  - Corrected Intel bug to that discarded the 'F' in any variable ending in
                      61    ;    F, FP, FPR and FPRO and followed by a space.
                      62    ;    (Remarked as Karmann 2)
                      63    ;
                      64    ;*****************************************************************************
                      65    ;* Bugfix and performance for MCS-52-BASIC from                              *
                      66    ;* D. Mudric and Z. Stojsavljevic descipt in                                 *
                      67    ;* Elektor Electronics magazine german issue 3/1992.                         *
                      68    ;*****************************************************************************
                      69    ;
                      70    ;  - Modifications to the unprocess a BASIC line routine.
                      71    ;    (Remarked as Elektor 1)
                      72    ;
                      73    ;  - Modifications to the floating point subtraction routine.
                      74    ;    (Remarked as Elektor 2)
                      75    ;
                      76    ;  - HEX to BIN performance improvements.
                      77    ;    (Remarked as Elektor 3)
                      78    ;
                      79    ; The same article describes a fix for the multiplication underflow bug, but
                      80    ; the fixes did not work.
                      81    ;
                      82    ; The multiplicaton underflow bug is now (V1.31) really fixed by D. Wulf!
                      83    ;    (Remarked as Wulf 1)
                      84    ;
                      85    ;*****************************************************************************
                      86    ;* Change UV-EPROM to EEPROM programming from R. Skowronek, 4/1996           *
                      87    ;* e-mail: r.skowronek@kfa-juelich.de                                        *
                      88    ;*****************************************************************************
                      89    ;
                      90    ; This altered section of code writes the ram resident Basic program to
                      91    ; EEPROM just like the ROM resident Basic interpreter writes to UV-EPROMs.
                      92    ; The EEPROM is connected just like a RAM, i.e. it uses /wr on pin 27
                      93    ; and gets it's adresses from the real address lines, i.e. the only
                      94    ; difference from the normal setup is the use of the /wr line instead of
                      95    ; P1.4, which supplies the program pulse for UV-EPROMs. Now MCS-BASIC-52
                      96    ; can be located in externally ROM and is non the less able to programm
                      97    ; EEPROMs!
                      98    ; (Remarked as Skowronek)
                      99    ;
                     100    ; The original code from R. Skowronek didn't support the "PGM" statement
                     101    ; this feature is added by D. Wulf.
                     102    ; Memory is now limited to 32K bytes RAM, because memory tests above it
                     103    ; would change the EEPROM.
                     104    ;
                     105    ;*****************************************************************************
                     106    ;* Change timer 0 from 13 bit to 16 bit counter mode to use XTAL up to 78MHz *
                     107    ;* from D. Wulf 1/2000                                                       *
                     108    ;*****************************************************************************
                     109    ;
                     110    ; The max. value for XTAL is now 78627473 Hz, for use BASIC-52 with
                     111    ; Dallas 80C320 high speed / low power microcontroller (33 MHz).
                     112    ; The defaut crystal value is still 11059200 Hz. You can set it with
                     113    ; XTAL or patch the souce code at
                     114    ;
                     115    ;       17F1H = 11
                     116    ;       17F0H = 05
BASIC52E                                                                                                      PAGE 3

                     117    ;       17EFH = 92
                     118    ;       17EEH = 00
                     119    ;
                     120    ; with a new crystal value.
                     121    ; (Remarket as Wulf 2)
                     122    ;
                     123    ;*****************************************************************************
                     124    ;* New baudrate detection from D. Wulf 1/2000                                *
                     125    ;*****************************************************************************
                     126    ;
                     127    ; The new baudrate detection uses timer 2 for time measurement in state of
                     128    ; the code loop timing. So the Dallas 80C320 and other controllers can be
                     129    ; used. Also at higher clock speeds the baudrate will detect automaticly.
                     130    ; (Remarked as Wulf 3)
                     131    ;
                     132    ;*****************************************************************************
                     133    ;* New processor type detection from D. Wulf 2/2000                          *
                     134    ;*****************************************************************************
                     135    ;
                     136    ; A new reset routine detects the processor type. So BASIC-52 V1.3 can be
                     137    ; used with the following controllers:
                     138    ;
                     139    ; 8032, 87C52#, Dallas 80C320, 80515*#, 80517*#, 80517A#, 80528, 80535*,
                     140    ; 80537*, 80575 or similars.
                     141    ;
                     142    ; - On processor types marked with the "*" only two different autodetect
                     143    ;   baudrates, depending on the crystal are possible.
                     144    ; - The processor types marked with the "#" have internal ROM, so BASIC-52
                     145    ;   V1.3 can be located there, because it is still only 8K bytes long!
                     146    ;
                     147    ; (Remarked as Wulf 4)
                     148    ;
                     149    ;*****************************************************************************
                     150    ;* OPBYTE 43H for POP from H.-J. Boehling 1/2000                             *
                     151    ;* e-mail: H-Boehling@gmx.de                                                 *
                     152    ;*****************************************************************************
                     153    ;
                     154    ; A feature of BASIC-52 is the ability to add up to 16 custom keywords
                     155    ; representing commands or instructions that you define with assembler
                     156    ; routines. For using system routines in your assembler code there are
                     157    ; operation bytes (for more information see Intels "MCS BASIC-52 MANUAL").
                     158    ; In the original souce code is no OPCODE to put a value from argument
                     159    ; stack and store in a variable.
                     160    ; With BASIC-52 V1.3 you can use OPBYTE 43H which does the same than the
                     161    ; "POP" statement.
                     162    ; (Remarked as Boehling 1)
                     163    ;
                     164    ;*****************************************************************************
                     165    ;* Reset millisecond counter on "TIME=" from H.-J. Boehling 2/2000           *
                     166    ;*****************************************************************************
                     167    ;
                     168    ; The command "TIME=0" now zeros the millisecond register so that TIME
                     169    ; returns with zero.
                     170    ; (Remarked as Boehling 2)
                     171    ;
                     172    ;*****************************************************************************
                     173    ;* New command "ERASE" by H.-J. Boehling 2/2000                              *
                     174    ;*****************************************************************************
BASIC52E                                                                                                      PAGE 4

                     175    ;
                     176    ; To erase an EEPROM (fill 16K byte up to 8000H with 0FFH) the new command
                     177    ; "ERASE" is implemented. It takes 2 min. and 45 sec. to erase the 16K bytes!
                     178    ; (Remarked as Boehling 3)
                     179    ;
                     180    ;*****************************************************************************
                     181    ;* Correct "ASC(x)" bug by D. Wulf 2/2000                                    *
                     182    ;*****************************************************************************
                     183    ;
                     184    ; BASIC-51 V1.1 gives erroneous results for the "ASC(x)" funktion if "x" is
                     185    ; one of the following signs : *, +, -, /, <, =, > or ?.
                     186    ; BASIC-51 V1.3 returns the correct values.
                     187    ; (Remarked as Wulf 5)
                     188    ;
                     189    ;*****************************************************************************
                     190    ;*****************************************************************************
                     191    ; To indicate the new version the start message is changed from
                     192    ; *MCS-51(tm) BASIC V1.1* to
                     193    ; *MCS-BASIC-52 V1.31*
                     194    ;
                     195    ; H.-J. Boehling, D. Wulf 11/26/2001
                     196    ;*****************************************************************************
                     197    ;
  00C8               198    T2CON   EQU     0C8H ; This three lines are necessary for MS-DOS freeware
  00CC               199    TL2     EQU     0CCH ; MCS-51 Family Cross Assembler  ASEM-51 V1.2
  00CD               200    TH2     EQU     0CDH ; from W.W. Heinz (e-mail: ww@andiunx.m.isar.de)
                     201    ;
                     202    ;=== CH552E Added =====
  00C9               203    T2MOD           EQU     0C9H    ; T2MOD define
  00B9               204    CLOCK_CFG       EQU     0B9H    ; System clock configuration register
  00A1               205    SAFE_MOD        EQU     0A1H    ; Safe mode control register
  00C0               206    SCON1           EQU     0C0H    ; UART1 control register
  00C1               207    U1TI            BIT     0C0H+1  ; UART1 transmit interrupt flag
  00C0               208    U1RI            BIT     0C0H+0  ; UART1 receive interrupt flag
  00C1               209    SBUF1           EQU     0C1H    ; UART1 data register
  00C2               210    SBAUD1          EQU     0C2H    ; UART1 baud rate setting register
                     211    ;=====================
                     212    ;
                     213            ;**************************************************************
                     214            ;
                     215            ; TRAP VECTORS TO MONITOR
                     216            ;
                     217            ; RESET TAG (0AAH) ---------2001H
                     218            ;
                     219            ; TAG LOCATION (5AH) ------ 2002H
                     220            ;
                     221            ; EXTERNAL INTERRUPT 0 ---- 2040H
                     222            ;
                     223            ; COMMAND MODE ENTRY ------ 2048H
                     224            ;
                     225            ; SERIAL PORT ------------- 2050H
                     226            ;
                     227            ; MONITOR (BUBBLE) OUTPUT - 2058H
                     228            ;
                     229            ; MONITOR (BUBBLE) INPUT -- 2060H
                     230            ;
                     231            ; MONITOR (BUBBLE) CSTS --- 2068H
                     232            ;
BASIC52E                                                                                                      PAGE 5

                     233            ; GET USER JUMP VECTOR ---- 2070H
                     234            ;
                     235            ; GET USER LOOKUP VECTOR -- 2078H
                     236            ;
                     237            ; PRINT AT VECTOR --------- 2080H
                     238            ;
                     239            ; INTERRUPT PWM ----------- 2088H
                     240            ;
                     241            ; EXTERNAL RESET ---------- 2090H
                     242            ;
                     243            ; USER OUTPUT-------------- 4030H
                     244            ;
                     245            ; USER INPUT -------------- 4033H
                     246            ;
                     247            ; USER CSTS --------------- 4036H
                     248            ;
                     249            ; USER RESET -------------- 4039H
                     250            ;
                     251            ; USER DEFINED PRINT @ ---  403CH
                     252            ;
                     253            ;***************************************************************
                     254            ;
                     255            ;***************************************************************
                     256            ;
                     257            ; MCS - 52  -  8K BASIC VERSION 1.3
                     258            ;
                     259            ;***************************************************************
                     260            ;
0000 618B            261            AJMP    CRST            ;START THE PROGRAM
0002 37              262            ADDC    A,@R1
                     263            ;
0003                 264            ORG     3H
                     265            ;
                     266            ;***************************************************************
                     267            ;
                     268            ;EXTERNAL INTERRUPT 0
                     269            ;
                     270            ;***************************************************************
                     271            ;
0003 20312D          272            JB      DRQ,STQ         ;SEE IF DMA IS SET
0006 C0D0            273            PUSH    PSW             ;SAVE THE STATUS
0008 024003          274            LJMP    4003H           ;JUMP TO USER IF NOT SET
                     275            ;
000B                 276            ORG     0BH
                     277            ;
                     278            ;***************************************************************
                     279            ;
                     280            ;TIMER 0 OVERFLOW INTERRUPT
                     281            ;
                     282            ;***************************************************************
                     283            ;
000B C0D0            284            PUSH    PSW             ;SAVE THE STATUS
000D 202E10          285            JB      C_BIT,STJ       ;SEE IF USER WANTS INTERRUPT
0010 02400B          286            LJMP    400BH           ;EXIT IF USER WANTS INTERRUPTS
                     287            ;
0013                 288            ORG     13H
                     289            ;
                     290            ;***************************************************************
BASIC52E                                                                                                      PAGE 6

                     291            ;
                     292            ;EXTERNAL INTERRUPT 1
                     293            ;
                     294            ;***************************************************************
                     295            ;
0013 20122B          296            JB      INTBIT,STK
0016 C0D0            297            PUSH    PSW
0018 024013          298            LJMP    4013H
                     299            ;
                     300            ;
001B                 301            ORG     1BH
                     302            ;
                     303            ;***************************************************************
                     304            ;
                     305            ;TIMER 1 OVERFLOW INTERRUPT
                     306            ;
                     307            ;***************************************************************
                     308            ;
001B C0D0            309            PUSH    PSW
001D 021F78          310            LJMP    CKS_I
                     311            ;
0020 021902          312    STJ:    LJMP    I_DR            ;DO THE INTERRUPT
                     313            ;
                     314            ;***************************************************************
                     315            ;
                     316            ;SERIAL PORT INTERRUPT
                     317            ;
                     318            ;***************************************************************
                     319            ;
0023                 320            ORG     23H
                     321            ;
0023 C0D0            322            PUSH    PSW
0025 201F1C          323            JB      SPINT,STU       ;SEE IF MONITOR EANTS INTERRUPT
0028 024023          324            LJMP    4023H
                     325            ;
002B                 326            ORG     2BH
                     327            ;
                     328            ;**************************************************************
                     329            ;
                     330            ;TIMER 2 OVERFLOW INTERRUPT
                     331            ;
                     332            ;**************************************************************
                     333            ;
002B C0D0            334            PUSH    PSW
002D 02402B          335            LJMP    402BH
                     336            ;
                     337            ;**************************************************************
                     338            ;
                     339            ;USER ENTRY
                     340            ;
                     341            ;**************************************************************
                     342            ;
0030                 343            ORG     30H
                     344            ;
0030 02193F          345            LJMP    IBLK            ;LINK TO USER BLOCK
                     346            ;
0033 202608          347    STQ:    JB      I_T0,STS        ;SEE IF MONITOR WANTS IT
0036 C296            348            CLR     DACK
BASIC52E                                                                                                      PAGE 7

0038 30B2FD          349            JNB     P3.2,$          ;WAIT FOR DMA TO END
003B D296            350            SETB    DACK
003D 32              351            RETI
                     352            ;
003E 022040          353    STS:    LJMP    2040H           ;GO TO THE MONITOR
                     354            ;
0041 D216            355    STK:    SETB    INTPEN          ;TELL BASIC AN INTERRUPT WAS RECEIVED
0043 32              356            RETI
                     357            ;
0044 022050          358    STU:    LJMP    2050H           ;SERIAL PORT INTERRUPT
                     359            ;
                     360            ;
                     361            ;**************************************************************
                     362            ;
                     363            ; This is the equate table for 8052 basic.
                     364            ;
                     365            ;**************************************************************
                     366            ;
                     367            ; The register to direct equates for CJNE instructions.
                     368            ;
  0000               369    R0B0    EQU     0
  0001               370    R1B0    EQU     1
  0002               371    R2B0    EQU     2
  0003               372    R3B0    EQU     3
  0004               373    R4B0    EQU     4
  0005               374    R5B0    EQU     5
  0006               375    R6B0    EQU     6
  0007               376    R7B0    EQU     7
                     377            ;
                     378            ; Register bank 1 contains the text pointer
                     379            ; and the arg stack pointer.
                     380            ;
  0008               381    TXAL    EQU     8               ;R0 BANK 1 = TEXT POINTER LOW
  0009               382    ASTKA   EQU     9               ;R1 BANK 1 = ARG STACK
  000A               383    TXAH    EQU     10              ;R2 BANK 1 = TEXT POINTER HIGH
                     384            ;
                     385            ; Now five temporary locations that are used by basic.
                     386            ;
  000B               387    TEMP1   EQU     11
  000C               388    TEMP2   EQU     12
  000D               389    TEMP3   EQU     13
  000E               390    TEMP4   EQU     14
  000F               391    TEMP5   EQU     15
                     392            ;
                     393            ; Register bank 2 contains the read text pointer
                     394            ; and the control stack pointer.
                     395            ;
  0010               396    RTXAL   EQU     16              ;R0 BANK 2 = READ TEXT POINTER LOW
  0011               397    CSTKA   EQU     17              ;R1 BANK 2 = CONTROL STACK POINTER
  0012               398    RTXAH   EQU     18              ;R2 BANK 2 = READ TEXT POINTER HIGH
                     399            ;
                     400            ; Now some internal system equates.
                     401            ;
  0013               402    BOFAH   EQU     19              ;START OF THE BASIC PROGRAM, HIGH BYTE
  0014               403    BOFAL   EQU     20              ;START OF THE BASIC PROGRAM, LOW BYTE
  0015               404    NULLCT  EQU     21              ;NULL COUNT
  0016               405    PHEAD   EQU     22              ;PRINT HEAD POSITION
  0017               406    FORMAT  EQU     23
BASIC52E                                                                                                      PAGE 8

                     407            ;
                     408            ; Register bank 3 is for the user and can be loaded
                     409            ; by basic
                     410            ;
                     411            ;
                     412            ;
                     413            ; Now everything else is used by basic.
                     414            ; First the bit locations, these use bytes 34, 35, 36, 37 and 38
                     415            ;
  0010               416    OTS             BIT     16      ;34.0-ON TIME INSTRUCTION EXECUTED
  0011               417    INPROG          BIT     17      ;34.1-INTERRUPT IN PROCESS
  0012               418    INTBIT          BIT     18      ;34.2-INTERRUPT SET BIT
  0013               419    ON_ERR          BIT     19      ;34.3-ON ERROR EXECUTED
  0014               420    OTI             BIT     20      ;34.4-ON TIME INTERRUPT IN PROGRESS
  0015               421    LINEB           BIT     21      ;34.5-LINE CHANGE OCCURED
  0016               422    INTPEN          BIT     22      ;34.6-INTERRUPT PENDING BIT
  0017               423    CONB            BIT     23      ;34.7-CAN CONTINUE IF SET
  0018               424    GTRD            BIT     24      ;35.0-READ GET LOCATION
  0019               425    LPB             BIT     25      ;35.1-PRINT TO LINE PRINTER PORT
  001A               426    CKS_B           BIT     26      ;35.2-FOR PWM INTERRUPT
  001B               427    COB             BIT     27      ;35.3-CONSOLE OUT BIT
                     428                                    ;     0 = SERIAL PORT
                     429                                    ;     1 = LINE PRINTER
  001C               430    COUB            BIT     28      ;35.4-USER CONSOLE OUT BIT
                     431                                    ;     0 = SERIAL PORT
                     432                                    ;     1 = USER DRIVER
  001D               433    INBIT           BIT     29      ;35.5-INITIALIZATION BIT
  001E               434    CIUB            BIT     30      ;35.6-USER CONSOLE IN BIT
                     435                                    ;     0 = SERIAL PORT
                     436                                    ;     1 = USER ROUTINE
  001F               437    SPINT           BIT     31      ;35.7-SERIAL PORT INTERRUPT
  0020               438    STOPBIT         BIT     32      ;36.0-PROGRAM STOP ENCOUNTERED
  0021               439    U_IDL           BIT     33      ;36.1-USER IDLE BREAK
  0022               440    INP_B           BIT     34      ;36.2-SET DURING INPUT INSTRUCTION
                     441    ;DCMPXZ         BIT     35      ;36.3-DCMPX ZERO FLAG
  0024               442    ARGF            BIT     36      ;36.4-ARG STACK HAS A VALUE
  0025               443    RETBIT          BIT     37      ;36.5-RET FROM INTERRUPT EXECUTED
  0026               444    I_T0            BIT     38      ;36.6-TRAP INTERRUPT ZERO TO MON
  0027               445    UPB             BIT     39      ;36.7-SET WHEN @ IS VALID
                     446    
                     447    ;
                     448    ;*****************************************************************************
                     449    ;****** Sorry - but the ego message had to be disabled ***********************
                     450    ;
                     451    ;JKBIT          BIT     40      ;37.0-WB TRIGGER We use the bit for detect
                     452    ;
  0028               453    mul_underflow   BIT     40      ;37.0-mul_limit_case
                     454    ;
                     455    ;*****************************************************************************
                     456    ;
  0029               457    ENDBIT          BIT     41      ;37.1-GET END OF PROGRAM
  002A               458    UBIT            BIT     42      ;37.2-FOR DIM STATEMENT
  002B               459    ISAV            BIT     43      ;37.3-SAVE INTERRUPT STATUS
  002C               460    BO              BIT     44      ;37.4-BUBBLE OUTPUT
  002D               461    XBIT            BIT     45      ;37.5-EXTERNAL PROGRAM PRESENT
  002E               462    C_BIT           BIT     46      ;37.6-SET WHEN CLOCK RUNNING
  002F               463    DIRF            BIT     47      ;37.7-DIRECT INPUT MODE
  0030               464    NO_C            BIT     48      ;38.0-NO CONTROL C
BASIC52E                                                                                                      PAGE 9

  0031               465    DRQ             BIT     49      ;38.1-DMA ENABLED
  0032               466    BI              BIT     50      ;38.2-BUBBLE INPUT
                     467    ;
                     468    ;*****************************************************************************
                     469    ;****** Disable Intel programming for to get room ****************************
                     470    ;
                     471    ;INTELB         BIT     51      ;38.3-INTELLIGENT PROM PROGRAMMING
                     472    ;
                     473    ;*****************************************************************************
                     474    ;
  0034               475    C0ORX1          BIT     52      ;38.4-PRINT FROM ROM OR RAM
  0035               476    CNT_S           BIT     53      ;38.5-CONTROL S ENCOUNTERED
  0036               477    ZSURP           BIT     54      ;38.6-ZERO SUPRESS
  0037               478    HMODE           BIT     55      ;38.7-HEX MODE PRINT
  0097               479    LP              BIT     P1.7    ;SOFTWARE LINE PRINTER
  0096               480    DACK            BIT     P1.6    ;DMA ACK
                     481    ;*****************************************************************************
                     482    ;
                     483    ;PROMV          BIT     P1.5    ;TURN ON PROM VOLTAGE
                     484    ;PROMP          BIT     P1.4    ;PROM PULSE
                     485    ;ALED           BIT     P1.3    ;ALE DISABLE
                     486    ;
                     487    ;*****************************************************************************
  0092               488    T_BIT           BIT     P1.2    ;I/O TOGGLE BIT
  00DF               489    BD              BIT     0DFH    ;Baudrategenerator 805x7,x5
                     490            ;
                     491            ;
                     492            ; The next location is a bit addressable byte counter
                     493            ;
  0027               494    BABC    EQU     39
                     495            ;
                     496            ; Now floating point and the other temps
                     497            ;
                     498            ; FP Uses to locations 03CH
                     499            ;
                     500            ; Now the stack designators.
                     501            ;
  003E               502    SPSAV   EQU     3EH
  003F               503    S_LEN   EQU     3FH
  0040               504    T_HH    EQU     40H
  0041               505    T_LL    EQU     41H
  0042               506    INTXAH  EQU     42H
  0043               507    INTXAL  EQU     43H
  0045               508    MT1     EQU     45H
  0046               509    MT2     EQU     46H
  0047               510    MILLIV  EQU     47H             ;Real Time Clock 5 millisec.
  0048               511    TVH     EQU     48H             ;Real Time Clock high byte
  0049               512    TVL     EQU     49H             ;Real Time Clock low byte
  004A               513    SAVE_T  EQU     4AH
  004B               514    SP_H    EQU     4BH             ;SERIAL PORT TIME OUT
  004C               515    SP_L    EQU     4CH
  004D               516    CMNDSP  EQU     4DH             ;SYSTEM STACK POINTER
  0087               517    PCON0   EQU     87H             ;PCON SFR
  00AA               518    S0RELL  EQU     0AAH            ;S0RELL 805x7A SFR
  00BA               519    S0RELH  EQU     0BAH            ;S0RELH 805x7A SFR
  00CB               520    RCAPH2  EQU     0CBH            ;RCAPH2 8052 SFR
  00CA               521    RCAPL2  EQU     0CAH            ;RCAPL2 8052 SFR
  00D8               522    ADCON   EQU     0D8H            ;ADCON 805xx SFR
BASIC52E                                                                                                      PAGE 10

  00DA               523    DAPR    EQU     0DAH            ;DAPR 805xx SFR
  00FF               524    IRAMTOP EQU     0FFH            ;TOP OF RAM
  00FE               525    STACKTP EQU     0FEH            ;ARG AND CONTROL STACK TOPS
                     526            ;
                     527            ; The character equates
                     528            ;
  000D               529    CR      EQU     0DH             ;CARRIAGE RETURN
  000A               530    LF      EQU     0AH             ;LINE FEED
  0007               531    BELL    EQU     07H             ;BELL CHARACTER
  0008               532    BS      EQU     08H             ;BACK SPACE
  0003               533    CNTRLC  EQU     03H             ;CONTROL C
  0004               534    CNTRLD  EQU     04H             ;CONTROL D
  0000               535    NULL    EQU     00H             ;NULL
                     536            ;
                     537            ; The new baud rate constants
                     538            ;
  00B2               539    B4800   EQU     0B2H            ;Timervalue for 4800 baud
  00D9               540    B9600   EQU     0D9H            ;Timervalue for 9600 baud
                     541            ;
                     542            ;
                     543            ; The internal system equates
                     544            ;
  0049               545    LINLEN  EQU     73              ;THE LENGTH OF AN INPUT LINE
  0001               546    EOF     EQU     01              ;END OF FILE CHARACTER
  0001               547    ASTKAH  EQU     01              ;ASTKA IS IN PAGE 1 OF RAM
  0000               548    CSTKAH  EQU     00              ;CSTKA IS IN PAGE 0 OF RAM
  0001               549    FTYPE   EQU     01              ;CONTROL STACK "FOR"
  0002               550    GTYPE   EQU     02              ;CONTROL STACK "GOSUB"
  0003               551    DTYPE   EQU     03              ;DO-WHILE/UNTIL TYPE
  8000               552    ROMADR  EQU     8000H   ;LOCATION OF ROM
                     553    ;
                     554            ; The floating point equates
                     555            ;
  0006               556    FPSIZ   EQU     6               ;NO. OF BYTES IN A FLOATING NUM
  0004               557    DIGIT   EQU     FPSIZ-2         ;THE MANTISSA OF A FLOATING NUM
  0009               558    STESIZ  EQU     FPSIZ+3         ;SIZE OF SYMBOL ADJUSTED TABLE ELEMENT
                     559    ;FP_BASE EQU     1993H           ;BASE OF FLOATING POINT ROUTINES
  0200               560    PSTART  EQU     512             ;START OF A PROGRAM IN RAM
  0011               561    FSIZE   EQU     FPSIZ+FPSIZ+2+2+1
                     562    ;
                     563    ;=== CH552 Added =====
  03FF               564    ERAMEND EQU     03FFH ; EX-RAM last addr (1KB)
                     565    ;=====================
                     566    ;
                     567            ;**************************************************************
                     568            ;
0047                 569    USENT:  ; User entry jump table
                     570            ;
                     571            ;**************************************************************
                     572            ;
0047 1787            573            DW      CMND1           ;(00, 00H)COMMAND MODE JUMP
0049 1223            574            DW      IFIX            ;(01, 01H)CONVERT FP TO INT
004B 0FDD            575            DW      PUSHAS          ;(02, 02H)PUSH VALUE ONTO ARG STACK
004D 0FD3            576            DW      POPAS           ;(03, 03H)POP VALUE OFF ARG STACK
004F 04BD            577            DW      PG1             ;(04, 04H)PROGRAM A PROM
0051 06D8            578            DW      INLINE          ;(05, 05H)INPUT A LINE
0053 06BF            579            DW      UPRNT           ;(06, 06H)PRINT A LINR
0055 06A5            580            DW      CRLF            ;(07, 07H)OUTPUT A CRLF
BASIC52E                                                                                                      PAGE 11

                     581            ;
                     582            ;**************************************************************
                     583            ;
                     584            ; This is the operation jump table for arithmetics
                     585            ;
                     586            ;**************************************************************
                     587            ;
0057 13AC            588    OPTAB:  DW      ALPAR           ;(08, 08H)LEFT PAREN
0059 132B            589            DW      AEXP            ;(09, 09H)EXPONENTAION
005B 11B0            590            DW      AMUL            ;(10, 0AH)FP MUL
005D 1741            591            DW      AADD            ;(11, 0BH)FLOATING POINT ADD
005F 140A            592            DW      ADIV            ;(12, 0CH)FLOATING POINT DIVIDE
0061 171C            593            DW      ASUB            ;(13, 0DH)FLOATING POINT SUBTRACTION
0063 1498            594            DW      AXRL            ;(14, 0EH)XOR
0065 1484            595            DW      AANL            ;(15, 0FH)AND
0067 148D            596            DW      AORL            ;(16, 10H)OR
0069 13A1            597            DW      ANEG            ;(17, 11H)NEGATE
006B 13DB            598            DW      AEQ             ;(18, 12H)EQUAL
006D 13E7            599            DW      AGE             ;(19, 13H)GREATER THAN OR EQUAL
006F 13EB            600            DW      ALE             ;(20, 14H)LESS THAN OR EQUAL
0071 13E1            601            DW      ANE             ;(21, 15H)NOT EQUAL
0073 13D6            602            DW      ALT             ;(22, 16H)LESS THAN
0075 13C5            603            DW      AGT             ;(23, 17H)GREATER THAN
                     604            ;
                     605            ;***************************************************************
                     606            ;
                     607            ; This is the jump table for unary operators
                     608            ;
                     609            ;***************************************************************
                     610            ;
0077 138F            611            DW      AABS            ;(24, 18H)ABSOLUTE VALUE
0079 136D            612            DW      AINT            ;(25, 19H)INTEGER OPERATOR
007B 1395            613            DW      ASGN            ;(26, 1AH)SIGN OPERATOR
007D 1496            614            DW      ANOT            ;(27, 1BH)ONE'S COMPLEMENT
007F 116D            615            DW      ACOS            ;(28, 1CH)COSINE
0081 11D0            616            DW      ATAN            ;(29, 1DH)TANGENT
0083 1171            617            DW      ASIN            ;(30, 1EH)SINE
0085 128D            618            DW      ASQR            ;(31, 1FH)SQUARE ROOT
0087 13AD            619            DW      ACBYTE          ;(32, 20H)READ CODE
0089 1327            620            DW      AETOX           ;(33, 21H)E TO THE X
008B 11E0            621            DW      AATAN           ;(34, 22H)ARC TANGENT
008D 12C0            622            DW      ALN             ;(35, 23H)NATURAL LOG
008F 13B6            623            DW      ADBYTE          ;(36, 24H)READ DATA MEMORY
0091 13BE            624            DW      AXBYTE          ;(37, 25H)READ EXTERNAL MEMORY
0093 147F            625            DW      PIPI            ;(38, 26H)PI
0095 13F1            626            DW      ARND            ;(39, 27H)RANDOM NUMBER
0097 14A9            627            DW      AGET            ;(40, 28H)GET INPUT CHARACTER
0099 1711            628            DW      AFREE           ;(41, 29H)COMPUTE #BYTES FREE
009B 1721            629            DW      ALEN            ;(42, 2AH) COMPUTE LEN OF PORGRAM
009D 0FD9            630            DW      AXTAL           ;(43, 2BH) CRYSTAL
009F 164F            631            DW      PMTOP           ;(44, 2CH)TOP OF MEMORY
00A1 1729            632            DW      ATIME           ;(45, 2DH) TIME
00A3 14B9            633            DW      A_IE            ;(46, 2EH) IE
00A5 14BD            634            DW      A_IP            ;(47, 2FH) IP
00A7 14C1            635            DW      ATIM0           ;(48, 30H) TIMER 0
00A9 14C7            636            DW      ATIM1           ;(49, 31H) TIMER 1
00AB 14CD            637            DW      ATIM2           ;(50, 32H) TIMER 2
00AD 14D3            638            DW      AT2CON          ;(51, 33H) T2CON
BASIC52E                                                                                                      PAGE 12

00AF 14D7            639            DW      ATCON           ;(52, 34H) TCON
00B1 14DB            640            DW      ATMOD           ;(53, 35H) ATMOD
00B3 14DF            641            DW      ARCAP2          ;(54, 36H) RCAP2
00B5 14E5            642            DW      AP1             ;(55, 37H) P1
00B7 14E9            643            DW      APCON           ;(56, 38H) PCON
00B9 0F43            644            DW      EXPRB           ;(57, 39H) EVALUATE AN EXPRESSION
00BB 165C            645            DW      AXTAL1          ;(58, 3AH) CALCULATE CRYSTAL
00BD 14F0            646            DW      LINE            ;(59, 3BH) EDIT A LINE
00BF 15BA            647            DW      PP              ;(60, 3CH) PROCESS A LINE
00C1 10A0            648            DW      UPPL0           ;(61, 3DH) UNPROCESS A LINE
00C3 0D65            649            DW      VAR             ;(62, 3EH) FIND A VARIABLE
00C5 0ECD            650            DW      GC              ;(63, 3FH) GET A CHARACTER
00C7 0ED5            651            DW      GCI             ;(64, 40H) GET CHARACTER AND INCREMENT
00C9 0791            652            DW      INCHAR          ;(65, 41H) INPUT A CHARACTER
00CB 0802            653            DW      CRUN            ;(66, 42H) RUN A PROGRAM
                     654    ;
                     655    ;*****************************************************************************
                     656    ;****** OPBYTE 43H for POP ***************************************************
                     657    ;****** Boehling 1 ***********************************************************
                     658    ;
00CD 0A7D            659            dw      SPOP            ;(67, 43H) POP a value to a variable
                     660    ;
                     661    ;*****************************************************************************
                     662    ;
                     663    
00CF 01              664    OPBOL:  DB      1               ;
                     665            ;
00D0 0F              666            DB      15              ;LEFT PAREN
00D1 0E              667            DB      14              ;EXPONENTIAN **
00D2 0A              668            DB      10              ;MUL
00D3 08              669            DB      8               ;ADD
00D4 0A              670            DB      10              ;DIVIDE
00D5 08              671            DB      8               ;SUB
00D6 03              672            DB      3               ;XOR
00D7 05              673            DB      5               ;AND
00D8 04              674            DB      4               ;OR
00D9 0C              675            DB      12              ;NEGATE
00DA 06              676            DB      6               ;EQ
00DB 06              677            DB      6               ;GT
00DC 06              678            DB      6               ;LT
00DD 06              679            DB      6               ;NE
00DE 06              680            DB      6               ;LE
00DF 06              681            DB      6               ;GE
                     682            ;
00E0 0F              683    UOPBOL: DB      15              ;AABS
00E1 0F              684            DB      15              ;AAINT
00E2 0F              685            DB      15              ;ASGN
00E3 0F              686            DB      15              ;ANOT
00E4 0F              687            DB      15              ;ACOS
00E5 0F              688            DB      15              ;ATAN
00E6 0F              689            DB      15              ;ASIN
00E7 0F              690            DB      15              ;ASQR
00E8 0F              691            DB      15              ;ACBYTE
00E9 0F              692            DB      15              ;E TO THE X
00EA 0F              693            DB      15              ;AATAN
00EB 0F              694            DB      15              ;NATURAL LOG
00EC 0F              695            DB      15              ;DBYTE
00ED 0F              696            DB      15              ;XBYTE
BASIC52E                                                                                                      PAGE 13

                     697            ;
                     698            ;***************************************************************
                     699            ;
                     700            ; The ASCII printed messages.
                     701            ;
                     702            ;***************************************************************
                     703            ;
00EE 53544F50        704    STP:    DB      'STOP"'
00F2 22         
                     705            ;
00F3 54525920        706    IAN:    DB      'TRY AGAIN"'
00F7 41474149   
00FB 4E22       
                     707            ;
00FD 52454144        708    RDYS:   DB      'READY"'
0101 5922       
                     709            ;
0103 202D2049        710    INS:    DB      ' - IN LINE "'
0107 4E204C49   
010B 4E452022   
                     711            ;
                     712            ;**************************************************************
                     713            ;
                     714            ; This is the command jump table
                     715            ;
                     716            ;**************************************************************
                     717            ;
010F 0802            718    CMNDD:  DW      CRUN            ;RUN
0111 104E            719            DW      CLIST           ;LIST
0113 0B08            720            DW      CNULL           ;NULL
0115 065C            721            DW      CNEW            ;NEW
0117 183E            722            DW      CCONT           ;CONTINUE
0119 048A            723            DW      CPROG           ;PROGRAM A PROM
011B 1773            724            DW      CXFER           ;TRANSFER FROM ROM TO RAM
011D 177F            725            DW      CRAM            ;RAM MODE
011F 053C            726            DW      CROM            ;ROM MODE
                     727    ;
                     728    ;*****************************************************************************
                     729    ;****** Disable Intel programming for to get room ****************************
                     730    ;
                     731    ;       DW      CIPROG          ;INTELLIGENT PROM PROGRAMMING
                     732    ;
                     733    ;*****************************************************************************
                     734    ;
0121 0500            735            dw      CERASE          ;Erase an EEPROM
                     736    ;
                     737            ;***************************************************************
                     738            ;
                     739            ; This is the statement jump table.
                     740            ;
                     741            ;**************************************************************
                     742            ;
0123                 743    STATD:  ;
0123 096E            744            DW      SLET            ;LET            80H
0125 068F            745            DW      SCLR            ;CLEAR          81H
0127 0A76            746            DW      SPUSH           ;PUSH VAR       82H
0129 0AAA            747            DW      SGOTO           ;GO TO          83H
012B 1686            748            DW      STONE           ;TONE           84H
BASIC52E                                                                                                      PAGE 14

012D 0C29            749            DW      SPH0            ;PRINT MODE 0   85H
012F 192E            750            DW      SUI             ;USER INPUT     86H
0131 1933            751            DW      SUO             ;USER OUTPUT    87H
0133 0A7D            752            DW      SPOP            ;POP VAR        88H
0135 0C2D            753            DW      SPRINT          ;PRINT          89H
0137 0E63            754            DW      SCALL           ;CALL           8AH
0139 0D61            755            DW      SDIMX           ;DIMENSION      8BH
013B 060C            756            DW      STRING          ;STRING ALLO    8CH
013D 16F9            757            DW      SBAUD           ;SET BAUD       8DH
013F 1918            758            DW      SCLOCK          ;CLOCK          8EH
0141 0C2B            759            DW      SPH1            ;PRINT MODE 1   8FH
                     760            ;
                     761            ; No direct mode from here on
                     762            ;
0143 0858            763            DW      SSTOP           ;STOP           90H
0145 0E56            764            DW      SOT             ;ON TIME        91H
0147 1419            765            DW      SONEXT          ;ON EXT INT     92H
0149 0B0E            766            DW      SRETI           ;RET FROM INT   93H
014B 0F05            767            DW      S_DO            ;DO             94H
014D 0BCE            768            DW      SRESTR          ;RESTOR         95H
014F 0EFC            769            DW      WCR             ;REM            96H
0151 0B5F            770            DW      SNEXT           ;NEXT           97H
0153 140F            771            DW      SONERR          ;ON ERROR       98H
0155 0CEB            772            DW      S_ON            ;ON             99H
0157 0DF5            773            DW      SINPUT          ;INPUT          9AH
0159 0BE3            774            DW      SREAD           ;READ           9BH
015B 0EEC            775            DW      FINDCR          ;DATA           9CH
015D 0B10            776            DW      SRETRN          ;RETURN         9DH
015F 0A86            777            DW      SIF             ;IF             9EH
0161 0B2D            778            DW      SGOSUB          ;GOSUB          9FH
0163 0A3C            779            DW      SFOR            ;FOR            A0H
0165 0AFC            780            DW      SWHILE          ;WHILE          A1H
0167 0B01            781            DW      SUNTIL          ;UNTIL          A2H
0169 1787            782            DW      CMND1           ;END            A3H
016B 185B            783            DW      I_DL            ;IDLE           A4H
016D 0FE5            784            DW      ST_A            ;STORE AT       A5H
016F 0FE9            785            DW      LD_A            ;LOAD AT        A6H
0171 04F8            786            DW      PGU             ;PGM            A7H
0173 07C0            787            DW      RROM            ;RUN A ROM      A9H
                     788            ;
                     789            ;**************************************************************
                     790            ;
0175                 791    TOKTAB: ; This is the basic token table
                     792            ;
                     793            ;**************************************************************
                     794            ;
                     795            ; First the tokens for statements
                     796            ;
0175 80              797            DB      80H             ;LET TOKEN
0176 4C4554          798            DB      'LET'
                     799            ;
0179 81              800            DB      81H             ;CLEAR TOKEN
017A 434C4541        801            DB      'CLEAR'
017E 52         
                     802            ;
017F 82              803            DB      82H             ;PUSH TOKEN
0180 50555348        804            DB      'PUSH'
                     805            ;
BASIC52E                                                                                                      PAGE 15

  0083               806    T_GOTO  EQU     83H
                     807            ;
0184 83              808            DB      83H             ;GO TO TOKEN
0185 474F544F        809            DB      'GOTO'
                     810            ;
0189 84              811            DB      84H             ;TOGGLE TOKEN
018A 50574D          812            DB      'PWM'
                     813            ;
018D 85              814            DB      85H             ;PRINT HEX MODE 0
018E 5048302E        815            DB      'PH0.'
                     816            ;
0192 86              817            DB      86H             ;USER IN TOKEN
0193 5549            818            DB      'UI'
                     819            ;
0195 87              820            DB      87H             ;USER OUT TOKEN
0196 554F            821            DB      'UO'
                     822            ;
0198 88              823            DB      88H             ;POP TOKEN
0199 504F50          824            DB      'POP'
                     825            ;
019C 89              826            DB      89H             ;PRINT TOKEN
019D 5052494E        827            DB      'PRINT'
01A1 54         
01A2 89              828            DB      89H
01A3 502E            829            DB      'P.'            ;P. ALSO MEANS PRINT
01A5 89              830            DB      89H             ;? ALSO
01A6 3F              831            DB      '?'
                     832            ;
01A7 8A              833            DB      8AH             ;CALL TOKEN
01A8 43414C4C        834            DB      'CALL'
                     835            ;
01AC 8B              836            DB      8BH             ;DIMENSION TOKEN
01AD 44494D          837            DB      'DIM'
                     838            ;
01B0 8C              839            DB      8CH             ;STRING TOKEN
01B1 53545249        840            DB      'STRING'
01B5 4E47       
                     841            ;
01B7 8D              842            DB      8DH             ;SET BAUD RATE
01B8 42415544        843            DB      'BAUD'
                     844            ;
01BC 8E              845            DB      8EH             ;CLOCK
01BD 434C4F43        846            DB      'CLOCK'
01C1 4B         
                     847            ;
01C2 8F              848            DB      8FH             ;PRINT HEX MODE 1
01C3 5048312E        849            DB      'PH1.'
                     850            ;
  0090               851    T_STOP  EQU     90H             ;STOP TOKEN
01C7 90              852            DB      T_STOP
01C8 53544F50        853            DB      'STOP'
                     854            ;
  0090               855    T_DIR   EQU     T_STOP          ;NO DIRECT FROM HERE ON
                     856            ;
01CC 91              857            DB      T_STOP+1        ;ON TIMER INTERRUPT
01CD 4F4E5449        858            DB      'ONTIME'
01D1 4D45       
                     859            ;
BASIC52E                                                                                                      PAGE 16

01D3 92              860            DB      T_STOP+2        ;ON EXTERNAL INTERRUPT
01D4 4F4E4558        861            DB      'ONEX1'
01D8 31         
                     862            ;
01D9 93              863            DB      T_STOP+3        ;RETURN FROM INTERRUPT
01DA 52455449        864            DB      'RETI'
                     865            ;
01DE 94              866            DB      T_STOP+4        ;DO TOKEN
01DF 444F            867            DB      'DO'
                     868            ;
01E1 95              869            DB      T_STOP+5        ;RESTORE TOKEN
01E2 52455354        870            DB      'RESTORE'
01E6 4F5245     
                     871            ;
  0096               872    T_REM   EQU     T_STOP+6        ;REMARK TOKEN
01E9 96              873            DB      T_REM
01EA 52454D          874            DB      'REM'
                     875            ;
01ED 97              876            DB      T_REM+1         ;NEXT TOKEN
01EE 4E455854        877            DB      'NEXT'
                     878            ;
01F2 98              879            DB      T_REM+2         ;ON ERROR TOKEN
01F3 4F4E4552        880            DB      'ONERR'
01F7 52         
                     881            ;
01F8 99              882            DB      T_REM+3         ;ON TOKEN
01F9 4F4E            883            DB      'ON'
                     884            ;
01FB 9A              885            DB      T_REM+4         ;INPUT
01FC 494E5055        886            DB      'INPUT'
0200 54         
                     887            ;
0201 9B              888            DB      T_REM+5         ;READ
0202 52454144        889            DB      'READ'
                     890            ;
  009C               891    T_DATA  EQU     T_REM+6         ;DATA
0206 9C              892            DB      T_DATA
0207 44415441        893            DB      'DATA'
                     894            ;
020B 9D              895            DB      T_DATA+1        ;RETURN
020C 52455455        896            DB      'RETURN'
0210 524E       
                     897            ;
0212 9E              898            DB      T_DATA+2        ;IF
0213 4946            899            DB      'IF'
                     900            ;
  009F               901    T_GOSB  EQU     T_DATA+3        ;GOSUB
0215 9F              902            DB      T_GOSB
0216 474F5355        903            DB      'GOSUB'
021A 42         
                     904            ;
021B A0              905            DB      T_GOSB+1        ;FOR
021C 464F52          906            DB      'FOR'
                     907            ;
021F A1              908            DB      T_GOSB+2        ;WHILE
0220 5748494C        909            DB      'WHILE'
0224 45         
                     910            ;
BASIC52E                                                                                                      PAGE 17

0225 A2              911            DB      T_GOSB+3        ;UNTIL
0226 554E5449        912            DB      'UNTIL'
022A 4C         
                     913            ;
022B A3              914            DB      T_GOSB+4        ;END
022C 454E44          915            DB      'END'
                     916            ;
  00A4               917    T_LAST  EQU     T_GOSB+5        ;LAST INITIAL TOKEN
                     918            ;
  00A4               919    T_TAB   EQU     T_LAST          ;TAB TOKEN
022F A4              920            DB      T_TAB
0230 544142          921            DB      'TAB'
                     922            ;
  00A5               923    T_THEN  EQU     T_LAST+1        ;THEN TOKEN
0233 A5              924            DB      T_THEN
0234 5448454E        925            DB      'THEN'
                     926            ;
  00A6               927    T_TO    EQU     T_LAST+2        ;TO TOKEN
0238 A6              928            DB      T_TO
0239 544F            929            DB      'TO'
                     930            ;
  00A7               931    T_STEP  EQU     T_LAST+3        ;STEP TOKEN
023B A7              932            DB      T_STEP
023C 53544550        933            DB      'STEP'
                     934            ;
  00A8               935    T_ELSE  EQU     T_LAST+4        ;ELSE TOKEN
0240 A8              936            DB      T_ELSE
0241 454C5345        937            DB      'ELSE'
                     938            ;
  00A9               939    T_SPC   EQU     T_LAST+5        ;SPACE TOKEN
0245 A9              940            DB      T_SPC
0246 535043          941            DB      'SPC'
                     942            ;
  00AA               943    T_CR    EQU     T_LAST+6
0249 AA              944            DB      T_CR
024A 4352            945            DB      'CR'
                     946            ;
024C AB              947            DB      T_CR+1
024D 49444C45        948            DB      'IDLE'
                     949            ;
0251 AC              950            DB      T_CR+2
0252 535440          951            DB      'ST@'
                     952            ;
0255 AD              953            DB      T_CR+3
0256 4C4440          954            DB      'LD@'
                     955            ;
0259 AE              956            DB      T_CR+4
025A 50474D          957            DB      'PGM'
                     958            ;
025D AF              959            DB      T_CR+5
025E 52524F4D        960            DB      'RROM'
                     961            ;
                     962            ; Operator tokens
                     963            ;
  00E0               964    T_LPAR  EQU     0E0H            ;LEFT PAREN
0262 E0              965            DB      T_LPAR
0263 28              966            DB      '('
                     967            ;
BASIC52E                                                                                                      PAGE 18

0264 E1              968            DB      T_LPAR+1        ;EXPONENTIAN
0265 2A2A            969            DB      '**'
                     970            ;
0267 E2              971            DB      T_LPAR+2        ;FP MULTIPLY
0268 2A              972            DB      '*'
                     973            ;
  00E3               974    T_ADD   EQU     T_LPAR+3
0269 E3              975            DB      T_LPAR+3        ;ADD TOKEN
026A 2B              976            DB      '+'
                     977            ;
026B E4              978            DB      T_LPAR+4        ;DIVIDE TOKEN
026C 2F              979            DB      '/'
                     980            ;
  00E5               981    T_SUB   EQU     T_LPAR+5        ;SUBTRACT TOKEN
026D E5              982            DB      T_SUB
026E 2D              983            DB      '-'
                     984            ;
026F E6              985            DB      T_LPAR+6        ;LOGICAL EXCLUSIVE OR
0270 2E584F52        986            DB      '.XOR.'
0274 2E         
                     987            ;
0275 E7              988            DB      T_LPAR+7        ;LOGICAL AND
0276 2E414E44        989            DB      '.AND.'
027A 2E         
                     990            ;
027B E8              991            DB      T_LPAR+8        ;LOGICAL OR
027C 2E4F522E        992            DB      '.OR.'
                     993            ;
  00E9               994    T_NEG   EQU     T_LPAR+9
                     995            ;
  00EA               996    T_EQU   EQU     T_LPAR+10       ;EQUAL
0280 EA              997            DB      T_EQU
0281 3D              998            DB      '='
                     999            ;
0282 EB             1000            DB      T_LPAR+11       ;GREATER THAN OR EQUAL
0283 3E3D           1001            DB      '>='
                    1002            ;
0285 EC             1003            DB      T_LPAR+12       ;LESS THAN OR EQUAL
0286 3C3D           1004            DB      '<='
                    1005            ;
0288 ED             1006            DB      T_LPAR+13       ;NOT EQUAL
0289 3C3E           1007            DB      '<>'
                    1008            ;
028B EE             1009            DB      T_LPAR+14       ;LESS THAN
028C 3C             1010            DB      '<'
                    1011            ;
028D EF             1012            DB      T_LPAR+15       ;GREATER THAN
028E 3E             1013            DB      '>'
                    1014            ;
                    1015            ;
  00B0              1016    T_UOP   EQU     0B0H            ;UNARY OP BASE TOKEN
                    1017            ;
028F B0             1018            DB      T_UOP           ;ABS TOKEN
0290 414253         1019            DB      'ABS'
                    1020            ;
0293 B1             1021            DB      T_UOP+1         ;INTEGER TOKEN
0294 494E54         1022            DB      'INT'
                    1023            ;
BASIC52E                                                                                                      PAGE 19

0297 B2             1024            DB      T_UOP+2         ;SIGN TOKEN
0298 53474E         1025            DB      'SGN'
                    1026            ;
029B B3             1027            DB      T_UOP+3         ;GET TOKEN
029C 4E4F54         1028            DB      'NOT'
                    1029            ;
029F B4             1030            DB      T_UOP+4         ;COSINE TOKEN
02A0 434F53         1031            DB      'COS'
                    1032            ;
02A3 B5             1033            DB      T_UOP+5         ;TANGENT TOKEN
02A4 54414E         1034            DB      'TAN'
                    1035            ;
02A7 B6             1036            DB      T_UOP+6         ;SINE TOKEN
02A8 53494E         1037            DB      'SIN'
                    1038            ;
02AB B7             1039            DB      T_UOP+7         ;SQUARE ROOT TOKEN
02AC 535152         1040            DB      'SQR'
                    1041            ;
02AF B8             1042            DB      T_UOP+8         ;CBYTE TOKEN
02B0 434259         1043            DB      'CBY'
                    1044            ;
02B3 B9             1045            DB      T_UOP+9         ;EXP (E TO THE X) TOKEN
02B4 455850         1046            DB      'EXP'
                    1047            ;
02B7 BA             1048            DB      T_UOP+10
02B8 41544E         1049            DB      'ATN'
                    1050            ;
02BB BB             1051            DB      T_UOP+11
02BC 4C4F47         1052            DB      'LOG'
                    1053            ;
02BF BC             1054            DB      T_UOP+12        ;DBYTE TOKEN
02C0 444259         1055            DB      'DBY'
                    1056            ;
02C3 BD             1057            DB      T_UOP+13        ;XBYTE TOKEN
02C4 584259         1058            DB      'XBY'
                    1059            ;
  00BE              1060    T_ULAST EQU     T_UOP+14        ;LAST OPERATOR NEEDING PARENS
                    1061            ;
02C7 BE             1062            DB      T_ULAST
02C8 5049           1063            DB      'PI'
                    1064            ;
02CA BF             1065            DB      T_ULAST+1       ;RND TOKEN
02CB 524E44         1066            DB      'RND'
                    1067            ;
02CE C0             1068            DB      T_ULAST+2       ;GET TOKEN
02CF 474554         1069            DB      'GET'
                    1070            ;
02D2 C1             1071            DB      T_ULAST+3       ;FREE TOKEN
02D3 46524545       1072            DB      'FREE'
                    1073            ;
02D7 C2             1074            DB      T_ULAST+4       ;LEN TOKEN
02D8 4C454E         1075            DB      'LEN'
                    1076            ;
  00C3              1077    T_XTAL  EQU     T_ULAST+5       ;CRYSTAL TOKEN
02DB C3             1078            DB      T_XTAL
02DC 5854414C       1079            DB      'XTAL'
                    1080            ;
  00C4              1081    T_MTOP  EQU     T_ULAST+6       ;MTOP
BASIC52E                                                                                                      PAGE 20

02E0 C4             1082            DB      T_MTOP
02E1 4D544F50       1083            DB      'MTOP'
                    1084            ;
  00C6              1085    T_IE    EQU     T_ULAST+8       ;IE REGISTER
02E5 C6             1086            DB      T_IE
02E6 4945           1087            DB      'IE'
                    1088            ;
  00C7              1089    T_IP    EQU     T_ULAST+9       ;IP REGISTER
02E8 C7             1090            DB      T_IP
02E9 4950           1091            DB      'IP'
                    1092            ;
  00C8              1093    TMR0    EQU     T_ULAST+10      ;TIMER 0
02EB C8             1094            DB      TMR0
02EC 54494D45       1095            DB      'TIMER0'
02F0 5230       
                    1096            ;
  00C9              1097    TMR1    EQU     T_ULAST+11      ;TIMER 1
02F2 C9             1098            DB      TMR1
02F3 54494D45       1099            DB      'TIMER1'
02F7 5231       
                    1100            ;
  00CA              1101    TMR2    EQU     T_ULAST+12      ;TIMER 2
02F9 CA             1102            DB      TMR2
02FA 54494D45       1103            DB      'TIMER2'
02FE 5232       
                    1104            ;
  00C5              1105    T_TIME  EQU     T_ULAST+7       ;TIME
0300 C5             1106            DB      T_TIME
0301 54494D45       1107            DB      'TIME'
                    1108            ;
  00CB              1109    TT2C    EQU     T_ULAST+13      ;T2CON
0305 CB             1110            DB      TT2C
0306 5432434F       1111            DB      'T2CON'
030A 4E         
                    1112            ;
  00CC              1113    TTC     EQU     T_ULAST+14      ;TCON
030B CC             1114            DB      TTC
030C 54434F4E       1115            DB      'TCON'
                    1116            ;
  00CD              1117    TTM     EQU     T_ULAST+15      ;TMOD
0310 CD             1118            DB      TTM
0311 544D4F44       1119            DB      'TMOD'
                    1120            ;
  00CE              1121    TRC2    EQU     T_ULAST+16      ;RCAP2
0315 CE             1122            DB      TRC2
0316 52434150       1123            DB      'RCAP2'
031A 32         
                    1124            ;
  00CF              1125    T_P1    EQU     T_ULAST+17      ;P1
031B CF             1126            DB      T_P1
031C 504F5254       1127            DB      'PORT1'
0320 31         
                    1128            ;
  00D0              1129    T_PC    EQU     T_ULAST+18      ;PCON
0321 D0             1130            DB      T_PC
0322 50434F4E       1131            DB      'PCON'
                    1132            ;
  00D1              1133    T_ASC   EQU     T_ULAST+19      ;ASC TOKEN
BASIC52E                                                                                                      PAGE 21

0326 D1             1134            DB      T_ASC
0327 41534328       1135            DB      'ASC('
                    1136            ;
  00D2              1137    T_USE   EQU     T_ULAST+20      ;USING TOKEN
032B D2             1138            DB      T_USE
032C 5553494E       1139            DB      'USING('
0330 4728       
0332 D2             1140            DB      T_USE
0333 552E28         1141            DB      'U.('
                    1142            ;
  00D3              1143    T_CHR   EQU     T_ULAST+21      ;CHR TOKEN
0336 D3             1144            DB      T_CHR
0337 43485228       1145            DB      'CHR('
                    1146            ;
  00F0              1147    T_CMND  EQU     0F0H            ;COMMAND BASE
                    1148            ;
033B F0             1149            DB      0F0H            ;RUN TOKEN
033C 52554E         1150            DB      'RUN'
                    1151            ;
033F F1             1152            DB      0F1H            ;LIST TOKEN
0340 4C495354       1153            DB      'LIST'
                    1154            ;
0344 F2             1155            DB      0F2H            ;NULL TOKEN
0345 4E554C4C       1156            DB      'NULL'
                    1157            ;
0349 F3             1158            DB      0F3H            ;NEW TOKEN
034A 4E4557         1159            DB      'NEW'
                    1160            ;
034D F4             1161            DB      0F4H            ;CONTINUE TOKEN
034E 434F4E54       1162            DB      'CONT'
                    1163            ;
0352 F5             1164            DB      0F5H            ;PROGRAM TOKEN
0353 50524F47       1165            DB      'PROG'
                    1166            ;
0357 F6             1167            DB      0F6H            ;TRANSFER TOKEN
0358 58464552       1168            DB      'XFER'
                    1169            ;
035C F7             1170            DB      0F7H            ;RAM MODE
035D 52414D         1171            DB      'RAM'
                    1172            ;
0360 F8             1173            DB      0F8H            ;ROM MODE
0361 524F4D         1174            DB      'ROM'
                    1175    ;
                    1176    ;
                    1177    ;*****************************************************************************
                    1178    ;****** Disable Intel programming for to get room ****************************
                    1179    ;
                    1180    ;       DB      0F9H            ;INTELLIGENT PROM PROGRAMMING
                    1181    ;       DB      'FPROG'
                    1182    ;
                    1183    ;*****************************************************************************
                    1184    ;****** New command "ERASE" to fill an EEPROM with 0FFH  *********************
                    1185    ;****** Boehling 3 ***********************************************************
                    1186    ;
0364 F9             1187            db      0F9H            ;Erase an EEPROM
0365 45524153       1188            db      'ERASE'
0369 45         
                    1189    ;
BASIC52E                                                                                                      PAGE 22

                    1190    ;*****************************************************************************
                    1191    ;****** Karmann 2 Bugfix *****************************************************
                    1192    ;
036A FE             1193            db      0feh            ;dummy token and
036B 7F             1194            db      07fh            ;unused dummy char
                    1195    ;
                    1196    ;****** continue with original code: *****************************************
                    1197    ;
036C FF             1198            DB      0FFH            ;END OF TABLE
                    1199            ;
036D 45585452       1200    EIG:    DB      'EXTRA IGNORED"'
0371 41204947   
0375 4E4F5245   
0379 4422       
                    1201            ;
037B 412D5354       1202    EXA:    DB      'A-STACK"'
037F 41434B22   
                    1203            ;
0383 432D5354       1204    EXC:    DB      'C-STACK"'
0387 41434B22   
                    1205            ;
                    1206            ;**************************************************************
                    1207            ;
038B                1208    CRST:   ; This performs system initialzation, it was moved here so the
                    1209            ; new power on reset functions could be tested in an 8751.
                    1210            ;
                    1211            ;**************************************************************
                    1212            ;
                    1213            ; First, initialize SFR's
                    1214            ;
038B 75985A         1215            MOV     SCON,#5AH       ;INITIALIZE SFR'S
                    1216    ;
                    1217    ;*****************************************************************************
                    1218    ;****** Use XTAL up to 47 MHz ************************************************
                    1219    ;****** Wulf 2 ***************************************************************
                    1220    ;
                    1221    ;       MOV     TMOD,#10H
                    1222    ;
038E 758911         1223            mov     TMOD,#11H       ;Use 16 bit mode of timer 0
                    1224    ;
                    1225    ;*****************************************************************************
                    1226    ;
0391 758854         1227            MOV     TCON,#54H
0394 75C834         1228            MOV     T2CON,#34H
                    1229    ;       DB      75H             ;MOV DIRECT, # OP CODE
                    1230    ;       DB      0C8H            ;T2CON LOCATION
                    1231    ;       DB      34H             ;CONFIGURATION BYTE
                    1232    ;
                    1233    ;=== CH552 Added =====
0397 9136           1234            acall   setfsys ; Set CPU Clock 24MHz(Max Speed)
                    1235    ;=====================
                    1236            ;
0399 902001         1237            MOV     DPTR,#2001H     ;READ CODE AT 2001H
039C E4             1238            CLR     A
039D 93             1239            MOVC    A,@A+DPTR
039E B4AA03         1240            CJNE    A,#0AAH,CRST1   ;IF IT IS AN AAH, DO USER RESET
03A1 122090         1241            LCALL   2090H
                    1242            ;
BASIC52E                                                                                                      PAGE 23

03A4 78FF           1243    CRST1:  MOV     R0,#IRAMTOP     ;PUT THE TOP OF RAM IN R0
03A6 E4             1244            CLR     A               ;ZERO THE ACC
                    1245            ;
03A7 F6             1246    CRST2:  MOV     @R0,A           ;CLEAR INTERNAL MEMORY
03A8 D8FD           1247            DJNZ    R0,CRST2        ;LOOP TIL DONE
                    1248            ;
                    1249            ; Now, test the external memory
                    1250            ;
03AA 753E4D         1251            MOV     SPSAV,#CMNDSP   ;SET UP THE STACK
03AD 853E81         1252            MOV     SP,SPSAV
                    1253    ;
                    1254    ;*****************************************************************************
                    1255    ;****** Karmann 1 Bugfix *****************************************************
                    1256    ;
03B0 1217E0         1257            lcall   TEST_USER       ;chek for user command extensions
                    1258    ;
                    1259    ;****** continue with original code: *****************************************
                    1260    ;
03B3 751380         1261            MOV     BOFAH,#HIGH ROMADR
03B6 751411         1262            MOV     BOFAL,#LOW ROMADR+17
03B9 908000         1263            MOV     DPTR,#ROMADR    ;GET THE BYTE AT 8000H
03BC E0             1264            MOVX    A,@DPTR
03BD C3             1265            CLR     C
03BE 9431           1266            SUBB    A,#31H          ;FOR BIAS
03C0 F545           1267            MOV     MT1,A           ;SAVE IN DIRECT MATH LOC
03C2 C2E2           1268            CLR     ACC.2           ;SAVE FOR RESET
03C4 FF             1269            MOV     R7,A            ;SAVE IT IN R7
03C5 A3             1270            INC     DPTR
03C6 B1BA           1271            ACALL   L31DPI          ;SAVE BAUD RATE
03C8 120885         1272            LCALL   RCL
03CB A3             1273            INC     DPTR            ;GET MEMTOP
03CC B1BA           1274            ACALL   L31DPI
03CE 90005F         1275            MOV     DPTR,#5FH       ;READ THE EXTERNAL BYTE
03D1 E0             1276            MOVX    A,@DPTR
03D2 900000         1277            MOV     DPTR,#0         ;ESTABLISH BASE FOR CLEAR
03D5 B4A508         1278            CJNE    A,#0A5H,CRS     ;Erase the memory
03D8 E545           1279            MOV     A,MT1
03DA C2E0           1280            CLR     ACC.0           ;CLEAR BIT ONE
03DC 6404           1281            XRL     A,#4H
03DE 602C           1282            JZ      CR2
                    1283            ;
03E0 BF0202         1284    CRS:    CJNE    R7,#2,CRS1
03E3 8003           1285            SJMP    CRS2
03E5 BF0304         1286    CRS1:   CJNE    R7,#3,CR0
03E8 D17D           1287    CRS2:   ACALL   CL_1
03EA 8014           1288            SJMP    CR1
                    1289            ;
03EC AB83           1290    CR0:    MOV     R3,DPH          ;SAVE THE DPTR
03EE A982           1291            MOV     R1,DPL
03F0 A3             1292            INC     DPTR
03F1 745A           1293            MOV     A,#5AH
03F3 F0             1294            MOVX    @DPTR,A         ;Test external memory
03F4 E0             1295            MOVX    A,@DPTR
03F5 B45A08         1296            CJNE    A,#5AH,CR1
03F8 E4             1297            CLR     A
03F9 F0             1298            MOVX    @DPTR,A
                    1299    ;
                    1300    ;*****************************************************************************
BASIC52E                                                                                                      PAGE 24

                    1301    ;******* Skowronek alterations to programm EEPROM's in state of UV-EPROM's ***
                    1302    ;
                    1303    ;       CJNE    R3,#0E0H,CR0
                    1304    ;
                    1305    ;=== CH552 Replaced =====
                    1306    ;       CJNE    R3,#HIGH ROMADR-1,CR0   ;Stop the test at 8000H because
                    1307    ;       CJNE    R1,#LOW ROMADR-2,CR0    ;EEPROM starts here
                    1308    ;
03FA BB03EF         1309            CJNE    R3,#HIGH ERAMEND,CR0    ; Stop the test at 03FFH because
03FD B9FEEC         1310            CJNE    R1,#LOW ERAMEND-1,CR0   ; EXT-RAM end
                    1311    ;========================
                    1312    ;
                    1313    ;*****************************************************************************
                    1314    ;
0400 BB0300         1315    CR1:    CJNE    R3,#03H,CR11    ;NEED THIS MUCH RAM
0403 4086           1316    CR11:   JC      CRST
0405 90010A         1317            MOV     DPTR,#MEMTOP    ;SAVE MEMTOP
0408 D103           1318            ACALL   S31DP2          ;SAVE MEMTOP AND SEED RCELL
040A D15C           1319            ACALL   CNEW            ;CLEAR THE MEMORY AND SET UP POINTERS
                    1320            ;
040C D16F           1321    CR2:    ACALL   RC1             ;SET UP STACKS IF NOT DONE
                    1322            ;
040E 121657         1323            LCALL   AXTAL0          ;DO THE CRYSTAL
0411 E545           1324            MOV     A,MT1           ;GET THE RESET BYTE
0413 B40503         1325            CJNE    A,#5,CR20
0416 124039         1326            LCALL   4039H
0419 500D           1327    CR20:   JNC     BG1             ;CHECK FOR 0,1,2,3, OR 4
041B 30E049         1328            JNB     ACC.0,BG3       ;NO RUN IF WRONG TYPE
041E 908010         1329            MOV     DPTR,#ROMADR+16
0421 E0             1330            MOVX    A,@DPTR         ;READ THE BYTE
0422 B45542         1331            CJNE    A,#55H,BG3
0425 020802         1332            LJMP    CRUN
                    1333    ;
                    1334    ;*****************************************************************************
                    1335    ;******* New baudrate detection **********************************************
                    1336    ;******* Wulf 3 alteration 1 *************************************************
                    1337    ;
                    1338    ;BG1:    CLR     A               ;DO BAUD RATE
                    1339    ;        MOV     R3,A
                    1340    ;        MOV     R1,A
                    1341    ;        MOV     R0,#4
                    1342    ;        JB      RXD,$           ;LOOP UNTIL A CHARACTER IS RECEIVED
                    1343    ;       ;
                    1344    ;BG2:    DJNZ    R0,$            ;FOUR CLOCKS, IN LOOP
                    1345    ;        CALL    DEC3211         ;NINE CLOCKS
                    1346    ;        MOV     R0,#2           ;ONE CLOCK
                    1347    ;        JNB     RXD,BG2         ;TWO CLOCKS, LOOP UNTIL DONE
                    1348    ;        JB      RXD,$           ;WAIT FOR STOP CHARACTER TO END
                    1349    ;        JNB     RXD,$
                    1350    ;
                    1351    ;*****************************************************************************
                    1352    ;******* New processor type detection ****************************************
                    1353    ;******* Wulf 4 **************************************************************
                    1354    ;
                    1355    ;-- comment out for AT98LP52 ---------------------------------------------
                    1356    ;
                    1357    ;BG1:   clr     a
                    1358    ;       mov     t2con,a
BASIC52E                                                                                                      PAGE 25

                    1359    ;       mov     TH2,#0FFh
                    1360    ;       mov     TL2,#0F8h
                    1361    ;       jb      rxd,$
                    1362    ;       mov     t2con,#5        ;Timer2 start
                    1363    ;       jnb     rxd,$
                    1364    ;       mov     t2con,a         ;Timer2 stop
                    1365    ;       jb      rxd,$
                    1366    ;       jnb     rxd,$
                    1367    ;       call    sercalc         ;r3=timer2 MSB default
                    1368    ;       ;
                    1369    ;       cjne    a,ADCON,BG10    ;jump if A/D processor like 805x5
                    1370    ;BG14:  mov     a,S0RELL
                    1371    ;       cjne    a,#B9600,BG2    ;jump if not 805x7A
                    1372    ;       mov     a,r3
                    1373    ;       anl     S0RELH,a
                    1374    ;       mov     S0RELL,r1       ;start Baudratetimer 805X7A
                    1375    ;       sjmp    BG11
                    1376    ;       ;
                    1377    ;BG10:  cjne    r1,#B9600,BG12  ;jump if wrong fast baud rate
                    1378    ;BG11:  orl     PCON0,#080h     ;setb smod for fast mode
                    1379    ;       sjmp    BG13
                    1380    ;       ;
                    1381    ;BG12:  cjne    r1,#B4800,BG14  ;jump if wrong slow baudrate
                    1382    ;BG13:  setb    BD              ;enable baudrategenerator
                    1383    ;       sjmp    BG15
                    1384    ;       ;
                    1385    ;BG2:   mov     t2con,#34h      ;configure Timer2 as baudrate generator
                    1386    ;BG15:  CALL    RCL             ;LOAD THE TIMER
                    1387    
                    1388    ;
                    1389    ;-- insert for AT98LP52 --------------------------------------------------
                    1390    ;
                    1391    ;BG1:   mov     r6,#0           ; Speed Table Index
                    1392    ;       mov     r3,#0FFH        ; Set R3 = RCAP2H
                    1393    ;
                    1394    ;BG11:  mov     dptr,#SPEED_TBL ; Speed Table
                    1395    ;       mov     a,r6            ; Speed Table Index
                    1396    ;       movc    a,@a+dptr       ; Fetch Speed Table
                    1397    ;       inc     r6
                    1398    ;       jz      bg3             ; Table End, Use Last Speed
                    1399    ;
                    1400    ;       mov     r1,a            ; Set R1 = RCAP2L
                    1401    ;       mov     t2con,#34h      ;configure Timer2 as baudrate generator
                    1402    ;       call    RCL             ;LOAD THE TIMER
                    1403    ;
                    1404    ;       mov     dptr,#TEST_MSG  ; Put Test Message
                    1405    ;       mov     r7,#0           ; Message Text Index
                    1406    ;
                    1407    ;BG13:  mov     a,r7            ; Text Index
                    1408    ;       movc    a,@a+dptr       ; Fetch Message String
                    1409    ;       jz      BG14            ; String End ?
                    1410    ;       jnb     TI,$            ; Wait Until Transmmit End
                    1411    ;       clr     TI              ; Clear TX Flag
                    1412    ;       mov     SBUF,a          ; Output Character
                    1413    ;       inc     r7              ; Next Character
                    1414    ;       sjmp    BG13
                    1415    ;
                    1416    ;BG14:  jnb     RI,$            ; Wait Until Receive End
BASIC52E                                                                                                      PAGE 26

                    1417    ;       mov     a,SBUF          ; Get Receive Character
                    1418    ;       clr     RI              ; Reset Flag
                    1419    ;       anl     a,#07FH         ; Clear Bit-7
                    1420    ;       cjne    a,#'y',BG11     ; Ok?, Test Next Speed
                    1421    ;       sjmp    BG3
                    1422    ;
                    1423    ;SPEED_TBL:     db      0A0H    ; RCAP2H,L = FFA0H (19.2Kbps, X'TAL 29.4912MHz, Fast-Mode)
                    1424    ;               db      0B8H    ; RCAP2H,L = FFB8H (19.2Kbps, X'TAL 22.1184MHz, Fast-Mode)
                    1425    ;               db      0D0H    ; RCAP2H,L = FFD0H (19.2Kbbs, X'TAL 29.4912MHz, 8051-Mode)
                    1426    ;               db      0DCH    ; RCAP2H,L = FFDCH (19.2Kbps, X'TAL 22.1184MHz, 8051-Mode or
                                                                                11.0592MHz, Fast-Mode)
                    1427    ;               db      00h     ; Table End
                    1428    
                    1429    ;-- CH552 Insert Start ---------------------------------------------------------
                    1430    ;===============================================================================
                    1431    ;  CH552 Set Fixed baudrate 19.23Kbps
                    1432    ;  RCAP2H,L = 65536 - (Fsys/16/Baud Rate) : When Fsys = 24MHz, bTMR_CLK=1,bT2_CLK=1
                    1433    ;===============================================================================
                    1434    ;baud19K        equ     0ffb2h          ; RCAP2H,L Value of 19.23Kbps (FFB2H = 65458)
                    1435    ;
                    1436    ;BG1:
                    1437    ;       orl             t2mod,#0C0H             ; Set bTMR_CLK, bT2_CLK ( Set Timer2 Clock, 
                                                                               MAX Speed = Fsys = 24MHz )
                    1438    ;       mov             r3,#high baud19k        ; Set R3 = RCAP2H = FFH
                    1439    ;       mov             r1,#low baud19k         ; Set R1 = RCAP2L = B2H
                    1440    ;       mov             t2con,#34h              ; configure Timer2 as baudrate generator
                    1441    ;       call    RCL                             ; LOAD THE TIMER
                    1442    
                    1443    ;       sjmp    BG3
                    1444    ;
                    1445    ;-- CH552E Insert Start ---------------------------------------------------------
                    1446    ;===============================================================================
                    1447    ;  CH552E Set Fixed baudrate 19.23Kbps
                    1448    ;  SBAUD1 = 256 - (Fsys/16/Baud Rate) : When Fsys = 24MHz, SCON1 U1SMOD=1
                    1449    ;===============================================================================
  00B2              1450    baud19K equ     178                             ; SBAUD1 Value of 19.23Kbps
                    1451    ;
0428                1452    BG1:
0428 75C800         1453            mov             t2con,#00h              ; Timer2 not use as baudrate generater
042B 759800         1454            mov             scon,#00h               ; UART0 not use
                    1455    
042E 75C032         1456            mov             scon1,#32h              ; Fast baud rate, Receive enable, Transmit i
                                                                               nterrupt flag on
0431 75C2B2         1457            mov             sbaud1,#baud19k ; set baud rate
                    1458    
0434 8031           1459            sjmp    BG3
                    1460    
                    1461    ;===============================================================================
                    1462    ;  CH552 System Clock (Fsys) Up 6MHz -> 24MHz
                    1463    ;===============================================================================
0436                1464    setfsys:
0436 E5B9           1465            mov     a,CLOCK_CFG             ; Get CLOCK_CFG
0438 54F8           1466            anl     a,#0F8H                 ;  Clear MASK_SYS_CK_SEL
043A 4406           1467            orl     a,#006H                 ;  Set MASK_SYS_CK_SEL = 110B(24MHz)
                    1468    
043C 75A155         1469            mov     SAFE_MOD,#055H  ; Enter Safe_Mode Key-1
043F 75A1AA         1470            mov     SAFE_MOD,#0AAH  ; Enter Safe_Mode Key-2
                    1471    
BASIC52E                                                                                                      PAGE 27

0442 F5B9           1472            mov     CLOCK_CFG,a             ; Rewrite CLOCK_CFG
                    1473    
0444 75A100         1474            mov     SAFE_MOD,#00    ; Exit Safe_Mode
                    1475    
0447 22             1476            ret
                    1477    
0467                1478            org     0467h           ; Insert Dummy Space, 0467H = Original BG3 Address
                    1479    ;
                    1480    ;-- insert end --------------------------------------------------------------
                    1481    ;
                    1482    ;****** Original code from here **********************************************
                    1483    ;
0467 901FD3         1484    BG3:    MOV     DPTR,#S_N       ;GET THE MESSAGE
046A D1AD           1485            ACALL   CRP             ;PRINT IT
046C 02177F         1486            LJMP    CRAM
                    1487            ;
                    1488            ;***************************************************************
                    1489            ;
                    1490            ; CIPROG AND CPROG - Program a prom
                    1491            ;
                    1492            ;***************************************************************
                    1493            ;
046F 7F00           1494    PG8:    MOV     R7,#00H         ;PROGRAM ONE BYTE AT A TIME
0471 7E01           1495            MOV     R6,#01H
0473 7A7F           1496            MOV     R2,#HIGH ROMADR-1
0475 78FF           1497            MOV     R0,#LOW ROMADR-1;LOAD PROM ADDRESS
0477 91B5           1498            ACALL   PG101
0479 0E             1499            INC     R6
047A E5CB           1500            MOV     A,RCAPH2
                    1501    ;       DB      0E5H            ;MOV A DIRECT OP CODE
                    1502    ;       DB      0CBH            ;ADDRESS OF R2CAP HIGH
047C 91B5           1503            ACALL   PG101
047E E5CA           1504            MOV     A,RCAPL2
                    1505    ;       DB      0E5H            ;MOV A, DIRECT OP CODE
                    1506    ;       DB      0CAH            ;R2CAP LOW
0480 7E03           1507            MOV     R6,#3
0482 7909           1508            MOV     R1,#LOW MEMTOP-1
0484 7B01           1509            MOV     R3,#HIGH MEMTOP
0486 91B5           1510            ACALL   PG101           ;SAVE MEMTOP
0488 8029           1511            SJMP    PGR
                    1512    ;
                    1513    ;
                    1514    ;*****************************************************************************
                    1515    ;****** Skowronek alterations to programm EEPROM's in state of UV-EPROM's ****
                    1516    ;****** Support the "PGM" statement was added by D. Wulf *********************
                    1517    ;****** Disable Intel programming and code optimize by H.-J. Boehling ********
                    1518    ;
                    1519    ;CIPROG: MOV    DPTR,#IPROGS    ;LOAD IPROG LOCATION
                    1520    ;       SETB    INTELB
                    1521    ;       SJMP    CPROG1          ;GO DO PROG
                    1522    ;       ;
                    1523    ;CPROG: MOV     DPTR,#PROGS     ;LOAD PROG LOCATION
                    1524    ;       CLR     INTELB
                    1525    ;       ;
                    1526    ;CPROG1: ACALL  LD_T            ;LOAD THE TIMER
                    1527    ;       CLR     PROMV           ;TURN ON THE PROM VOLTAGE
                    1528    ;       CALL    DELTST          ;SEE IF A CR
                    1529    ;       JNZ     PG8             ;SAVE TIMER IF SO
BASIC52E                                                                                                      PAGE 28

                    1530    ;       MOV     R4,#0FEH
                    1531    ;       SETB    INBIT
                    1532    ;       ACALL   ROMFD           ;GET THE ROM ADDRESS OF THE LAST LOCATION
                    1533    ;       CALL    TEMPD           ;SAVE THE ADDRESS
                    1534    ;       MOV     A,R4            ;GET COUNT
                    1535    ;       CPL     A
                    1536    ;       CALL    TWO_R2          ;PUT IT ON THE STACK
                    1537    ;       CALL    FP_BASE7        ;OUTPUT IT
                    1538    ;       ACALL   CCAL            ;GET THE PROGRAM
                    1539    ;       ACALL   CRLF            ;DO CRLF
                    1540    ;       MOV     R0,TEMP4        ;GET ADDRESS
                    1541    ;       MOV     R2,TEMP5
                    1542    ;       MOV     A,#55H          ;LOAD SIGNIFIER
                    1543    ;       INC     R6              ;LOAD LEN + 1
                    1544    ;       CJNE    R6,#00,CPROG2
                    1545    ;       INC     R7
                    1546    ;CPROG2: ACALL   PG102
                    1547    ;
                    1548    ;PGR:   SETB    PROMV
                    1549    ;       AJMP    C_K
                    1550    ;
                    1551    ;PG1:   MOV     P2,R3           ;GET THE BYTE TO PROGRAM
                    1552    ;       MOVX    A,@R1
                    1553    ;PG101:  LCALL   INC3210         ;BUMP POINTERS
                    1554    ;PG102:  MOV     R5,#1           ;SET UP INTELLIGENT COUMTER
                    1555    ;
                    1556    ;PG2:   MOV     R4,A            ;SAVE THE BYTE IN R4
                    1557    ;       ACALL   PG7             ;PROGRAM THE BYTE
                    1558    ;       ACALL   PG9
                    1559    ;       JB      INTELB,PG4      ;SEE IF INTELLIGENT PROGRAMMING
                    1560    ;
                    1561    ;PG3:   XRL     A,R4
                    1562    ;       JNZ     PG6             ;ERROR IF NOT THE SAME
                    1563    ;       CALL    DEC76           ;BUMP THE COUNTERS
                    1564    ;       JNZ     PG1             ;LOOP IF NOT DONE
                    1565    ;       ANL     PSW,#11100111B  ;INSURE RB0
                    1566    ;PG31:   RET
                    1567    ;
                    1568    ;PG4:   XRL     A,R4            ;SEE IF PROGRAMMED
                    1569    ;       JNZ     PG5             ;JUMP IF NOT
                    1570    ;       MOV     A,R4            ;GET THE DATA BACK
                    1571    ;       ACALL   PG7             ;PROGRAM THE LOCATION
                    1572    ;PG41:   ACALL   ZRO             ;AGAIN
                    1573    ;       ACALL   ZRO             ;AND AGAIN
                    1574    ;       ACALL   ZRO             ;AND AGAIN
                    1575    ;       DJNZ    R5,PG41         ;KEEP DOING IT
                    1576    ;       ACALL   PG9             ;RESET PROG
                    1577    ;       SJMP    PG3             ;FINISH THE LOOP
                    1578    ;
                    1579    ;PG5:   INC     R5              ;BUMP THE COUNTER
                    1580    ;       MOV     A,R4            ;GET THE BYTE
                    1581    ;       CJNE    R5,#25,PG2      ;SEE IF TRIED 25 TIMES
                    1582    ;
                    1583    ;PG6:   SETB    PROMV           ;TURN OFF PROM VOLTAGE
                    1584    ;       MOV     PSW,#0          ;INSURE RB0
                    1585    ;       JNB     DIRF,PG31       ;EXIT IF IN RUN MODE
                    1586    ;       MOV     DPTR,#E16X      ;PROGRAMMING ERROR
                    1587    ;
BASIC52E                                                                                                      PAGE 29

                    1588    ;ERRLK: LJMP    ERROR           ;PROCESS THE ERROR
                    1589    ;
                    1590    ;PG7:   MOV     P0,R0           ;SET UP THE PORTS
                    1591    ;       MOV     P2,R2           ;LATCH LOW ORDER ADDRESS
                    1592    ;       ACALL   PG11            ;DELAY FOR 8748/9
                    1593    ;       CLR     ALED
                    1594    ;       MOV     P0,A            ;PUT DATA ON THE PORT
                    1595    ;       ;
                    1596    ;ZRO:   NOP                     ;SETTLEING TIME + FP ZERO
                    1597    ;       NOP
                    1598    ;       NOP
                    1599    ;       NOP
                    1600    ;       NOP
                    1601    ;       NOP
                    1602    ;       ACALL   PG11            ;DELAY A WHILE
                    1603    ;       CLR     PROMP           ;START PROGRAMMING
                    1604    ;       ACALL   TIMER_LOAD      ;START THE TIMER
                    1605    ;       JNB     TF1,$           ;WAIT FOR PART TO PROGRAM
                    1606    ;       RET                     ;EXIT
                    1607    ;
                    1608    ;PG9:   SETB    PROMP
                    1609    ;       ACALL   PG11            ;DELAY FOR A WHILE
                    1610    ;       JNB     P3.2,$          ;LOOP FOR EEPROMS
                    1611    ;       MOV     P0,#0FFH
                    1612    ;       CLR     P3.7            ;LOWER READ
                    1613    ;       ACALL   PG11
                    1614    ;       MOV     A,P0            ;READ THE PORT
                    1615    ;       SETB    P3.7
                    1616    ;       SETB    ALED
                    1617    ;       RET
                    1618    ;
                    1619    ;PG11:  MOV     TEMP5,#12       ;DELAY 30uS AT 12 MHZ
                    1620    ;       DJNZ    TEMP5,$
                    1621    ;       RET
                    1622    ;
                    1623    ;       ;**************************************************************
                    1624    ;       ;
                    1625    ;PGU:   ;PROGRAM A PROM FOR THE USER
                    1626    ;       ;
                    1627    ;       ;**************************************************************
                    1628    ;
                    1629    ;       CLR     PROMV           ;TURN ON THE VOLTAGE
                    1630    ;       MOV     PSW,#00011000B  ;SELECT RB3
                    1631    ;       ACALL   PG1             ;DO IT
                    1632    ;       SETB    PROMV           ;TURN IT OFF
                    1633    ;       RET
                    1634    ;
                    1635    ;****** alteredet code starts here: ******************************************
                    1636    ;
048A 900128         1637    CPROG:  MOV     DPTR,#PROGS     ;LOAD PROG LOCATION
                    1638            ;
048D B182           1639    CPROG1: ACALL   LD_T            ;LOAD THE TIMER
048F 120EE1         1640            CALL    DELTST          ;SEE IF A CR
0492 70DB           1641            JNZ     PG8             ;SAVE TIMER IF SO
0494 7CFE           1642            MOV     R4,#0FEH
0496 D21D           1643            SETB    INBIT
0498 B15B           1644            ACALL   ROMFD           ;GET THE ROM ADDRESS OF THE LAST LOCATION
049A 121854         1645            CALL    TEMPD           ;SAVE THE ADDRESS
BASIC52E                                                                                                      PAGE 30

049D EC             1646            MOV     A,R4            ;GET COUNT
049E F4             1647            CPL     A
049F 1214B1         1648            CALL    TWO_R2          ;PUT IT ON THE STACK
04A2 12197D         1649            CALL    FP_BASE7        ;OUTPUT IT
04A5 B11C           1650            ACALL   CCAL            ;GET THE PROGRAM
04A7 D1A5           1651            ACALL   CRLF            ;DO CRLF
04A9 A80E           1652            MOV     R0,TEMP4        ;GET ADDRESS
04AB AA0F           1653            MOV     R2,TEMP5
04AD 7455           1654            MOV     A,#55H          ;LOAD SIGNIFIER
04AF 0E             1655            INC     R6              ;LOAD LEN + 1
04B0 0F             1656            INC     R7
04B1 91C3           1657    CPROG2: ACALL   PG2
                    1658            ;
04B3 A140           1659    PGR:    AJMP    C_K             ;Exit to command mode
                    1660            ;
04B5 0F             1661    PG101:  INC     R7
04B6 BE0007         1662            CJNE    R6,#0,PG4
04B9 1F             1663            DEC     R7
04BA 8004           1664            SJMP    PG4
                    1665            ;
04BC 0F             1666    PG10:   INC     R7
                    1667            ;
04BD 8BA0           1668    PG1:    MOV     P2,R3           ;GET THE BYTE TO PROGRAM
04BF E3             1669            MOVX    A,@R1
04C0 121576         1670    PG4:    LCALL   INC3210         ;BUMP POINTERS
                    1671            ;
04C3 91D9           1672    PG2:    ACALL   PG7             ;Write the byte
04C5 7004           1673            JNZ     PG5             ;exit if error
04C7 DEF4           1674            DJNZ    R6,PG1
04C9 DFF2           1675            DJNZ    R7,PG1          ;LOOP IF NOT DONE
                    1676            ;
04CB 53D0E7         1677    PG5:    ANL     PSW,#11100111B  ;INSURE RB0
04CE 6027           1678            JZ      PG31            ;Jump if none error
                    1679            ;
04D0 302F24         1680    PG6:    JNB     DIRF,PG31       ;EXIT IF IN RUN MODE
04D3 901F9A         1681            MOV     DPTR,#E16X      ;PROGRAMMING ERROR
04D6 02188F         1682    ERRLK:  LJMP    ERROR           ;PROCESS THE ERROR
                    1683            ;
                    1684            ;
04D9 FC             1685    PG7:    MOV     R4,A            ;SAVE THE BYTE IN R4 for error detect
04DA 8A83           1686            mov     dph,r2          ;load data pointer with eeprom address
04DC 8882           1687            mov     dpl,r0
04DE F0             1688            movx    @dptr,a         ;write the byte
04DF 7D             1689            DB      07DH            ;mov     r5,#0
                    1690            ;
04E0 00             1691    ZRO:    NOP
04E1 00             1692            NOP                     ;SETTLEING TIME + FP ZERO
04E2 00             1693            NOP                     ;Atenttion. This 6 NOP's a not only
04E3 00             1694            NOP                     ;for settleing time, it is also the
04E4 00             1695            NOP                     ;floating point zero!
04E5 00             1696            NOP
04E6 750F0C         1697            MOV     TEMP5,#12       ;DELAY 30uS AT 12 MHZ
04E9 D50FFD         1698            DJNZ    TEMP5,$
04EC B12D           1699            ACALL   TIMER_LOAD      ;START THE TIMER
04EE 308FFD         1700            JNB     TF1,$           ;WAIT FOR PART TO PROGRAM
04F1 E0             1701            movx    A,@DPTR         ;Read back for error detect
04F2 6C             1702            xrl     A,R4            ;Test for error
04F3 6002           1703            jz      PG31
BASIC52E                                                                                                      PAGE 31

04F5 DDE9           1704            djnz    r5,ZRO
04F7 22             1705    PG31:   RET
                    1706            ;
                    1707            ;**************************************************************
                    1708            ;
04F8                1709    PGU:    ;PROGRAM A PROM FOR THE USER (statement 'PGM')
                    1710            ;
                    1711            ;**************************************************************
                    1712            ;
04F8 75D018         1713            MOV     PSW,#00011000B  ;SELECT RB3
04FB BE00BE         1714            CJNE    R6,#0,PG10
04FE 80BD           1715            SJMP    PG1
                    1716    ;
                    1717    ;*****************************************************************************
                    1718    ;****** The new command "ERASE" to fill a EEPROM with 0FFH *******************
                    1719    ;****** Boehling 3 ***********************************************************
                    1720    ;
0500 7F40           1721    CERASE: mov     R7,#40H                 ;Erase 16K byte
0502 7E00           1722            mov     R6,#00H
0504 7A7F           1723            mov     R2,#HIGH ROMADR-1       ;Startaddress EEPROM
0506 78FF           1724            mov     R0,#LOW ROMADR-1
0508 900128         1725            mov     DPTR,#PROGS             ;Point to EEPROM timeing
050B B182           1726            acall   LD_T                    ;Load the timer
                    1727            ;
050D 121576         1728    ERA1:   lcall   INC3210                 ;Bump pointers
0510 74FF           1729            mov     A,#0FFH                 ;Fill the EEPROM with 0FFH
0512 91D9           1730            acall   PG7                     ;Write the byte
0514 70BA           1731            jnz     PG6                     ;Exit if error
0516 DEF5           1732            DJNZ    R6,ERA1
0518 DFF3           1733            DJNZ    R7,ERA1                 ;Do the loop
051A A140           1734            ajmp    C_K                     ;Exit to command mode
                    1735    ;
                    1736    ;*****************************************************************************
                    1737    ;
                    1738    ;****** continue with original code: *****************************************
                    1739            ;
                    1740            ;*************************************************************
                    1741            ;
051C                1742    CCAL:   ; Set up for prom moves
                    1743            ; R3:R1 gets source
                    1744            ; R7:R6 gets # of bytes
                    1745            ;
                    1746            ;*************************************************************
                    1747            ;
051C B18A           1748            ACALL   GETEND          ;GET THE LAST LOCATION
051E A3             1749            INC     DPTR            ;BUMP TO LOAD EOF
051F AB13           1750            MOV     R3,BOFAH
0521 A914           1751            MOV     R1,BOFAL        ;RESTORE START
0523 C3             1752            CLR     C               ;PREPARE FOR SUBB
0524 E582           1753            MOV     A,DPL           ;SUB DPTR - BOFA > R7:R6
0526 99             1754            SUBB    A,R1
0527 FE             1755            MOV     R6,A
0528 E583           1756            MOV     A,DPH
052A 9B             1757            SUBB    A,R3
052B FF             1758            MOV     R7,A
052C 22             1759    CCAL1:  RET
                    1760            ;
                    1761            ;**************************************************************
BASIC52E                                                                                                      PAGE 32

                    1762            ;
052D                1763    TIMER_LOAD:; Load the timer
                    1764            ;
                    1765            ;*************************************************************
                    1766            ;
052D B12C           1767            ACALL   CCAL1           ;DELAY FOUR CLOCKS
052F                1768    TIMER_LOAD1:
052F C28E           1769            CLR     TR1             ;STOP IT WHILE IT'S LOADED
0531 85408D         1770            MOV     TH1,T_HH
0534 85418B         1771            MOV     TL1,T_LL
0537 C28F           1772            CLR     TF1             ;CLEAR THE OVERFLOW FLAG
0539 D28E           1773            SETB    TR1             ;START IT NOW
053B 22             1774            RET
                    1775            ;
                    1776            ;***************************************************************
                    1777            ;
053C                1778    CROM:   ; The command action routine - ROM - Run out of rom
                    1779            ;
                    1780            ;***************************************************************
                    1781            ;
053C C217           1782            CLR     CONB            ;CAN'T CONTINUE IF MODE CHANGE
053E B143           1783            ACALL   RO1             ;DO IT
                    1784            ;
0540 021092         1785    C_K:    LJMP    CL3             ;EXIT
                    1786            ;
                    1787    ;RO1:    CALL    INTGER         ;SEE IF INTGER PRESENT
                    1788    ;        MOV     R4,R0B0        ;SAVE THE NUMBER
                    1789    ;        JNC     $+4
                    1790    ;        MOV     R4,#01H        ;ONE IF NO INTEGER PRESENT
                    1791    ;       ACALL   ROMFD           ;FIND THE PROGRAM
                    1792    ;
0543 120EE1         1793    RO1:    CALL    DELTST
0546 7C01           1794            MOV     R4,#1
0548 5004           1795            JNC     RO11
054A 120E8E         1796            CALL    ONE
054D FC             1797            MOV     R4,A
                    1798    ;
054E B15B           1799    RO11:   ACALL   ROMFD
0550 BC0011         1800            CJNE    R4,#0,RFX       ;EXIT IF R4 <> 0
0553 A3             1801            INC     DPTR            ;BUMP PAST TAG
0554 858313         1802            MOV     BOFAH,DPH       ;SAVE THE ADDRESS
0557 858214         1803            MOV     BOFAL,DPL
055A 22             1804            RET
                    1805            ;
055B 908010         1806    ROMFD:  MOV     DPTR,#ROMADR+16 ;START OF USER PROGRAM
                    1807            ;
055E E0             1808    RF1:    MOVX    A,@DPTR         ;GET THE BYTE
055F B45509         1809            CJNE    A,#55H,RF3      ;SEE IF PROPER TAG
0562 DC01           1810            DJNZ    R4,RF2          ;BUMP COUNTER
                    1811            ;
0564 22             1812    RFX:    RET                     ;DPTR HAS THE START ADDRESS
                    1813            ;
0565 A3             1814    RF2:    INC     DPTR            ;BUMP PAST TAG
0566 B1AC           1815            ACALL   G5
0568 A3             1816            INC     DPTR            ;BUMP TO NEXT PROGRAM
0569 80F3           1817            SJMP    RF1             ;DO IT AGAIN
                    1818            ;
056B 101DF6         1819    RF3:    JBC     INBIT,RFX       ;EXIT IF SET
BASIC52E                                                                                                      PAGE 33

                    1820            ;
056E 901FC9         1821    NOGO:   MOV     DPTR,#NOROM
0571 81D6           1822            AJMP    ERRLK
                    1823            ;
                    1824            ;***************************************************************
                    1825            ;
0573                1826    L20DPI: ; load R2:R0 with the location the DPTR is pointing to
                    1827            ;
                    1828            ;***************************************************************
                    1829            ;
0573 E0             1830            MOVX    A,@DPTR
0574 FA             1831            MOV     R2,A
0575 A3             1832            INC     DPTR
0576 E0             1833            MOVX    A,@DPTR
0577 F8             1834            MOV     R0,A
0578 22             1835            RET                     ;DON'T BUMP DPTR
                    1836            ;
                    1837            ;***************************************************************
                    1838            ;
0579                1839    X31DP:  ; swap R3:R1 with DPTR
                    1840            ;
                    1841            ;***************************************************************
                    1842            ;
0579 CB             1843            XCH     A,R3
057A C583           1844            XCH     A,DPH
057C CB             1845            XCH     A,R3
057D C9             1846            XCH     A,R1
057E C582           1847            XCH     A,DPL
0580 C9             1848            XCH     A,R1
0581 22             1849            RET
                    1850            ;
                    1851            ;***************************************************************
                    1852            ;
0582                1853    LD_T:   ; Load the timer save location with the value the DPTR is
                    1854            ; pointing to.
                    1855            ;
                    1856            ;****************************************************************
                    1857            ;
0582 E0             1858            MOVX    A,@DPTR
0583 F540           1859            MOV     T_HH,A
0585 A3             1860            INC     DPTR
0586 E0             1861            MOVX    A,@DPTR
0587 F541           1862            MOV     T_LL,A
0589 22             1863            RET
                    1864            ;
                    1865            ;
                    1866            ;***************************************************************
                    1867            ;
                    1868            ;GETLIN - FIND THE LOCATION OF THE LINE NUMBER IN R3:R1
                    1869            ;         IF ACC = 0 THE LINE WAS NOT FOUND I.E. R3:R1
                    1870            ;         WAS TOO BIG, ELSE ACC <> 0 AND THE DPTR POINTS
                    1871            ;         AT THE LINE THAT IS GREATER THAN OR EQUAL TO THE
                    1872            ;         VALUE IN R3:R1.
                    1873            ;
                    1874            ;***************************************************************
                    1875            ;
058A D229           1876    GETEND: SETB    ENDBIT          ;GET THE END OF THE PROGRAM
                    1877            ;
BASIC52E                                                                                                      PAGE 34

058C 120E9B         1878    GETLIN: CALL    DP_B            ;GET BEGINNING ADDRESS
                    1879            ;
058F 120AA4         1880    G1:     CALL    B_C
0592 6012           1881            JZ      G3              ;EXIT WITH A ZERO IN A IF AT END
0594 A3             1882            INC     DPTR            ;POINT AT THE LINE NUMBER
0595 20290A         1883            JB      ENDBIT,G2       ;SEE IF WE WANT TO FIND THE END
0598 B1CC           1884            ACALL   DCMPX           ;SEE IF (DPTR) = R3:R1
059A B1C2           1885            ACALL   DECDP           ;POINT AT LINE COUNT
059C E0             1886            MOVX    A,@DPTR         ;PUT LINE LENGTH INTO ACC
059D 202A06         1887            JB      UBIT,G3         ;EXIT IF EQUAL
05A0 4004           1888            JC      G3              ;SEE IF LESS THAN OR ZERO
                    1889            ;
05A2 B1DE           1890    G2:     ACALL   ADDPTR          ;ADD IT TO DPTR
05A4 80E9           1891            SJMP    G1              ;LOOP
                    1892            ;
05A6 C229           1893    G3:     CLR     ENDBIT          ;RESET ENDBIT
05A8 22             1894            RET                     ;EXIT
                    1895            ;
05A9 900200         1896    G4:     MOV     DPTR,#PSTART    ;DO RAM
                    1897            ;
05AC D229           1898    G5:     SETB    ENDBIT
05AE 80DF           1899            SJMP    G1              ;NOW DO TEST
                    1900            ;
                    1901            ;***************************************************************
                    1902            ;
                    1903            ; LDPTRI - Load the DATA POINTER with the value it is pointing
                    1904            ;          to - DPH = (DPTR) , DPL = (DPTR+1)
                    1905            ;
                    1906            ; acc gets wasted
                    1907            ;
                    1908            ;***************************************************************
                    1909            ;
05B0 E0             1910    LDPTRI: MOVX    A,@DPTR         ;GET THE HIGH BYTE
05B1 C0E0           1911            PUSH    ACC             ;SAVE IT
05B3 A3             1912            INC     DPTR            ;BUMP THE POINTER
05B4 E0             1913            MOVX    A,@DPTR         ;GET THE LOW BYTE
05B5 F582           1914            MOV     DPL,A           ;PUT IT IN DPL
05B7 D083           1915            POP     DPH             ;GET THE HIGH BYTE
05B9 22             1916            RET                     ;GO BACK
                    1917            ;
                    1918            ;***************************************************************
                    1919            ;
                    1920            ;L31DPI - LOAD R3 WITH (DPTR) AND R1 WITH (DPTR+1)
                    1921            ;
                    1922            ;ACC GETS CLOBBERED
                    1923            ;
                    1924            ;***************************************************************
                    1925            ;
05BA E0             1926    L31DPI: MOVX    A,@DPTR         ;GET THE HIGH BYTE
05BB FB             1927            MOV     R3,A            ;PUT IT IN THE REG
05BC A3             1928            INC     DPTR            ;BUMP THE POINTER
05BD E0             1929            MOVX    A,@DPTR         ;GET THE NEXT BYTE
05BE F9             1930            MOV     R1,A            ;SAVE IT
05BF 22             1931            RET
                    1932            ;
                    1933            ;***************************************************************
                    1934            ;
                    1935            ;DECDP - DECREMENT THE DATA POINTER - USED TO SAVE SPACE
BASIC52E                                                                                                      PAGE 35

                    1936            ;
                    1937            ;***************************************************************
                    1938            ;
05C0 B1C2           1939    DECDP2: ACALL   DECDP
                    1940            ;
05C2 C582           1941    DECDP:  XCH     A,DPL           ;GET DPL
05C4 7002           1942            JNZ     DECDP1          ;BUMP IF ZERO
05C6 1583           1943            DEC     DPH
05C8 14             1944    DECDP1: DEC     A               ;DECREMENT IT
05C9 C582           1945            XCH     A,DPL           ;GET A BACK
05CB 22             1946            RET                     ;EXIT
                    1947            ;
                    1948            ;***************************************************************
                    1949            ;
                    1950            ;DCMPX - DOUBLE COMPARE - COMPARE (DPTR) TO R3:R1
                    1951            ;R3:R1 - (DPTR) = SET CARRY FLAG
                    1952            ;
                    1953            ;IF R3:R1 > (DPTR) THEN C = 0
                    1954            ;IF R3:R1 < (DPTR) THEN C = 1
                    1955            ;IF R3:R1 = (DPTR) THEN C = 0
                    1956            ;
                    1957            ;***************************************************************
                    1958            ;
05CC C22A           1959    DCMPX:  CLR     UBIT            ;ASSUME NOT EQUAL
05CE E0             1960            MOVX    A,@DPTR         ;GET THE BYTE
05CF B5030A         1961            CJNE    A,R3B0,D1       ;IF A IS GREATER THAN R3 THEN NO CARRY
                    1962                                    ;WHICH IS R3<@DPTR = NO CARRY AND
                    1963                                    ;R3>@DPTR CARRY IS SET
05D2 A3             1964            INC     DPTR            ;BUMP THE DATA POINTER
05D3 E0             1965            MOVX    A,@DPTR         ;GET THE BYTE
05D4 B1C2           1966            ACALL   DECDP           ;PUT DPTR BACK
05D6 B50103         1967            CJNE    A,R1B0,D1       ;DO THE COMPARE
05D9 B3             1968            CPL     C               ;FLIP CARRY
                    1969            ;
05DA B22A           1970            CPL     UBIT            ;SET IT
05DC B3             1971    D1:     CPL     C               ;GET THE CARRY RIGHT
05DD 22             1972            RET                     ;EXIT
                    1973            ;
                    1974            ;***************************************************************
                    1975            ;
                    1976            ; ADDPTR - Add acc to the dptr
                    1977            ;
                    1978            ; acc gets wasted
                    1979            ;
                    1980            ;***************************************************************
                    1981            ;
05DE 2582           1982    ADDPTR: ADD     A,DPL           ;ADD THE ACC TO DPL
05E0 F582           1983            MOV     DPL,A           ;PUT IT IN DPL
05E2 5002           1984            JNC     ADDPTR1         ;JUMP IF NO CARRY
05E4 0583           1985            INC     DPH             ;BUMP DPH
05E6 22             1986    ADDPTR1:RET                     ;EXIT
                    1987            ;
                    1988            ;*************************************************************
                    1989            ;
05E7                1990    LCLR:   ; Set up the storage allocation
                    1991            ;
                    1992            ;*************************************************************
                    1993            ;
BASIC52E                                                                                                      PAGE 36

05E7 D19A           1994            ACALL   ICLR            ;CLEAR THE INTERRUPTS
05E9 B1A9           1995            ACALL   G4              ;PUT END ADDRESS INTO DPTR
05EB 7406           1996            MOV     A,#6            ;ADJUST MATRIX SPACE
05ED B1DE           1997            ACALL   ADDPTR          ;ADD FOR PROPER BOUNDS
05EF B179           1998            ACALL   X31DP           ;PUT MATRIX BOUNDS IN R3:R1
05F1 900108         1999            MOV     DPTR,#MT_ALL    ;SAVE R3:R1 IN MATRIX FREE SPACE
05F4 D105           2000            ACALL   S31DP           ;DPTR POINTS TO MEMTOP
05F6 B1BA           2001            ACALL   L31DPI          ;LOAD MEMTOP INTO R3:R1
05F8 900122         2002            MOV     DPTR,#STR_AL    ;GET MEMORY ALLOCATED FOR STRINGS
05FB B1B0           2003            ACALL   LDPTRI
05FD 120A02         2004            CALL    DUBSUB          ;R3:R1 = MEMTOP - STRING ALLOCATION
0600 900104         2005            MOV     DPTR,#VARTOP    ;SAVE R3:R1 IN VARTOP
                    2006            ;
                    2007            ; FALL THRU TO S31DP2
                    2008            ;
                    2009            ;***************************************************************
                    2010            ;
                    2011            ;S31DP - STORE R3 INTO (DPTR) AND R1 INTO (DPTR+1)
                    2012            ;
                    2013            ;ACC GETS CLOBBERED
                    2014            ;
                    2015            ;***************************************************************
                    2016            ;
0603 D105           2017    S31DP2: ACALL   S31DP           ;DO IT TWICE
                    2018            ;
0605 EB             2019    S31DP:  MOV     A,R3            ;GET R3 INTO ACC
0606 F0             2020            MOVX    @DPTR,A         ;STORE IT
0607 A3             2021            INC     DPTR            ;BUMP DPTR
0608 E9             2022            MOV     A,R1            ;GET R1
0609 F0             2023            MOVX    @DPTR,A         ;STORE IT
060A A3             2024            INC     DPTR            ;BUMP IT AGAIN TO SAVE PROGRAM SPACE
060B 22             2025            RET                     ;GO BACK
                    2026            ;
                    2027            ;
                    2028            ;***************************************************************
                    2029            ;
060C                2030    STRING: ; Allocate memory for strings
                    2031            ;
                    2032            ;***************************************************************
                    2033            ;
060C 120E85         2034            LCALL   TWO             ;R3:R1 = NUMBER, R2:R0 = LEN
060F 900122         2035            MOV     DPTR,#STR_AL    ;SAVE STRING ALLOCATION
0612 D105           2036            ACALL   S31DP
0614 0E             2037            INC     R6              ;BUMP
0615 8E3F           2038            MOV     S_LEN,R6        ;SAVE STRING LENGTH
0617 C164           2039            AJMP    RCLEAR          ;CLEAR AND SET IT UP
                    2040            ;
                    2041            ;***************************************************************
                    2042            ;
                    2043            ; F_VAR - Find  the variable in symbol table
                    2044            ;         R7:R6 contain the variable name
                    2045            ;         If not found create a zero entry and set the carry
                    2046            ;         R2:R0 has the address of variable on return
                    2047            ;
                    2048            ;***************************************************************
                    2049            ;
0619 900104         2050    F_VAR:  MOV     DPTR,#VARTOP    ;PUT VARTOP IN DPTR
061C B1B0           2051            ACALL   LDPTRI
BASIC52E                                                                                                      PAGE 37

061E B1C0           2052            ACALL   DECDP2          ;ADJUST DPTR FOR LOOKUP
                    2053            ;
0620 E0             2054    F_VAR0: MOVX    A,@DPTR         ;LOAD THE VARIABLE
0621 6020           2055            JZ      F_VAR2          ;TEST IF AT THE END OF THE TABLE
0623 A3             2056            INC     DPTR            ;BUMP FOR NEXT BYTE
0624 B5070F         2057            CJNE    A,R7B0,F_VAR1   ;SEE IF MATCH
0627 E0             2058            MOVX    A,@DPTR         ;LOAD THE NAME
0628 B5060B         2059            CJNE    A,R6B0,F_VAR1
                    2060            ;
                    2061            ; Found the variable now adjust and put in R2:R0
                    2062            ;
062B E582           2063    DLD:    MOV     A,DPL           ;R2:R0 = DPTR-2
062D 9402           2064            SUBB    A,#2
062F F8             2065            MOV     R0,A
0630 E583           2066            MOV     A,DPH
0632 9400           2067            SUBB    A,#0            ;CARRY IS CLEARED
0634 FA             2068            MOV     R2,A
0635 22             2069            RET
                    2070            ;
0636 E582           2071    F_VAR1: MOV     A,DPL           ;SUBTRACT THE STACK SIZE+ADJUST
0638 C3             2072            CLR     C
0639 9409           2073            SUBB    A,#STESIZ
063B F582           2074            MOV     DPL,A           ;RESTORE DPL
063D 50E1           2075            JNC     F_VAR0
063F 1583           2076            DEC     DPH
0641 80DD           2077            SJMP    F_VAR0          ;CONTINUE COMPARE
                    2078            ;
                    2079            ;
                    2080            ; Add the entry to the symbol table
                    2081            ;
0643 120DEF         2082    F_VAR2: LCALL   R76S            ;SAVE R7 AND R6
0646 C3             2083            CLR     C
0647 D12B           2084            ACALL   DLD             ;BUMP THE POINTER TO GET ENTRY ADDRESS
                    2085            ;
                    2086            ; Adjust pointer and save storage allocation
                    2087            ; and make sure we aren't wiping anything out
                    2088            ; First calculate new storage allocation
                    2089            ;
0649 E8             2090            MOV     A,R0
064A 9406           2091            SUBB    A,#STESIZ-3     ;NEED THIS MUCH RAM
064C F9             2092            MOV     R1,A
064D EA             2093            MOV     A,R2
064E 9400           2094            SUBB    A,#0
0650 FB             2095            MOV     R3,A
                    2096            ;
                    2097            ; Now save the new storage allocation
                    2098            ;
0651 900106         2099            MOV     DPTR,#ST_ALL
0654 D105           2100            CALL    S31DP           ;SAVE STORAGE ALLOCATION
                    2101            ;
                    2102            ; Now make sure we didn't blow it, by wiping out MT_ALL
                    2103            ;
0656 B1CC           2104            ACALL   DCMPX           ;COMPARE STORAGE ALLOCATION
0658 4032           2105            JC      CCLR3           ;ERROR IF CARRY
065A D3             2106            SETB    C               ;DID NOT FIND ENTRY
065B 22             2107            RET                     ;EXIT IF TEST IS OK
                    2108            ;
                    2109            ;***************************************************************
BASIC52E                                                                                                      PAGE 38

                    2110            ;
                    2111            ; Command action routine - NEW
                    2112            ;
                    2113            ;***************************************************************
                    2114            ;
065C 900200         2115    CNEW:   MOV     DPTR,#PSTART    ;SAVE THE START OF PROGRAM
065F 7401           2116            MOV     A,#EOF          ;END OF FILE
0661 F0             2117            MOVX    @DPTR,A         ;PUT IT IN MEMORY
                    2118            ;
                    2119            ; falls thru
                    2120            ;
                    2121            ;*****************************************************************
                    2122            ;
                    2123            ; The statement action routine - CLEAR
                    2124            ;
                    2125            ;*****************************************************************
                    2126            ;
0662 C215           2127    CNEW1:  CLR     LINEB           ;SET UP FOR RUN AND GOTO
                    2128            ;
0664 B1E7           2129    RCLEAR: ACALL   LCLR            ;CLEAR THE INTERRUPTS, SET UP MATRICES
0666 90010A         2130            MOV     DPTR,#MEMTOP    ;PUT MEMTOP IN R3:R1
0669 B1BA           2131            ACALL   L31DPI
066B B1A9           2132            ACALL   G4              ;DPTR GETS END ADDRESS
066D D17D           2133            ACALL   CL_1            ;CLEAR THE MEMORY
                    2134            ;
066F 9000FE         2135    RC1:    MOV     DPTR,#STACKTP   ;POINT AT CONTROL STACK TOP
0672 E4             2136            CLR     A               ;CONTROL UNDERFLOW
                    2137            ;
0673 F0             2138    RC2:    MOVX    @DPTR,A         ;SAVE IN MEMORY
0674 7511FE         2139            MOV     CSTKA,#STACKTP
0677 7509FE         2140            MOV     ASTKA,#STACKTP
067A C217           2141            CLR     CONB            ;CAN'T CONTINUE
067C 22             2142            RET
                    2143            ;
                    2144            ;***************************************************************
                    2145            ;
                    2146            ; Loop until the memory is cleared
                    2147            ;
                    2148            ;***************************************************************
                    2149            ;
067D A3             2150    CL_1:   INC     DPTR            ;BUMP MEMORY POINTER
067E E4             2151            CLR     A               ;CLEAR THE MEMORY
067F F0             2152            MOVX    @DPTR,A         ;CLEAR THE RAM
0680 E0             2153            MOVX    A,@DPTR         ;READ IT
0681 7009           2154            JNZ     CCLR3           ;MAKE SURE IT IS CLEARED
0683 EB             2155            MOV     A,R3            ;GET POINTER FOR COMPARE
0684 B583F6         2156            CJNE    A,DPH,CL_1      ;SEE TO LOOP
0687 E9             2157            MOV     A,R1            ;NOW TEST LOW BYTE
0688 B582F2         2158            CJNE    A,DPL,CL_1
                    2159            ;
068B 22             2160    CL_2:   RET
                    2161            ;
068C 0215B5         2162    CCLR3:  JMP     TB              ;ALLOCATED MEMORY DOESN'T EXSIST
                    2163            ;
                    2164            ;**************************************************************
                    2165            ;
068F                2166    SCLR:   ;Entry point for clear return
                    2167            ;
BASIC52E                                                                                                      PAGE 39

                    2168            ;**************************************************************
                    2169            ;
068F 120EE1         2170            CALL    DELTST          ;TEST FOR A CR
0692 50D0           2171            JNC     RCLEAR
0694 120ED7         2172            CALL    GCI1            ;BUMP THE TEST POINTER
0697 B449D5         2173            CJNE    A,#'I',RC1      ;SEE IF I, ELSE RESET THE STACK
                    2174            ;
                    2175            ;**************************************************************
                    2176            ;
069A                2177    ICLR:   ; Clear interrupts and system garbage
                    2178            ;
                    2179            ;**************************************************************
                    2180            ;
069A 301202         2181            JNB     INTBIT,ICLR1    ;SEE IF BASIC HAS INTERRUPTS
069D C2AA           2182            CLR     EX1             ;IF SO, CLEAR INTERRUPTS
069F 532220         2183    ICLR1:  ANL     34,#00100000B   ;SET INTERRUPTS + CONTINUE
06A2 32             2184            RETI
                    2185            ;
                    2186            ;***************************************************************
                    2187            ;
                    2188            ;OUTPUT ROUTINES
                    2189            ;
                    2190            ;***************************************************************
                    2191            ;
06A3 D1A5           2192    CRLF2:  ACALL   CRLF            ;DO TWO CRLF'S
                    2193            ;
06A5 7D0D           2194    CRLF:   MOV     R5,#CR          ;LOAD THE CR
06A7 F111           2195            ACALL   TEROT           ;CALL TERMINAL OUT
06A9 7D0A           2196            MOV     R5,#LF          ;LOAD THE LF
06AB E111           2197            AJMP    TEROT           ;OUTPUT IT AND RETURN
                    2198            ;
                    2199            ;PRINT THE MESSAGE ADDRESSED IN ROM OR RAM BY THE DPTR
                    2200            ;ENDS WITH THE CHARACTER IN R4
                    2201            ;DPTR HAS THE ADDRESS OF THE TERMINATOR
                    2202            ;
06AD D1A5           2203    CRP:    ACALL   CRLF            ;DO A CR THEN PRINT ROM
                    2204            ;
06AF E4             2205    ROM_P:  CLR     A               ;CLEAR A FOR LOOKUP
06B0 93             2206            MOVC    A,@A+DPTR       ;GET THE CHARACTER
06B1 C2E7           2207            CLR     ACC.7           ;CLEAR MS BIT
06B3 B42201         2208            CJNE    A,#'"',ROM_P1   ;EXIT IF TERMINATOR
06B6 22             2209            RET
06B7 D234           2210    ROM_P1: SETB    C0ORX1
                    2211            ;
06B9 FD             2212    PN1:    MOV     R5,A            ;OUTPUT THE CHARACTER
06BA F111           2213            ACALL   TEROT
06BC A3             2214            INC     DPTR            ;BUMP THE POINTER
06BD 8004           2215            SJMP    PN0
                    2216            ;
06BF B179           2217    UPRNT:  ACALL   X31DP
                    2218            ;
06C1 7C0D           2219    PRNTCR: MOV     R4,#CR          ;OUTPUT UNTIL A CR
                    2220            ;
06C3 1034E9         2221    PN0:    JBC     C0ORX1,ROM_P
06C6 E0             2222            MOVX    A,@DPTR         ;GET THE RAM BYTE
06C7 6003           2223            JZ      PN01
06C9 B50401         2224            CJNE    A,R4B0,PN02     ;SEE IF THE SAME AS TERMINATOR
06CC 22             2225    PN01:   RET                     ;EXIT IF THE SAME
BASIC52E                                                                                                      PAGE 40

06CD B40DE9         2226    PN02:   CJNE    A,#CR,PN1       ;NEVER PRINT A CR IN THIS ROUTINE
06D0 021885         2227            LJMP    E1XX            ;BAD SYNTAX
                    2228            ;
                    2229            ;***************************************************************
                    2230            ;
                    2231            ; INLINE - Input a line to IBUF, exit when a CR is received
                    2232            ;
                    2233            ;***************************************************************
                    2234            ;
06D3 B40416         2235    INL2:   CJNE    A,#CNTRLD,INL2B ;SEE IF A CONTROL D
                    2236            ;
06D6 D1A5           2237    INL0:   ACALL   CRLF            ;DO A CR
                    2238            ;
06D8 75A000         2239    INLINE: MOV     P2,#HIGH IBUF   ;IBUF IS IN THE ZERO PAGE
06DB 7807           2240            MOV     R0,#LOW IBUF    ;POINT AT THE INPUT BUFFER
                    2241            ;
06DD F191           2242    INL1:   ACALL   INCHAR          ;GET A CHARACTER
06DF FD             2243            MOV     R5,A            ;SAVE IN R5 FOR OUTPUT
06E0 B47FF0         2244            CJNE    A,#7FH,INL2     ;SEE IF A DELETE CHARACTER
06E3 B80718         2245            CJNE    R0,#LOW IBUF,INL6
06E6 7D07           2246    INL11:  MOV     R5,#BELL        ;OUTPUT A BELL
                    2247            ;
06E8 F111           2248    INLX:   ACALL   TEROT           ;OUTPUT CHARACTER
06EA 80F1           2249            SJMP    INL1            ;DO IT AGAIN
                    2250            ;
06EC F2             2251    INL2B:  MOVX    @R0,A           ;SAVE THE CHARACTER
06ED B40D02         2252            CJNE    A,#CR,INL2B1    ;IS IT A CR
06F0 C1A5           2253            AJMP    CRLF            ;OUTPUT A CRLF AND EXIT
06F2 B42000         2254    INL2B1: CJNE    A,#20H,INL2B2
06F5 40F1           2255    INL2B2: JC      INLX            ;ONLY ECHO CONTROL CHARACTERS
06F7 08             2256            INC     R0              ;BUMP THE POINTER
06F8 B856ED         2257            CJNE    R0,#IBUF+79,INLX
06FB 18             2258            DEC     R0              ;FORCE 79
06FC 80E8           2259            SJMP    INL11           ;OUTPUT A BELL
                    2260            ;
06FE 18             2261    INL6:   DEC     R0              ;DEC THE RAM POINTER
06FF 7D08           2262            MOV     R5,#BS          ;OUTPUT A BACK SPACE
0701 F111           2263            ACALL   TEROT
0703 F10F           2264            ACALL   STEROT          ;OUTPUT A SPACE
0705 7D08           2265            MOV     R5,#BS          ;ANOTHER BACK SPACE
0707 80DF           2266            SJMP    INLX            ;OUTPUT IT
                    2267    ;
                    2268    ;*****************************************************************************
                    2269    ;****** Use XTAL up to 47 MHz ************************************************
                    2270    ;****** Wulf 2 ***************************************************************
                    2271    ;
                    2272    ;PTIME: DB      128-2           ;PROM PROGRAMMER TIMER
                    2273    ;       DB      00H
                    2274    ;       DB      00H
                    2275    ;       DB      50H
                    2276    ;       DB      67H
                    2277    ;       DB      41H
                    2278    ;
0709 7D             2279    ptime:  db      128-3           ;New programmer timer value is old value
070A 00             2280            db      00H             ;divide by 5
070B 00             2281            db      00H             ;(50ms EPROM timeing to 10ms for EEPROM)
070C 00             2282            db      00H
070D 35             2283            db      35H
BASIC52E                                                                                                      PAGE 41

070E 83             2284            db      83H
                    2285    ;
                    2286    ;*****************************************************************************
                    2287    ;
                    2288            ;***************************************************************
                    2289            ;
                    2290            ; TEROT - Output a character to the system console
                    2291            ;         update PHEAD position.
                    2292            ;
                    2293            ;***************************************************************
                    2294            ;
070F 7D20           2295    STEROT: MOV     R5,#' '         ;OUTPUT A SPACE
                    2296            ;
0711 C0E0           2297    TEROT:  PUSH    ACC             ;SAVE THE ACCUMULATOR
0713 C083           2298            PUSH    DPH             ;SAVE THE DPTR
0715 C082           2299            PUSH    DPL
0717 303504         2300    TEROT01:JNB     CNT_S,TEROT02   ;WAIT FOR A CONTROL Q
071A F18D           2301            ACALL   BCK             ;GET SERIAL STATUS
071C 80F9           2302            SJMP    TEROT01
071E ED             2303    TEROT02:MOV     A,R5            ;PUT OUTPUT BYTE IN A
071F 302C05         2304            JNB     BO,TEROT03      ;CHECK FOR MONITOR
0722 122040         2305            LCALL   2040H           ;DO THE MONITOR
0725 E166           2306            AJMP    TEROT1          ;CLEAN UP
0727 301C05         2307    TEROT03:JNB     COUB,TEROT04    ;SEE IF USER WANTS OUTPUT
072A 124030         2308            LCALL   4030H
072D E166           2309            AJMP    TEROT1
072F 302708         2310    TEROT04:JNB     UPB,T_1         ;NO AT IF NO XBIT
0732 301905         2311            JNB     LPB,T_1         ;AT PRINT
0735 12403C         2312            LCALL   403CH           ;CALL AT LOCATION
0738 E166           2313            AJMP    TEROT1          ;FINISH OFF OUTPUT
                    2314            ;
073A 301B22         2315    T_1:    JNB     COB,TXX         ;SEE IF LIST SET
073D 900124         2316            MOV     DPTR,#SPV       ;LOAD BAUD RATE
0740 B182           2317            ACALL   LD_T
0742 C297           2318            CLR     LP              ;OUTPUT START BIT
0744 B12D           2319            ACALL   TIMER_LOAD      ;LOAD AND START THE TIMER
0746 ED             2320            MOV     A,R5            ;GET THE OUTPUT BYTE
0747 D3             2321            SETB    C               ;SET CARRY FOR LAST OUTPUT
0748 7D09           2322            MOV     R5,#9           ;LOAD TIMER COUNTDOWN
                    2323            ;
074A 13             2324    LTOUT1: RRC     A               ;ROTATE A
074B 308FFD         2325            JNB     TF1,$           ;WAIT TILL TIMER READY
074E 9297           2326            MOV     LP,C            ;OUTPUT THE BIT
0750 B12D           2327            ACALL   TIMER_LOAD      ;DO THE NEXT BIT
0752 DDF6           2328            DJNZ    R5,LTOUT1       ;LOOP UNTIL DONE
0754 308FFD         2329            JNB     TF1,$           ;FIRST STOP BIT
0757 B12D           2330            ACALL   TIMER_LOAD
0759 308FFD         2331            JNB     TF1,$           ;SECOND STOP BIT
075C FD             2332            MOV     R5,A            ;RESTORE R5
075D 8007           2333            SJMP    TEROT1          ;BACK TO TEROT
                    2334            ;
                    2335    ;       === CH552E Update ===
                    2336    ;TXX:   JNB     TI,$            ;WAIT FOR TRANSMIT READY
                    2337    ;       CLR     TI
                    2338    ;       MOV     SBUF,R5         ;SEND OUT THE CHARACTER
075F 30C1FD         2339    TXX:    JNB     U1TI,$          ;WAIT FOR TRANSMIT READY
0762 C2C1           2340            CLR     U1TI
0764 8DC1           2341            MOV     SBUF1,R5        ;SEND OUT THE CHARACTER
BASIC52E                                                                                                      PAGE 42

                    2342    ;       === CH552E end ===
                    2343            ;
0766 BD0D03         2344    TEROT1: CJNE    R5,#CR,TEROT11  ;SEE IF A CR
0769 751600         2345            MOV     PHEAD,#00H      ;IF A CR, RESET PHEAD AND
                    2346            ;
076C BD0A0B         2347    TEROT11:CJNE    R5,#LF,NLC      ;SEE IF A LF
076F E515           2348            MOV     A,NULLCT        ;GET THE NULL COUNT
0771 6007           2349            JZ      NLC             ;NO NULLS IF ZERO
                    2350            ;
0773 7D00           2351    TEROT2: MOV     R5,#NULL        ;PUT THE NULL IN THE OUTPUT REGISTER
0775 F111           2352            ACALL   TEROT           ;OUTPUT THE NULL
0777 14             2353            DEC     A               ;DECREMENT NULL COUNT
0778 70F9           2354            JNZ     TEROT2          ;LOOP UNTIL DONE
                    2355            ;
077A BD0802         2356    NLC:    CJNE    R5,#BS,NLC1     ;DEC PHEAD IF A BACKSPACE
077D 1516           2357            DEC     PHEAD
077F BD2000         2358    NLC1:   CJNE    R5,#20H,NLC2    ;IS IT A PRINTABLE CHARACTER?
0782 4002           2359    NLC2:   JC      NLC3            ;DON'T INCREMENT PHEAD IF NOT PRINTABLE
0784 0516           2360            INC     PHEAD           ;BUMP PRINT HEAD
0786 D082           2361    NLC3:   POP     DPL             ;RESTORE DPTR
0788 D083           2362            POP     DPH
078A D0E0           2363            POP     ACC             ;RESTORE ACC
078C 22             2364            RET                     ;EXIT
                    2365            ;
078D F1C8           2366    BCK:    ACALL   CSTS            ;CHECK STATUS
078F 502E           2367            JNC     CI_RET1         ;EXIT IF NO CHARACTER
                    2368            ;
                    2369            ;***************************************************************
                    2370            ;
                    2371            ;INPUTS A CHARACTER FROM THE SYSTEM CONSOLE.
                    2372            ;
                    2373            ;***************************************************************
                    2374            ;
0791 303205         2375    INCHAR: JNB     BI,INCHAR1      ;CHECK FOR MONITOR (BUBBLE)
0794 122060         2376            LCALL   2060H
0797 8011           2377            SJMP    INCH1
0799 301E05         2378    INCHAR1:JNB     CIUB,INCHAR2    ;CHECK FOR USER
079C 124033         2379            LCALL   4033H
079F 8009           2380            SJMP    INCH1
                    2381    ;       === CH552E Update ===
                    2382    ;INCHAR2:JNB    RI,$            ;WAIT FOR RECEIVER READY.
                    2383    ;       MOV     A,SBUF
                    2384    ;       CLR     RI              ;RESET READY
07A1 30C0FD         2385    INCHAR2:JNB     U1RI,$          ;WAIT FOR RECEIVER READY.
07A4 E5C1           2386            MOV     A,SBUF1
07A6 C2C0           2387            CLR     U1RI            ;RESET READY
                    2388    ;       === CH552E end ===
07A8 C2E7           2389            CLR     ACC.7           ;NO BIT 7
                    2390            ;
07AA B41302         2391    INCH1:  CJNE    A,#13H,INCH11
07AD D235           2392            SETB    CNT_S
07AF B41102         2393    INCH11: CJNE    A,#11H,INCH12
07B2 C235           2394            CLR     CNT_S
07B4 B40304         2395    INCH12: CJNE    A,#CNTRLC,INCH13
07B7 30301D         2396            JNB     NO_C,C_EX       ;TRAP NO CONTROL C
07BA 22             2397            RET
                    2398            ;
                    2399    ;
BASIC52E                                                                                                      PAGE 43

                    2400    ;*****************************************************************************
                    2401    ;****** Sorry - but the ego message had to be disabled ***********************
                    2402    ;
07BB                2403    INCH13:
                    2404    ;       CLR     JKBIT
07BB B41700         2405            CJNE    A,#17H,CI_RET   ;CONTROL W
                    2406    ;       SETB    JKBIT
                    2407    ;
                    2408    ;*****************************************************************************
                    2409            ;
07BE D3             2410    CI_RET: SETB    C               ;CARRY SET IF A CHARACTER
07BF 22             2411    CI_RET1:RET                     ;EXIT
                    2412            ;
                    2413            ;*************************************************************
                    2414            ;
                    2415            ;RROM - The Statement Action Routine RROM
                    2416            ;
                    2417            ;*************************************************************
                    2418            ;
07C0 D21D           2419    RROM:   SETB    INBIT           ;SO NO ERRORS
07C2 B143           2420            ACALL   RO1             ;FIND THE LINE NUMBER
07C4 101D3B         2421            JBC     INBIT,CRUN
07C7 22             2422            RET                     ;EXIT
                    2423            ;
                    2424            ;***************************************************************
                    2425            ;
07C8                2426    CSTS:   ;       RETURNS CARRY = 1 IF THERE IS A CHARACTER WAITING FROM
                    2427            ;       THE SYSTEM CONSOLE. IF NO CHARACTER THE READY CHARACTER
                    2428            ;       WILL BE CLEARED
                    2429            ;
                    2430            ;***************************************************************
                    2431            ;
07C8 303203         2432            JNB     BI,CSTS1        ;BUBBLE STATUS
07CB 022068         2433            LJMP    2068H
07CE 301E03         2434    CSTS1:  JNB     CIUB,CSTS2      ;SEE IF EXTERNAL CONSOLE
07D1 024036         2435            LJMP    4036H
                    2436    ;       === CH552E Update ===
                    2437    ;CSTS2: MOV     C,RI
07D4 A2C0           2438    CSTS2:  MOV     C,U1RI
                    2439    ;       === CH552E end ===
07D6 22             2440            RET
                    2441            ;
                    2442    ;
                    2443    ;*****************************************************************************
                    2444    ;****** Sorry - but the ego message had to be disabled ***********************
                    2445    ;
                    2446    ;C_EX0:  MOV     DPTR,#WB        ;EGO MESSAGE
                    2447    ;        ACALL   ROM_P
                    2448    ;
                    2449    ;*****************************************************************************
                    2450            ;
07D7 C235           2451    C_EX:   CLR     CNT_S           ;NO OUTPUT STOP
07D9 120C31         2452            LCALL   SPRINT1         ;ASSURE CONSOLE
07DC D1A5           2453            ACALL   CRLF
                    2454    ;
                    2455    ;*****************************************************************************
                    2456    ;****** Sorry - but the ego message had to be disabled ***********************
                    2457    ;
BASIC52E                                                                                                      PAGE 44

                    2458    ;        JBC     JKBIT,C_EX0
                    2459    ;
                    2460    ;*****************************************************************************
                    2461    ;
07DE 302F7F         2462            JNB     DIRF,SSTOP0
07E1 A140           2463            AJMP    C_K             ;CLEAR COB AND EXIT
                    2464            ;
07E3 E548           2465    T_CMP:  MOV     A,TVH           ;COMPARE TIMER TO SP_H AND SP_L
07E5 A949           2466            MOV     R1,TVL
07E7 B548F9         2467            CJNE    A,TVH,T_CMP
07EA C9             2468            XCH     A,R1
07EB 954C           2469            SUBB    A,SP_L
07ED E9             2470            MOV     A,R1
07EE 954B           2471            SUBB    A,SP_H
07F0 22             2472            RET
                    2473            ;
                    2474            ;*************************************************************
                    2475            ;
07F1                2476    BR0:    ; Trap the timer interrupt
                    2477            ;
                    2478            ;*************************************************************
                    2479            ;
07F1 F1E3           2480            CALL    T_CMP           ;COMPARE TIMER
07F3 4040           2481            JC      BCHR1           ;EXIT IF TEST FAILS
07F5 D214           2482            SETB    OTI             ;DOING THE TIMER INTERRUPT
07F7 C210           2483            CLR     OTS             ;CLEAR TIMER BIT
07F9 A211           2484            MOV     C,INPROG        ;SAVE IN PROGRESS
07FB 922B           2485            MOV     ISAV,C
07FD 900126         2486            MOV     DPTR,#TIV
0800 803C           2487            SJMP    BR2
                    2488            ;
                    2489            ;***************************************************************
                    2490            ;
                    2491            ; The command action routine - RUN
                    2492            ;
                    2493            ;***************************************************************
                    2494            ;
0802 120662         2495    CRUN:   LCALL   CNEW1           ;CLEAR THE STORAGE ARRAYS
0805 71D0           2496            ACALL   SRESTR1         ;GET THE STARTING ADDRESS
0807 51A4           2497            ACALL   B_C
0809 604A           2498            JZ      CMNDLK          ;IF NULL GO TO COMMAND MODE
                    2499            ;
080B D1B8           2500            ACALL   T_DP
080D F123           2501            ACALL   B_TXA           ;BUMP TO STARTING LINE
                    2502            ;
080F 913C           2503    CILOOP: ACALL   SP0             ;DO A CR AND A LF
0811 C22F           2504    CILOOP1:CLR     DIRF            ;NOT IN DIRECT MODE
                    2505            ;
                    2506            ;INTERPERTER DRIVER
                    2507            ;
0813 853E81         2508    ILOOP:  MOV     SP,SPSAV        ;RESTORE THE STACK EACH TIME
0816 202F06         2509            JB      DIRF,ILOOP1     ;NO INTERRUPTS IF IN DIRECT MODE
0819 850A42         2510            MOV     INTXAH,TXAH     ;SAVE THE TEXT POINTER
081C 850843         2511            MOV     INTXAL,TXAL
081F 12078D         2512    ILOOP1: LCALL   BCK             ;GET CONSOLE STATUS
0822 202F24         2513            JB      DIRF,I_L        ;DIRECT MODE
0825 B018           2514            ANL     C,/GTRD         ;SEE IF CHARACTER READY
0827 5006           2515            JNC     BCHR            ;NO CHARACTER = NO CARRY
BASIC52E                                                                                                      PAGE 45

                    2516            ;
                    2517            ; DO TRAP OPERATION
                    2518            ;
0829 900100         2519            MOV     DPTR,#GTB       ;SAVE TRAP CHARACTER
082C F0             2520            MOVX    @DPTR,A
082D D218           2521            SETB    GTRD            ;SAYS READ A BYTE
                    2522            ;
082F 201417         2523    BCHR:   JB      OTI,I_L         ;EXIT IF TIMER INTERRUPT IN PROGRESS
0832 2010BC         2524            JB      OTS,BR0         ;TEST TIMER VALUE IF SET
0835 301611         2525    BCHR1:  JNB     INTPEN,I_L      ;SEE IF INTERRUPT PENDING
0838 20110E         2526            JB      INPROG,I_L      ;DON'T DO IT AGAIN IF IN PROGRESS
083B 900120         2527            MOV     DPTR,#INTLOC    ;POINT AT INTERRUPT LOCATION
                    2528            ;
083E 7C02           2529    BR2:    MOV     R4,#GTYPE       ;SETUP FOR A FORCED GOSUB
0840 7135           2530            ACALL   SGS1            ;PUT TXA ON STACK
0842 D211           2531            SETB    INPROG          ;INTERRUPT IN PROGRESS
                    2532            ;
0844 120573         2533    ERL4:   CALL    L20DPI
0847 41F8           2534            AJMP    D_L1            ;GET THE LINE NUMBER
                    2535            ;
0849 11F8           2536    I_L:    ACALL   ISTAT           ;LOOP
084B F117           2537            ACALL   CLN_UP          ;FINISH IT OFF
084D 50C4           2538            JNC     ILOOP           ;LOOP ON THE DRIVER
084F 302F03         2539            JNB     DIRF,CMNDLK     ;CMND1 IF IN RUN MODE
0852 021794         2540            LJMP    CMNDR           ;DON'T PRINT READY
                    2541            ;
0855 021787         2542    CMNDLK: JMP     CMND1           ;DONE
                    2543            ;**************************************************************
                    2544            ;
                    2545            ; The Statement Action Routine - STOP
                    2546            ;
                    2547            ;**************************************************************
                    2548            ;
0858 F117           2549    SSTOP:  ACALL   CLN_UP          ;FINISH OFF THIS LINE
085A 850A42         2550            MOV     INTXAH,TXAH     ;SAVE TEXT POINTER FOR CONT
085D 850843         2551            MOV     INTXAL,TXAL
                    2552            ;
0860 D217           2553    SSTOP0: SETB    CONB            ;CONTINUE WILL WORK
0862 9000EE         2554            MOV     DPTR,#STP       ;PRINT THE STOP MESSAGE
0865 D220           2555            SETB    STOPBIT         ;SET FOR ERROR ROUTINE
0867 0218AD         2556            JMP     ERRS            ;JUMP TO ERROR ROUTINE
                    2557            ;
                    2558            ;**************************************************************
                    2559            ;
                    2560            ; ITRAP - Trap special function register operators
                    2561            ;
                    2562            ;**************************************************************
                    2563            ;
086A B4C805         2564    ITRAP:  CJNE    A,#TMR0,ITRAP1  ;TIMER 0
086D 8B8C           2565            MOV     TH0,R3
086F 898A           2566            MOV     TL0,R1
0871 22             2567            RET
                    2568            ;
0872 B4C905         2569    ITRAP1: CJNE    A,#TMR1,ITRAP2  ;TIMER 1
0875 8B8D           2570            MOV     TH1,R3
0877 898B           2571            MOV     TL1,R1
0879 22             2572            RET
                    2573            ;
BASIC52E                                                                                                      PAGE 46

087A B4CA05         2574    ITRAP2: CJNE    A,#TMR2,ITRAP3  ;TIMER 2
087D 8BCD           2575    ITRAP21:MOV     TH2,R3
087F 89CC           2576            MOV     TL2,R1
                    2577    ;       DB      8BH             ;MOV R3 DIRECT OP CODE
                    2578    ;       DB      0CDH            ;T2H LOCATION
                    2579    ;       DB      89H             ;MOV R1 DIRECT OP CODE
                    2580    ;       DB      0CCH            ;T2L LOCATION
0881 22             2581            RET
                    2582            ;
0882 B4CE05         2583    ITRAP3: CJNE    A,#TRC2,RCL1    ;RCAP2 TOKEN
0885 8BCB           2584    RCL:    MOV     RCAPH2,R3
0887 89CA           2585            MOV     RCAPL2,R1
                    2586    ;       DB      8BH             ;MOV R3 DIRECT OP CODE
                    2587    ;       DB      0CBH            ;RCAP2H LOCATION
                    2588    ;       DB      89H             ;MOV R1 DIRECT OP CODE
                    2589    ;       DB      0CAH            ;RCAP2L LOCATION
0889 22             2590            RET
                    2591            ;
088A 31D5           2592    RCL1:   ACALL   R3CK            ;MAKE SURE THAT R3 IS ZERO
088C B4CB03         2593            CJNE    A,#TT2C,RCL2
088F 89C8           2594            MOV     T2CON,R1
                    2595    ;       DB      89H             ;MOV R1 DIRECT OP CODE
                    2596    ;       DB      0C8H            ;T2CON LOCATION
0891 22             2597            RET
                    2598            ;
0892 B4C603         2599    RCL2:   CJNE    A,#T_IE,RCL3    ;IE TOKEN
0895 89A8           2600            MOV     IE,R1
0897 22             2601            RET
                    2602            ;
0898 B4C703         2603    RCL3:   CJNE    A,#T_IP,RCL4    ;IP TOKEN
089B 89B8           2604            MOV     IP,R1
089D 22             2605            RET
                    2606            ;
089E B4CC03         2607    RCL4:   CJNE    A,#TTC,RCL5     ;TCON TOKEN
08A1 8988           2608            MOV     TCON,R1
08A3 22             2609            RET
                    2610            ;
08A4 B4CD03         2611    RCL5:   CJNE    A,#TTM,RCL6     ;TMOD TOKEN
08A7 8989           2612            MOV     TMOD,R1
08A9 22             2613            RET
                    2614            ;
08AA B4CF32         2615    RCL6:   CJNE    A,#T_P1,T_T2    ;P1 TOKEN
08AD 8990           2616            MOV     P1,R1
08AF 22             2617            RET
                    2618            ;
                    2619            ;***************************************************************
                    2620            ;
                    2621            ; T_TRAP - Trap special operators
                    2622            ;
                    2623            ;***************************************************************
                    2624            ;
08B0 F50F           2625    T_T:    MOV     TEMP5,A         ;SAVE THE TOKEN
08B2 D1D7           2626            ACALL   GCI1            ;BUMP POINTER
08B4 31C8           2627            ACALL   SLET2           ;EVALUATE AFTER =
08B6 E50F           2628            MOV     A,TEMP5         ;GET THE TOKEN BACK
08B8 B4C303         2629            CJNE    A,#T_XTAL,T_T01
08BB 02165C         2630            LJMP    AXTAL1          ;SET UP CRYSTAL
                    2631            ;
BASIC52E                                                                                                      PAGE 47

08BE D190           2632    T_T01:  ACALL   IFIXL           ;R3:R1 HAS THE TOS
08C0 E50F           2633            MOV     A,TEMP5         ;GET THE TOKEN AGAIN
08C2 B4C409         2634            CJNE    A,#T_MTOP,T_T1  ;SEE IF MTOP TOKEN
08C5 90010A         2635            MOV     DPTR,#MEMTOP
08C8 120605         2636            CALL    S31DP
08CB 020664         2637            JMP     RCLEAR          ;CLEAR THE MEMORY
                    2638            ;
08CE B4C599         2639    T_T1:   CJNE    A,#T_TIME,ITRAP ;SEE IF A TIME TOKEN
08D1 A2AF           2640            MOV     C,EA            ;SAVE INTERRUPTS
08D3 C2AF           2641            CLR     EA              ;NO TIMER 0 INTERRUPTS DURING LOAD
08D5 8B48           2642            MOV     TVH,R3          ;SAVE THE TIME
08D7 8949           2643            MOV     TVL,R1
                    2644    ;
                    2645    ;*****************************************************************************
                    2646    ;****** Reset millisecond counter on "TIME=" *********************************
                    2647    ;****** Boehling 2 ***********************************************************
                    2648    ;
08D9 754700         2649            mov     MILLIV,#0       ;Reset millisecond counter
                    2650    ;
                    2651    ;*****************************************************************************
                    2652    ;
08DC 92AF           2653            MOV     EA,C            ;RESTORE INTERRUPTS
08DE 22             2654            RET                     ;EXIT
                    2655            ;
08DF B4D056         2656    T_T2:   CJNE    A,#T_PC,INTERX  ;PCON TOKEN
08E2 8987           2657            MOV     PCON,R1
                    2658    ;       DB      89H             ;MOV DIRECT, R1 OP CODE
                    2659    ;       DB      87H             ;ADDRESS OF PCON
08E4 22             2660            RET                     ;EXIT
                    2661            ;
08E5 B4D1C8         2662    T_TRAP: CJNE    A,#T_ASC,T_T    ;SEE IF ASC TOKEN
08E8 D1CB           2663            ACALL   IGC             ;EAT IT AND GET THE NEXT CHARACTER
08EA B4244B         2664            CJNE    A,#'$',INTERX   ;ERROR IF NOT A STRING
08ED 511E           2665            ACALL   CSY             ;CALCULATE ADDRESS
08EF B1AD           2666            ACALL   X3120
08F1 1214B4         2667            CALL    TWO_EY
08F4 31DD           2668            ACALL   SPEOP1          ;EVALUATE AFTER EQUALS
08F6 2121           2669            AJMP    ISTAX1          ;SAVE THE CHARACTER
                    2670            ;
                    2671            ;**************************************************************
                    2672            ;
                    2673            ;INTERPERT THE STATEMENT POINTED TO BY TXAL AND TXAH
                    2674            ;
                    2675            ;**************************************************************
                    2676            ;
08F8 D1CD           2677    ISTAT:  ACALL   GC              ;GET THR FIRST CHARACTER
08FA 302D0E         2678            JNB     XBIT,IAT        ;TRAP TO EXTERNAL RUN PACKAGE
08FD B42000         2679            CJNE    A,#20H,ISTAT1
0900 5009           2680    ISTAT1: JNC     IAT
0902 122070         2681            LCALL   2070H           ;LET THE USER SET UP THE DPTR
0905 D1D7           2682            ACALL   GCI1
0907 540F           2683            ANL     A,#0FH          ;STRIP OFF BIAS
0909 8051           2684            SJMP    ISTA1
                    2685            ;
090B B4C300         2686    IAT:    CJNE    A,#T_XTAL,IAT1
090E 50D5           2687    IAT1:   JNC     T_TRAP
0910 30E75B         2688            JNB     ACC.7,SLET      ;IMPLIED LET IF BIT 7 NOT SET
0913 B4BC06         2689            CJNE    A,#T_UOP+12,ISTAX       ;DBYTE TOKEN
BASIC52E                                                                                                      PAGE 48

0916 31D9           2690            ACALL   SPEOP           ;EVALUATE SPECIAL OPERATOR
0918 31D5           2691            ACALL   R3CK            ;CHECK LOCATION
091A F7             2692            MOV     @R1,A           ;SAVE IT
091B 22             2693            RET
                    2694            ;
091C B4BD06         2695    ISTAX:  CJNE    A,#T_UOP+13,ISTAY       ;XBYTE TOKEN
091F 31D9           2696            ACALL   SPEOP
                    2697            ;
0921 8BA0           2698    ISTAX1: MOV     P2,R3
0923 F3             2699            MOVX    @R1,A
0924 22             2700            RET
                    2701            ;
0925 B4AB00         2702    ISTAY:  CJNE    A,#T_CR+1,ISTAY1;TRAP NEW OPERATORS
0928 4009           2703    ISTAY1: JC      I_S
092A B4B000         2704            CJNE    A,#0B0H,ISTAY2  ;SEE IF TOO BIG
092D 5009           2705    ISTAY2: JNC     INTERX
092F 24F9           2706            ADD     A,#0F9H         ;BIAS FOR LOOKUP TABLE
0931 801D           2707            SJMP    ISTA0           ;DO THE OPERATION
                    2708            ;
0933 B4A400         2709    I_S:    CJNE    A,#T_LAST,I_S1  ;MAKE SURE AN INITIAL RESERVED WORD
0936 4003           2710    I_S1:   JC      INTERX1         ;ERROR IF NOT
                    2711            ;
0938 021885         2712    INTERX: LJMP    E1XX            ;SYNTAX ERROR
                    2713            ;
093B 302F12         2714    INTERX1:JNB     DIRF,ISTA0      ;EXECUTE ALL STATEMENTS IF IN RUN MODE
093E B49000         2715            CJNE    A,#T_DIR,INTERX2;SEE IF ON TOKEN
0941 400D           2716    INTERX2:JC      ISTA0           ;OK IF DIRECT
0943 B4A002         2717            CJNE    A,#T_GOSB+1,INTERX3;SEE IF FOR
0946 8008           2718            SJMP    ISTA0           ;FOR IS OK
0948 B49702         2719    INTERX3:CJNE    A,#T_REM+1,INTERX4      ;NEXT IS OK
094B 8003           2720            SJMP    ISTA0
094D B496E8         2721    INTERX4:CJNE    A,#T_STOP+6,INTERX      ;SO IS REM
                    2722            ;
0950 D1D7           2723    ISTA0:  ACALL   GCI1            ;ADVANCE THE TEXT POINTER
0952 900123         2724            MOV     DPTR,#STATD     ;POINT DPTR TO LOOKUP TABLE
0955 B48002         2725            CJNE    A,#T_GOTO-3,ISTA01;SEE IF LET TOKEN
0958 809E           2726            SJMP    ISTAT           ;WASTE LET TOKEN
095A 543F           2727    ISTA01: ANL     A,#3FH          ;STRIP OFF THE GARBAGE
                    2728            ;
095C 23             2729    ISTA1:  RL      A               ;ROTATE FOR OFFSET
095D 2582           2730            ADD     A,DPL           ;BUMP
095F F582           2731            MOV     DPL,A           ;SAVE IT
0961 E4             2732            CLR     A
0962 93             2733            MOVC    A,@A+DPTR       ;GET HIGH BYTE
0963 C0E0           2734            PUSH    ACC             ;SAVE IT
0965 A3             2735            INC     DPTR
0966 E4             2736            CLR     A
0967 93             2737            MOVC    A,@A+DPTR       ;GET LOW BYTE
0968 D083           2738            POP     DPH
096A F582           2739            MOV     DPL,A
                    2740            ;
096C E4             2741    AC1:    CLR     A
096D 73             2742            JMP     @A+DPTR         ;GO DO IT
                    2743            ;
                    2744            ;***************************************************************
                    2745            ;
                    2746            ; The statement action routine - LET
                    2747            ;
BASIC52E                                                                                                      PAGE 49

                    2748            ;***************************************************************
                    2749            ;
096E D1BF           2750    SLET:   ACALL   S_C             ;CHECK FOR POSSIBLE STRING
0970 4050           2751            JC      SLET0           ;NO STRING
0972 C215           2752            CLR     LINEB           ;USED STRINGS
                    2753            ;
0974 120579         2754            CALL    X31DP           ;PUT ADDRESS IN DPTR
0977 7FEA           2755            MOV     R7,#T_EQU       ;WASTE =
0979 91E5           2756            ACALL   EATC
097B D1CD           2757            ACALL   GC              ;GET THE NEXT CHARACTER
097D B42211         2758            CJNE    A,#'"',S_3      ;CHECK FOR A "
0980 AF3F           2759            MOV     R7,S_LEN        ;GET THE STRING LENGTH
                    2760            ;
0982 D1D7           2761    S_0:    ACALL   GCI1            ;BUMP PAST "
0984 D1E1           2762            ACALL   DELTST          ;CHECK FOR DELIMITER
0986 60B0           2763            JZ      INTERX          ;EXIT IF CARRIAGE RETURN
0988 F0             2764            MOVX    @DPTR,A         ;SAVE THE CHARACTER
0989 B42226         2765            CJNE    A,#'"',S_1      ;SEE IF DONE
                    2766            ;
098C 740D           2767    S_E:    MOV     A,#CR           ;PUT A CR IN A
098E F0             2768            MOVX    @DPTR,A         ;SAVE CR
098F C1D7           2769            AJMP    GCI1
                    2770            ;
0991 C083           2771    S_3:    PUSH    DPH
0993 C082           2772            PUSH    DPL             ;SAVE DESTINATION
0995 D1BF           2773            ACALL   S_C             ;CALCULATE SOURCE
0997 409F           2774            JC      INTERX          ;ERROR IF CARRY
0999 D000           2775            POP     R0B0            ;GET DESTINATION BACK
099B D002           2776            POP     R2B0
                    2777            ;
099D AF3F           2778    SSOOP:  MOV     R7,S_LEN        ;SET UP COUNTER
                    2779            ;
099F 121596         2780    S_4:    CALL    TBYTE           ;TRANSFER THE BYTE
09A2 B40D01         2781            CJNE    A,#CR,S_41      ;EXIT IF A CR
09A5 22             2782            RET
09A6 DF05           2783    S_41:   DJNZ    R7,S_5          ;BUMP COUNTER
09A8 740D           2784            MOV     A,#CR           ;SAVE A CR
09AA F2             2785            MOVX    @R0,A
09AB C14E           2786            AJMP    EIGP            ;PRINT EXTRA IGNORED
                    2787            ;
                    2788            ;
09AD 121576         2789    S_5:    CALL    INC3210         ;BUMP POINTERS
09B0 80ED           2790            SJMP    S_4             ;LOOP
                    2791            ;
09B2 DF06           2792    S_1:    DJNZ    R7,S_11         ;SEE IF DONE
09B4 318C           2793            ACALL   S_E
09B6 D14E           2794            ACALL   EIGP            ;PRINT EXTRA IGNORED
09B8 C1EC           2795            AJMP    FINDCR          ;GO FIND THE END
09BA A3             2796    S_11:   INC     DPTR            ;BUMP THE STORE POINTER
09BB 80C5           2797            SJMP    S_0             ;CONTINUE TO LOOP
                    2798            ;
09BD 901828         2799    E3XX:   MOV     DPTR,#E3X       ;BAD ARG ERROR
09C0 810E           2800            AJMP    EK
                    2801            ;
09C2 31C6           2802    SLET0:  ACALL   SLET1
09C4 E1D3           2803            AJMP    POPAS           ;COPY EXPRESSION TO VARIABLE
                    2804            ;
09C6 F101           2805    SLET1:  ACALL   VAR_ER          ;CHECK FOR A"VARIABLE"
BASIC52E                                                                                                      PAGE 50

                    2806            ;
09C8 C002           2807    SLET2:  PUSH    R2B0            ;SAVE THE VARIABLE ADDRESS
09CA C000           2808            PUSH    R0B0
09CC 7FEA           2809            MOV     R7,#T_EQU       ;GET EQUAL TOKEN
09CE F141           2810            ACALL   WE
09D0 D001           2811            POP     R1B0            ;POP VARIABLE TO R3:R1
09D2 D003           2812            POP     R3B0
09D4 22             2813            RET                     ;EXIT
                    2814            ;
09D5 BB00E5         2815    R3CK:   CJNE    R3,#00H,E3XX    ;CHECK TO SEE IF R3 IS ZERO
09D8 22             2816            RET
                    2817            ;
09D9 D1D7           2818    SPEOP:  ACALL   GCI1            ;BUMP TXA
09DB 91DF           2819            ACALL   P_E             ;EVALUATE PAREN
09DD 31C8           2820    SPEOP1: ACALL   SLET2           ;EVALUATE AFTER =
09DF 1214A1         2821            CALL    TWOL            ;R7:R6 GETS VALUE, R3:R1 GETS LOCATION
09E2 EE             2822            MOV     A,R6            ;SAVE THE VALUE
                    2823            ;
09E3 BF00D7         2824            CJNE    R7,#00H,E3XX    ;R2 MUST BE = 0
09E6 22             2825            RET
                    2826            ;
                    2827            ;**************************************************************
                    2828            ;
                    2829            ; ST_CAL - Calculate string Address
                    2830            ;
                    2831            ;**************************************************************
                    2832            ;
09E7                2833    IST_CAL:;
                    2834            ;
09E7 D195           2835            ACALL   I_PI            ;BUMP TEXT, THEN EVALUATE
09E9 31D5           2836            ACALL   R3CK            ;ERROR IF R3 <> 0
09EB 09             2837            INC     R1              ;BUMP FOR OFFSET
09EC E9             2838            MOV     A,R1            ;ERROR IF R1 = 255
09ED 60CE           2839            JZ      E3XX
09EF 900104         2840            MOV     DPTR,#VARTOP    ;GET TOP OF VARIABLE STORAGE
09F2 853FF0         2841            MOV     B,S_LEN         ;MULTIPLY FOR LOCATION
09F5 5110           2842            ACALL   VARD            ;CALCULATE THE LOCATION
09F7 90010A         2843            MOV     DPTR,#MEMTOP    ;SEE IF BLEW IT
09FA 1215B0         2844            CALL    FUL1
09FD 853F82         2845            MOV     DPL,S_LEN       ;GET STRING LENGTH, DPH = 00H
0A00 1583           2846            DEC     DPH             ;DPH = 0
                    2847            ;
0A02 C3             2848    DUBSUB: CLR     C
0A03 E9             2849            MOV     A,R1
0A04 9582           2850            SUBB    A,DPL
0A06 F9             2851            MOV     R1,A
0A07 EB             2852            MOV     A,R3
0A08 9583           2853            SUBB    A,DPH
0A0A FB             2854            MOV     R3,A
0A0B 49             2855            ORL     A,R1
0A0C 22             2856            RET
                    2857            ;
                    2858            ;***************************************************************
                    2859            ;
                    2860            ;VARD - Calculate the offset base
                    2861            ;
                    2862            ;***************************************************************
                    2863            ;
BASIC52E                                                                                                      PAGE 51

0A0D 75F006         2864    VARB:   MOV     B,#FPSIZ        ;SET UP FOR OPERATION
                    2865            ;
0A10 1205B0         2866    VARD:   CALL    LDPTRI          ;LOAD DPTR
0A13 E9             2867            MOV     A,R1            ;MULTIPLY BASE
0A14 A4             2868            MUL     AB
0A15 2582           2869            ADD     A,DPL
0A17 F9             2870            MOV     R1,A
0A18 E5F0           2871            MOV     A,B
0A1A 3583           2872            ADDC    A,DPH
0A1C FB             2873            MOV     R3,A
0A1D 22             2874            RET
                    2875            ;
                    2876            ;*************************************************************
                    2877            ;
0A1E                2878    CSY:    ; Calculate a biased string address and put in R3:R1
                    2879            ;
                    2880            ;*************************************************************
                    2881            ;
0A1E 31E7           2882            ACALL   IST_CAL         ;CALCULATE IT
0A20 C003           2883            PUSH    R3B0            ;SAVE IT
0A22 C001           2884            PUSH    R1B0
0A24 7F2C           2885            MOV     R7,#','         ;WASTE THE COMMA
0A26 91E5           2886            ACALL   EATC
0A28 D18E           2887            ACALL   ONE             ;GET THE NEXT EXPRESSION
0A2A E9             2888            MOV     A,R1            ;CHECK FOR BOUNDS
0A2B B53F00         2889            CJNE    A,S_LEN,CSY1
0A2E 508D           2890    CSY1:   JNC     E3XX            ;MUST HAVE A CARRY
0A30 19             2891            DEC     R1              ;BIAS THE POINTER
0A31 D0E0           2892            POP     ACC             ;GET VALUE LOW
0A33 29             2893            ADD     A,R1            ;ADD IT TO BASE
0A34 F9             2894            MOV     R1,A            ;SAVE IT
0A35 D003           2895            POP     R3B0            ;GET HIGH ADDRESS
0A37 5001           2896            JNC     CSY2            ;PROPAGATE THE CARRY
0A39 0B             2897            INC     R3
0A3A 81E3           2898    CSY2:   AJMP    ERPAR           ;WASTE THE RIGHT PAREN
                    2899            ;
                    2900            ;***************************************************************
                    2901            ;
                    2902            ; The statement action routine FOR
                    2903            ;
                    2904            ;***************************************************************
                    2905            ;
0A3C 31C6           2906    SFOR:   ACALL   SLET1           ;SET UP CONTROL VARIABLE
0A3E C003           2907            PUSH    R3B0            ;SAVE THE CONTROL VARIABLE LOCATION
0A40 C001           2908            PUSH    R1B0
0A42 F1D3           2909            ACALL   POPAS           ;POP ARG STACK AND COPY CONTROL VAR
0A44 7FA6           2910            MOV     R7,#T_TO        ;GET TO TOKEN
0A46 F141           2911            ACALL   WE
0A48 D1CD           2912            ACALL   GC              ;GET NEXT CHARACTER
0A4A B4A706         2913            CJNE    A,#T_STEP,SF2
0A4D D1D7           2914            ACALL   GCI1            ;EAT THE TOKEN
0A4F F143           2915            ACALL   EXPRB           ;EVALUATE EXPRESSION
0A51 8003           2916            SJMP    SF21            ;JUMP OVER
                    2917            ;
0A53 121443         2918    SF2:    LCALL   PUSH_ONE        ;PUT ONE ON THE STACK
                    2919            ;
0A56 74EF           2920    SF21:   MOV     A,#-FSIZE       ;ALLOCATE FSIZE BYTES ON THE CONTROL STACK
0A58 71B1           2921            ACALL   PUSHCS          ;GET CS IN R0
BASIC52E                                                                                                      PAGE 52

0A5A 71BD           2922            ACALL   CSC             ;CHECK CONTROL STACK
0A5C 7B00           2923            MOV     R3,#CSTKAH      ;IN CONTROL STACK
0A5E A900           2924            MOV     R1,R0B0         ;STACK ADDRESS
0A60 F1D3           2925            ACALL   POPAS           ;PUT STEP ON STACK
0A62 F1D3           2926            ACALL   POPAS           ;PUT LIMIT ON STACK
0A64 D1A2           2927            ACALL   DP_T            ;DPTR GETS TEXT
0A66 A801           2928            MOV     R0,R1B0         ;GET THE POINTER
0A68 7139           2929            ACALL   T_X_S           ;SAVE THE TEXT
0A6A D008           2930            POP     TXAL            ;GET CONTROL VARIABLE
0A6C D00A           2931            POP     TXAH
0A6E 7C01           2932            MOV     R4,#FTYPE       ;AND THE TYPE
0A70 7139           2933            ACALL   T_X_S           ;SAVE IT
                    2934            ;
0A72 D1B8           2935    SF3:    ACALL   T_DP            ;GET THE TEXT POINTER
0A74 0113           2936            AJMP    ILOOP           ;CONTINUE TO PROCESS
                    2937            ;
                    2938            ;**************************************************************
                    2939            ;
                    2940            ; The statement action routines - PUSH and POP
                    2941            ;
                    2942            ;**************************************************************
                    2943            ;
0A76 F143           2944    SPUSH:  ACALL   EXPRB           ;PUT EXPRESSION ON STACK
0A78 D1C6           2945            ACALL   C_TST           ;SEE IF MORE TO DO
0A7A 50FA           2946            JNC     SPUSH           ;IF A COMMA PUSH ANOTHER
0A7C 22             2947            RET
                    2948            ;
                    2949            ;
0A7D F101           2950    SPOP:   ACALL   VAR_ER          ;GET VARIABLE
0A7F F1D1           2951            ACALL   XPOP            ;FLIP THE REGISTERS FOR POPAS
0A81 D1C6           2952            ACALL   C_TST           ;SEE IF MORE TO DO
0A83 50F8           2953            JNC     SPOP
                    2954            ;
0A85 22             2955    SPOP1:  RET
                    2956            ;
                    2957            ;***************************************************************
                    2958            ;
                    2959            ; The statement action routine - IF
                    2960            ;
                    2961            ;***************************************************************
                    2962            ;
0A86 51C7           2963    SIF:    ACALL   RTST            ;EVALUATE THE EXPRESSION
0A88 F9             2964            MOV     R1,A            ;SAVE THE RESULT
0A89 D1CD           2965            ACALL   GC              ;GET THE CHARACTER AFTER EXPR
0A8B B4A502         2966            CJNE    A,#T_THEN,SIF1  ;SEE IF THEN TOKEN
0A8E D1D7           2967            ACALL   GCI1            ;WASTE THEN TOKEN
0A90 B9000B         2968    SIF1:   CJNE    R1,#0,T_F1      ;CHECK R_OP RESULT
                    2969            ;
0A93 7FA8           2970    E_FIND: MOV     R7,#T_ELSE      ;FIND ELSE TOKEN
0A95 D1EE           2971            ACALL   FINDC
0A97 60EC           2972            JZ      SPOP1           ;EXIT IF A CR
0A99 D1D7           2973            ACALL   GCI1            ;BUMP PAST TOKEN
0A9B B4A8F5         2974            CJNE    A,#T_ELSE,E_FIND;WASTE IF NO ELSE
                    2975            ;
0A9E F135           2976    T_F1:   ACALL   INTGER          ;SEE IF NUMBER
0AA0 5056           2977            JNC     D_L1            ;EXECUTE LINE NUMBER
0AA2 01F8           2978            AJMP    ISTAT           ;EXECUTE STATEMENT IN NOT
                    2979            ;
BASIC52E                                                                                                      PAGE 53

0AA4 E0             2980    B_C:    MOVX    A,@DPTR
0AA5 14             2981            DEC     A
0AA6 20E72E         2982            JB      ACC.7,FL11
0AA9 22             2983            RET
                    2984            ;
                    2985            ;***************************************************************
                    2986            ;
                    2987            ; The statement action routine - GOTO
                    2988            ;
                    2989            ;***************************************************************
                    2990            ;
0AAA 51F2           2991    SGOTO:  ACALL   RLINE           ;R2:R0 AND DPTR GET INTGER
                    2992            ;
0AAC D1B8           2993    SGT1:   ACALL   T_DP            ;TEXT POINTER GETS DPTR
                    2994            ;
0AAE 102508         2995            JBC     RETBIT,SGT2     ;SEE IF RETI EXECUTED
                    2996            ;
0AB1 301503         2997            JNB     LINEB,SGT11     ;SEE IF A LINE WAS EDITED
0AB4 120662         2998            LCALL   CNEW1           ;CLEAR THE MEMORY IF SET
0AB7 0111           2999    SGT11:  AJMP    CILOOP1         ;CLEAR DIRF AND LOOP
                    3000            ;
0AB9 101405         3001    SGT2:   JBC     OTI,SGT21       ;SEE IF TIMER INTERRUPT
0ABC 5322BD         3002            ANL     34,#10111101B   ;CLEAR INTERRUPTS
0ABF 0113           3003            AJMP    ILOOP           ;EXECUTE
0AC1 A22B           3004    SGT21:  MOV     C,ISAV
0AC3 9211           3005            MOV     INPROG,C
0AC5 0113           3006            AJMP    ILOOP           ;RESTORE INTERRUPTS AND RET
                    3007            ;
                    3008            ;
                    3009            ;*************************************************************
                    3010            ;
0AC7                3011    RTST:   ; Test for ZERO
                    3012            ;
                    3013            ;*************************************************************
                    3014            ;
0AC7 F143           3015            ACALL   EXPRB           ;EVALUATE EXPRESSION
0AC9 12124F         3016            CALL    INC_ASTKA       ;BUMP ARG STACK
0ACC 6002           3017            JZ      RTST1           ;EXIT WITH ZERO OR 0FFH
0ACE 74FF           3018            MOV     A,#0FFH
0AD0 22             3019    RTST1:  RET
                    3020            ;
                    3021            ;
                    3022            ;**************************************************************
                    3023            ;
                    3024            ; GLN - get the line number in R2:R0, return in DPTR
                    3025            ;
                    3026            ;**************************************************************
                    3027            ;
0AD1 D19B           3028    GLN:    ACALL   DP_B            ;GET THE BEGINNING ADDRESS
                    3029            ;
0AD3 E0             3030    FL1:    MOVX    A,@DPTR         ;GET THE LENGTH
0AD4 FF             3031            MOV     R7,A            ;SAVE THE LENGTH
0AD5 DF05           3032            DJNZ    R7,FL3          ;SEE IF END OF FILE
                    3033            ;
0AD7 901FB5         3034    FL11:   MOV     DPTR,#E10X      ;NO LINE NUMBER
0ADA 810E           3035            AJMP    EK              ;HANDLE THE ERROR
                    3036            ;
0ADC 20E7F8         3037    FL3:    JB      ACC.7,FL11      ;CHECK FOR BIT 7
BASIC52E                                                                                                      PAGE 54

0ADF A3             3038            INC     DPTR            ;POINT AT HIGH BYTE
0AE0 E0             3039            MOVX    A,@DPTR         ;GET HIGH BYTE
0AE1 B50208         3040            CJNE    A,R2B0,FL2      ;SEE IF MATCH
0AE4 A3             3041            INC     DPTR            ;BUMP TO LOW BYTE
0AE5 1F             3042            DEC     R7              ;ADJUST AGAIN
0AE6 E0             3043            MOVX    A,@DPTR         ;GET THE LOW BYTE
0AE7 B50002         3044            CJNE    A,R0B0,FL2      ;SEE IF LOW BYTE MATCH
0AEA A3             3045            INC     DPTR            ;POINT AT FIRST CHARACTER
0AEB 22             3046            RET                     ;FOUND IT
                    3047            ;
0AEC EF             3048    FL2:    MOV     A,R7            ;GET THE LENGTH COUNTER
0AED 1205DE         3049            CALL    ADDPTR          ;ADD A TO DATA POINTER
0AF0 80E1           3050            SJMP    FL1             ;LOOP
                    3051            ;
                    3052            ;
                    3053            ;*************************************************************
                    3054            ;
                    3055            ;RLINE - Read in ASCII string, get line, and clean it up
                    3056            ;
                    3057            ;*************************************************************
                    3058            ;
0AF2 F130           3059    RLINE:  ACALL   INTERR          ;GET THE INTEGER
                    3060            ;
0AF4 51D1           3061    RL1:    ACALL   GLN
0AF6 E117           3062            AJMP    CLN_UP
                    3063            ;
                    3064            ;
0AF8 51D1           3065    D_L1:   ACALL   GLN             ;GET THE LINE
0AFA 41AC           3066            AJMP    SGT1            ;EXECUTE THE LINE
                    3067            ;
                    3068            ;***************************************************************
                    3069            ;
                    3070            ; The statement action routines WHILE and UNTIL
                    3071            ;
                    3072            ;***************************************************************
                    3073            ;
0AFC 51C7           3074    SWHILE: ACALL   RTST            ;EVALUATE RELATIONAL EXPRESSION
0AFE F4             3075            CPL     A
0AFF 8002           3076            SJMP    S_WU
                    3077            ;
0B01 51C7           3078    SUNTIL: ACALL   RTST            ;EVALUATE RELATIONAL EXPRESSION
                    3079            ;
0B03 7C03           3080    S_WU:   MOV     R4,#DTYPE       ;DO EXPECTED
0B05 FD             3081            MOV     R5,A            ;SAVE R_OP RESULT
0B06 800C           3082            SJMP    SR0             ;GO PROCESS
                    3083            ;
                    3084            ;
                    3085            ;***************************************************************
                    3086            ;
0B08                3087    CNULL:  ; The Command Action Routine - NULL
                    3088            ;
                    3089            ;***************************************************************
                    3090            ;
0B08 F130           3091            ACALL   INTERR          ;GET AN INTEGER FOLLOWING NULL
0B0A 8815           3092            MOV     NULLCT,R0       ;SAVE THE NULLCOUNT
0B0C 0155           3093            AJMP    CMNDLK          ;JUMP TO COMMAND MODE
                    3094            ;
                    3095            ;***************************************************************
BASIC52E                                                                                                      PAGE 55

                    3096            ;
                    3097            ; The statement action routine - RETI
                    3098            ;
                    3099            ;***************************************************************
                    3100            ;
0B0E D225           3101    SRETI:  SETB    RETBIT          ;SAYS THAT RETI HAS BEEN EXECUTED
                    3102            ;
                    3103            ;***************************************************************
                    3104            ;
                    3105            ; The statement action routine - RETURN
                    3106            ;
                    3107            ;***************************************************************
                    3108            ;
0B10 7C02           3109    SRETRN: MOV     R4,#GTYPE       ;MAKE SURE OF GOSUB
0B12 7D55           3110            MOV     R5,#55H         ;TYPE RETURN TYPE
                    3111            ;
0B14 714B           3112    SR0:    ACALL   CSETUP          ;SET UP CONTROL STACK
0B16 E2             3113            MOVX    A,@R0           ;GET RETURN TEXT ADDRESS
0B17 F583           3114            MOV     DPH,A
0B19 08             3115            INC     R0
0B1A E2             3116            MOVX    A,@R0
0B1B F582           3117            MOV     DPL,A
0B1D 08             3118            INC     R0              ;POP CONTROL STACK
0B1E E0             3119            MOVX    A,@DPTR         ;SEE IF GOSUB WAS THE LAST STATEMENT
0B1F B40102         3120            CJNE    A,#EOF,SR01
0B22 0155           3121            AJMP    CMNDLK
0B24 ED             3122    SR01:   MOV     A,R5            ;GET TYPE
0B25 6085           3123            JZ      SGT1            ;EXIT IF ZERO
0B27 8811           3124            MOV     CSTKA,R0        ;POP THE STACK
0B29 F4             3125            CPL     A               ;OPTION TEST, 00H, 55H, 0FFH, NOW 55H
0B2A 7080           3126            JNZ     SGT1            ;MUST BE GOSUB
0B2C 22             3127            RET                     ;NORMAL FALL THRU EXIT FOR NO MATCH
                    3128            ;
                    3129            ;***************************************************************
                    3130            ;
                    3131            ; The statement action routine - GOSUB
                    3132            ;
                    3133            ;***************************************************************
                    3134            ;
0B2D 51F2           3135    SGOSUB: ACALL   RLINE           ;NEW TXA IN DPTR
                    3136            ;
0B2F 7C02           3137    SGS0:   MOV     R4,#GTYPE
0B31 7135           3138            ACALL   SGS1            ;SET EVERYTHING UP
0B33 4172           3139            AJMP    SF3             ;EXIT
                    3140            ;
0B35 74FD           3141    SGS1:   MOV     A,#-3           ;ALLOCATE 3 BYTES ON CONTROL STACK
0B37 71B1           3142            ACALL   PUSHCS
                    3143            ;
0B39 75A000         3144    T_X_S:  MOV     P2,#CSTKAH      ;SET UP PORT FOR CONTROL STACK
0B3C E508           3145            MOV     A,TXAL          ;GET RETURN ADDRESS AND SAVE IT
0B3E F2             3146            MOVX    @R0,A
0B3F 18             3147            DEC     R0
0B40 E50A           3148            MOV     A,TXAH
0B42 F2             3149            MOVX    @R0,A
0B43 18             3150            DEC     R0
0B44 EC             3151            MOV     A,R4            ;GET TYPE
0B45 F2             3152            MOVX    @R0,A           ;SAVE TYPE
0B46 22             3153            RET                     ;EXIT
BASIC52E                                                                                                      PAGE 56

                    3154            ;
                    3155            ;
0B47 7403           3156    CS1:    MOV     A,#3            ;POP 3 BYTES
0B49 71B1           3157            ACALL   PUSHCS
                    3158            ;
0B4B A811           3159    CSETUP: MOV     R0,CSTKA        ;GET CONTROL STACK
0B4D 75A000         3160            MOV     P2,#CSTKAH
0B50 E2             3161            MOVX    A,@R0           ;GET BYTE
0B51 B50402         3162            CJNE    A,R4B0,CSETUP1  ;SEE IF TYPE MATCH
0B54 08             3163            INC     R0
0B55 22             3164            RET
0B56 6069           3165    CSETUP1:JZ      E4XX            ;EXIT IF STACK UNDERFLOW
0B58 B401EC         3166            CJNE    A,#FTYPE,CS1    ;SEE IF FOR TYPE
0B5B 71AF           3167            ACALL   XXI3            ;WASTE THE FOR TYPE
0B5D 80EC           3168            SJMP    CSETUP          ;LOOP
                    3169            ;
                    3170            ;***************************************************************
                    3171            ;
                    3172            ; The statement action routine - NEXT
                    3173            ;
                    3174            ;***************************************************************
                    3175            ;
0B5F 7C01           3176    SNEXT:  MOV     R4,#FTYPE       ;FOR TYPE
0B61 714B           3177            ACALL   CSETUP          ;SETUP CONTROL STACK
0B63 880F           3178            MOV     TEMP5,R0        ;SAVE CONTROL VARIABLE ADDRESS
0B65 790B           3179            MOV     R1,#TEMP1       ;SAVE VAR + RETURN IN TEMP1-4
                    3180            ;
0B67 E2             3181    XXI:    MOVX    A,@R0           ;LOOP UNTIL DONE
0B68 F7             3182            MOV     @R1,A
0B69 09             3183            INC     R1
0B6A 08             3184            INC     R0
0B6B B90FF9         3185            CJNE    R1,#TEMP5,XXI
                    3186            ;
0B6E B165           3187            ACALL   VAR             ;SEE IF THE USER HAS A VARIABLE
0B70 5004           3188            JNC     XXI1
0B72 AA0B           3189            MOV     R2,TEMP1
0B74 A80C           3190            MOV     R0,TEMP2
0B76 EA             3191    XXI1:   MOV     A,R2            ;SEE IF VAR'S AGREE
0B77 B50B47         3192            CJNE    A,TEMP1,E4XX
0B7A E8             3193            MOV     A,R0
0B7B B50C43         3194            CJNE    A,TEMP2,E4XX
0B7E F1DD           3195            ACALL   PUSHAS          ;PUT CONTROL VARIABLE ON STACK
0B80 740E           3196            MOV     A,#FPSIZ+FPSIZ+2;COMPUTE ADDRESS TO STEP VALUE SIGN
0B82 250F           3197            ADD     A,TEMP5         ;ADD IT TO BASE OF STACK
0B84 F8             3198            MOV     R0,A            ;SAVE IN R0
0B85 7A00           3199            MOV     R2,#CSTKAH      ;SET UP TO PUSH STEP VALUE
0B87 8AA0           3200            MOV     P2,R2           ;SET UP PORT
0B89 E2             3201            MOVX    A,@R0           ;GET SIGN
0B8A 08             3202            INC     R0              ;BACK TO EXPONENT
0B8B C0E0           3203            PUSH    ACC             ;SAVE SIGN OF STEP
0B8D F1DD           3204            ACALL   PUSHAS          ;PUT STEP VALUE ON STACK
0B8F C000           3205            PUSH    R0B0            ;SAVE LIMIT VALUE LOCATION
0B91 121741         3206            CALL    AADD            ;ADD STEP VALUE TO VARIABLE
0B94 12142C         3207            CALL    CSTAKA          ;COPY STACK
0B97 AB0B           3208            MOV     R3,TEMP1        ;GET CONTROL VARIABLE
0B99 A90C           3209            MOV     R1,TEMP2
0B9B F1D3           3210            ACALL   POPAS           ;SAVE THE RESULT
0B9D 7A00           3211            MOV     R2,#CSTKAH      ;RESTORE LIMIT LOCATION
BASIC52E                                                                                                      PAGE 57

0B9F D000           3212            POP     R0B0
0BA1 F1DD           3213            ACALL   PUSHAS          ;PUT LIMIT ON STACK
0BA3 121973         3214            CALL    FP_BASE2        ;DO THE COMPARE
0BA6 D0E0           3215            POP     ACC             ;GET LIMIT SIGN BACK
0BA8 6001           3216            JZ      XXI2            ;IF SIGN NEGATIVE, TEST "BACKWARDS"
0BAA B3             3217            CPL     C
0BAB 72D5           3218    XXI2:   ORL     C,F0            ;SEE IF EQUAL
0BAD 4017           3219            JC      N4              ;STILL SMALLER THAN LIMIT?
0BAF 7411           3220    XXI3:   MOV     A,#FSIZE        ;REMOVE CONTROL STACK ENTRY
                    3221            ;
                    3222            ; Fall thru to PUSHCS
                    3223            ;
                    3224            ;***************************************************************
                    3225            ;
                    3226            ; PUSHCS - push frame onto control stack
                    3227            ;          acc has - number of bytes, also test for overflow
                    3228            ;
                    3229            ;***************************************************************
                    3230            ;
0BB1 2511           3231    PUSHCS: ADD     A,CSTKA         ;BUMP CONTROL STACK
0BB3 B46100         3232            CJNE    A,#CONVT+17,PUSHCS1 ;SEE IF OVERFLOWED
0BB6 4009           3233    PUSHCS1:JC      E4XX            ;EXIT IF STACK OVERFLOW
0BB8 C511           3234            XCH     A,CSTKA         ;STORE NEW CONTROL STACK VALUE, GET OLD
0BBA 14             3235            DEC     A               ;BUMP OLD VALUE
0BBB F8             3236            MOV     R0,A            ;PUT OLD-1 IN R0
                    3237            ;
0BBC 22             3238    PUSHCS2:RET                     ;EXIT
                    3239            ;
0BBD F117           3240    CSC:    ACALL   CLN_UP          ;FINISH OFF THE LINE
0BBF 50FB           3241            JNC     PUSHCS2         ;EXIT IF NO TERMINATOR
                    3242            ;
0BC1 900383         3243    E4XX:   MOV     DPTR,#EXC       ;CONTROL STACK ERROR
0BC4 810E           3244            AJMP    EK              ;STACK ERROR
                    3245            ;
0BC6 850D0A         3246    N4:     MOV     TXAH,TEMP3      ;GET TEXT POINTER
0BC9 850E08         3247            MOV     TXAL,TEMP4
0BCC 0113           3248            AJMP    ILOOP           ;EXIT
                    3249            ;
                    3250            ;***************************************************************
                    3251            ;
                    3252            ; The statement action routine - RESTORE
                    3253            ;
                    3254            ;***************************************************************
                    3255            ;
0BCE 71D6           3256    SRESTR: ACALL   X_TR            ;SWAP POINTERS
0BD0 D19B           3257    SRESTR1:ACALL   DP_B            ;GET THE STARTING ADDRESS
0BD2 D1B8           3258            ACALL   T_DP            ;PUT STARTING ADDRESS IN TEXT POINTER
0BD4 F123           3259            ACALL   B_TXA           ;BUMP TXA
                    3260            ;
                    3261            ; Fall thru
                    3262            ;
0BD6                3263    X_TR:   ;swap txa and rtxa
                    3264            ;
0BD6 C50A           3265            XCH     A,TXAH
0BD8 C512           3266            XCH     A,RTXAH
0BDA C50A           3267            XCH     A,TXAH
0BDC C508           3268            XCH     A,TXAL
0BDE C510           3269            XCH     A,RTXAL
BASIC52E                                                                                                      PAGE 58

0BE0 C508           3270            XCH     A,TXAL
0BE2 22             3271            RET                     ;EXIT
                    3272            ;
                    3273            ;***************************************************************
                    3274            ;
                    3275            ; The statement action routine - READ
                    3276            ;
                    3277            ;***************************************************************
                    3278            ;
0BE3 71D6           3279    SREAD:  ACALL   X_TR            ;SWAP POINTERS
                    3280            ;
0BE5 D1C6           3281    SRD0:   ACALL   C_TST           ;CHECK FOR COMMA
0BE7 4016           3282            JC      SRD4            ;SEE WHAT IT IS
                    3283            ;
0BE9 F143           3284    SRD:    ACALL   EXPRB           ;EVALUATE THE EXPRESSION
0BEB D1CD           3285            ACALL   GC              ;GET THE CHARACTER AFTER EXPRESSION
0BED B42C02         3286            CJNE    A,#',',SRD1     ;SEE IF MORE DATA
0BF0 8002           3287            SJMP    SRD2            ;BYBASS CLEAN UP IF A COMMA
                    3288            ;
0BF2 F117           3289    SRD1:   ACALL   CLN_UP          ;FINISH OFF THE LINE, IF AT END
                    3290            ;
0BF4 71D6           3291    SRD2:   ACALL   X_TR            ;RESTORE POINTERS
0BF6 F101           3292            ACALL   VAR_ER          ;GET VARIABLE ADDRESS
0BF8 F1D1           3293            ACALL   XPOP            ;FLIP THE REGISTERS FOR POPAS
0BFA D1C6           3294            ACALL   C_TST           ;SEE IF A COMMA
0BFC 50E5           3295            JNC     SREAD           ;READ AGAIN IF A COMMA
0BFE 22             3296    SRD21:  RET                     ;EXIT IF NOT
                    3297            ;
0BFF B49C04         3298    SRD4:   CJNE    A,#T_DATA,SRD5  ;SEE IF DATA
0C02 D1D7           3299            ACALL   GCI1            ;BUMP POINTER
0C04 80E3           3300            SJMP    SRD
                    3301            ;
0C06 B40108         3302    SRD5:   CJNE    A,#EOF,SRD6     ;SEE IF YOU BLEW IT
0C09 71D6           3303    SRD51:  ACALL   X_TR            ;GET THE TEXT POINTER BACK
0C0B 901F81         3304            MOV     DPTR,#E14X      ;READ ERROR
                    3305            ;
0C0E 02188F         3306    EK:     LJMP    ERROR
                    3307            ;
0C11 D1EC           3308    SRD6:   ACALL   FINDCR          ;WASTE THIS LINE
0C13 F117           3309            ACALL   CLN_UP          ;CLEAN IT UP
0C15 40F2           3310            JC      SRD51           ;ERROR IF AT END
0C17 80CC           3311            SJMP    SRD0
                    3312            ;
0C19 D1CD           3313    NUMC:   ACALL   GC              ;GET A CHARACTER
0C1B B42304         3314            CJNE    A,#'#',NUMC1    ;SEE IF A #
0C1E D21B           3315            SETB    COB             ;VALID LINE PRINT
0C20 C1CB           3316            AJMP    IGC             ;BUMP THE TEXT POINTER
                    3317            ;
0C22 B440D9         3318    NUMC1:  CJNE    A,#'@',SRD21    ;EXIT IF NO GOOD
0C25 D219           3319            SETB    LPB
0C27 C1CB           3320            AJMP    IGC
                    3321            ;
                    3322            ;***************************************************************
                    3323            ;
                    3324            ; The statement action routine - PRINT
                    3325            ;
                    3326            ;***************************************************************
                    3327            ;
BASIC52E                                                                                                      PAGE 59

0C29 D236           3328    SPH0:   SETB    ZSURP           ;NO ZEROS
                    3329            ;
0C2B D237           3330    SPH1:   SETB    HMODE           ;HEX MODE
                    3331            ;
0C2D 9119           3332    SPRINT: ACALL   NUMC            ;TEST FOR A LINE PRINT
0C2F 9138           3333            ACALL   SPRINT2         ;PROCEED
0C31 5323F5         3334    SPRINT1:ANL     35,#11110101B   ;CLEAR COB AND LPB
0C34 53263F         3335            ANL     38,#00111111B   ;NO HEX MODE
                    3336            ;
0C37 22             3337            RET
                    3338            ;
0C38 D1E1           3339    SPRINT2:ACALL   DELTST          ;CHECK FOR A DELIMITER
0C3A 4007           3340            JC      SP1
                    3341            ;
0C3C 0206A5         3342    SP0:    JMP     CRLF            ;EXIT WITH A CR IF SO
                    3343            ;
0C3F D1C6           3344    SP2:    ACALL   C_TST           ;CHECK FOR A COMMA
0C41 40F9           3345            JC      SP0             ;EXIT IF NO COMMA
                    3346            ;
0C43 D1A9           3347    SP1:    ACALL   CPS             ;SEE IF A STRING TO PRINT
0C45 50F8           3348            JNC     SP2             ;IF A STRING, CHECK FOR A COMMA
                    3349            ;
0C47 B4A408         3350    SP4:    CJNE    A,#T_TAB,SP6
0C4A D195           3351            ACALL   I_PI            ;ALWAYS CLEARS CARRY
0C4C 9516           3352            SUBB    A,PHEAD         ;TAKE DELTA BETWEEN TAB AND PHEAD
0C4E 40EF           3353            JC      SP2             ;EXIT IF PHEAD > TAB
0C50 8005           3354            SJMP    SP7             ;OUTPUT SPACES
                    3355            ;
0C52 B4A90A         3356    SP6:    CJNE    A,#T_SPC,SM
0C55 D195           3357            ACALL   I_PI            ;SET UP PAREN VALUE
                    3358            ;
0C57 60E6           3359    SP7:    JZ      SP2
0C59 12070F         3360            LCALL   STEROT          ;OUTPUT A SPACE
0C5C 14             3361            DEC     A               ;DECREMENT COUNTER
0C5D 80F8           3362            SJMP    SP7             ;LOOP
                    3363            ;
0C5F B4D313         3364    SM:     CJNE    A,#T_CHR,SP8
0C62 D1CB           3365            ACALL   IGC
0C64 B42406         3366            CJNE    A,#'$',SM01
0C67 F1F9           3367            ACALL   CNX             ;PUT THE CHARACTER ON THE STACK
0C69 D190           3368            ACALL   IFIXL           ;PUT THE CHARACTER IN R1
0C6B 8004           3369            SJMP    SM02
0C6D D18E           3370    SM01:   ACALL   ONE             ;EVALUATE THE EXPRESSION, PUT IN R3:R1
0C6F 91E3           3371            ACALL   ERPAR
0C71 AD01           3372    SM02:   MOV     R5,R1B0         ;BYTE TO OUTPUT
0C73 8007           3373            SJMP    SQ
                    3374            ;
0C75 B4AA09         3375    SP8:    CJNE    A,#T_CR,SX
0C78 D1D7           3376            ACALL   GCI1            ;EAT THE TOKEN
0C7A 7D0D           3377            MOV     R5,#CR
                    3378            ;
0C7C 120711         3379    SQ:     CALL    TEROT
0C7F 80BE           3380            SJMP    SP2             ;OUTPUT A CR AND DO IT AGAIN
                    3381            ;
0C81 B4D253         3382    SX:     CJNE    A,#T_USE,SP9    ;USING TOKEN
0C84 D1CB           3383            ACALL   IGC             ;GE THE CHARACTER AFTER THE USING TOKEN
0C86 B44616         3384            CJNE    A,#'F',U4       ;SEE IF FLOATING
0C89 7517F0         3385            MOV     FORMAT,#0F0H    ;SET FLOATING
BASIC52E                                                                                                      PAGE 60

0C8C D1CB           3386            ACALL   IGC             ;BUMP THE POINTER AND GET THE CHARACTER
0C8E D1D7           3387            ACALL   GCI1            ;BUMP IT AGAIN
0C90 540F           3388            ANL     A,#0FH          ;STRIP OFF ASCII BIAS
0C92 6007           3389            JZ      U3              ;EXIT IF ZERO
0C94 B40300         3390            CJNE    A,#3,SX1        ;SEE IF AT LEAST A THREE
0C97 5002           3391    SX1:    JNC     U3              ;FORCE A THREE IF NOT A THREE
0C99 7403           3392            MOV     A,#3
                    3393            ;
0C9B 4217           3394    U3:     ORL     FORMAT,A        ;PUT DIGIT IN FORMAT
0C9D 802A           3395            SJMP    U8              ;CLEAN UP END
                    3396            ;
0C9F B43007         3397    U4:     CJNE    A,#'0',U5
0CA2 751700         3398            MOV     FORMAT,#0       ;FREE FORMAT
0CA5 D1D7           3399            ACALL   GCI1            ;BUMP THE POINTER
0CA7 8020           3400            SJMP    U8
                    3401            ;
0CA9 B4231D         3402    U5:     CJNE    A,#'#',U8       ;SEE IF INTGER FORMAT
0CAC 91CD           3403            ACALL   U6
0CAE 8F17           3404            MOV     FORMAT,R7       ;SAVE THE FORMAT
0CB0 B42E11         3405            CJNE    A,#'.',U8A      ;SEE IF TERMINATOR WAS RADIX
0CB3 D1CB           3406            ACALL   IGC             ;BUMP PAST .
0CB5 91CD           3407            ACALL   U6              ;LOOP AGAIN
0CB7 EF             3408            MOV     A,R7            ;GET COUNT
0CB8 2517           3409            ADD     A,FORMAT        ;SEE IF TOO BIG
0CBA 24F7           3410            ADD     A,#0F7H
0CBC 5002           3411            JNC     U5A
                    3412            ;
0CBE 2138           3413    SE0:    AJMP    INTERX          ;ERROR, BAD SYNTAX
                    3414            ;
0CC0 EF             3415    U5A:    MOV     A,R7            ;GET THE COUNT BACK
0CC1 C4             3416            SWAP    A               ;ADJUST
0CC2 4217           3417            ORL     FORMAT,A        ;GET THE COUNT
                    3418            ;
0CC4 E517           3419    U8A:    MOV     A,FORMAT
                    3420            ;
0CC6 C4             3421    U8B:    SWAP    A               ;GET THE FORMAT RIGHT
0CC7 F517           3422            MOV     FORMAT,A
                    3423            ;
0CC9 91E3           3424    U8:     ACALL   ERPAR
0CCB 813F           3425            AJMP    SP2             ;DONE
                    3426            ;
0CCD 7F00           3427    U6:     MOV     R7,#0           ;SET COUNTER
                    3428            ;
0CCF B4230C         3429    U7:     CJNE    A,#'#',SP9A     ;EXIT IF NOT A #
0CD2 0F             3430            INC     R7              ;BUMP COUNTER
0CD3 D1CB           3431            ACALL   IGC             ;GET THE NEXT CHARACTER
0CD5 80F8           3432            SJMP    U7              ;LOOP
                    3433            ;
0CD7 D1E3           3434    SP9:    ACALL   DELTST1         ;CHECK FOR DELIMITER
0CD9 5003           3435            JNC     SP9A            ;EXIT IF A DELIMITER
                    3436            ;
0CDB B4A834         3437            CJNE    A,#T_ELSE,SS
                    3438            ;
0CDE 22             3439    SP9A:   RET                     ;EXIT IF ELSE TOKEN
                    3440            ;
                    3441            ;**************************************************************
                    3442            ;
                    3443            ; P_E - Evaluate an expression in parens ( )
BASIC52E                                                                                                      PAGE 61

                    3444            ;
                    3445            ;**************************************************************
                    3446            ;
0CDF 7FE0           3447    P_E:    MOV     R7,#T_LPAR
0CE1 F141           3448            ACALL   WE
                    3449            ;
0CE3 7F29           3450    ERPAR:  MOV     R7,#')'         ;EAT A RIGHT PAREN
                    3451            ;
0CE5 D1D5           3452    EATC:   ACALL   GCI             ;GET THE CHARACTER
0CE7 B507D4         3453            CJNE    A,R7B0,SE0      ;ERROR IF NOT THE SAME
0CEA 22             3454            RET
                    3455            ;
                    3456            ;***************************************************************
                    3457            ;
0CEB                3458    S_ON:   ; ON Statement
                    3459            ;
                    3460            ;***************************************************************
                    3461            ;
0CEB D18E           3462            ACALL   ONE             ;GET THE EXPRESSION
0CED D1D5           3463            ACALL   GCI             ;GET THE NEXT CHARACTER
0CEF B48304         3464            CJNE    A,#T_GOTO,C0
0CF2 91FD           3465            ACALL   C1              ;EAT THE COMMAS
0CF4 4172           3466            AJMP    SF3             ;DO GOTO
                    3467            ;
0CF6 B49FC5         3468    C0:     CJNE    A,#T_GOSB,SE0
0CF9 91FD           3469            ACALL   C1
0CFB 612F           3470            AJMP    SGS0            ;DO GOSUB
                    3471            ;
0CFD B90006         3472    C1:     CJNE    R1,#0,C2
0D00 F130           3473            ACALL   INTERR          ;GET THE LINE NUMBER
0D02 D1EC           3474            ACALL   FINDCR
0D04 41F4           3475            AJMP    RL1             ;FINISH UP THIS LINE
                    3476            ;
0D06 7F2C           3477    C2:     MOV     R7,#','
0D08 D1EE           3478            ACALL   FINDC
0D0A B42CB1         3479            CJNE    A,#',',SE0      ;ERROR IF NOT A COMMA
0D0D 19             3480            DEC     R1
0D0E D1D7           3481            ACALL   GCI1            ;BUMP PAST COMMA
0D10 80EB           3482            SJMP    C1
                    3483            ;
0D12 D1BF           3484    SS:     ACALL   S_C             ;SEE IF A STRING
0D14 4005           3485            JC      SA              ;NO STRING IF CARRY IS SET
0D16 1206BF         3486            LCALL   UPRNT           ;PUT POINTER IN DPTR
0D19 813F           3487            AJMP    SP2             ;SEE IF MORE
                    3488            ;
0D1B F143           3489    SA:     ACALL   EXPRB           ;MUST BE AN EXPRESSION
0D1D 7448           3490            MOV     A,#72
0D1F B51600         3491            CJNE    A,PHEAD,SA1     ;CHECK PHEAD POSITION
0D22 5002           3492    SA1:    JNC     SA2
0D24 913C           3493            ACALL   SP0             ;FORCE A CRLF
0D26 303714         3494    SA2:    JNB     HMODE,S13       ;HEX MODE?
0D29 121202         3495            CALL    FCMP            ;SEE IF TOS IS < 0FFFH
0D2C 400F           3496            JC      S13             ;EXIT IF GREATER
0D2E 12138F         3497            CALL    AABS            ;GET THE SIGN
0D31 7007           3498            JNZ     OOPS            ;WASTE IF NEGATIVE
0D33 D190           3499            ACALL   IFIXL
0D35 121985         3500            CALL    FP_BASE11       ;PRINT HEXMODE
0D38 813F           3501            AJMP    SP2
BASIC52E                                                                                                      PAGE 62

0D3A 1213A1         3502    OOPS:   CALL    ANEG            ;MAKE IT NEGATIVE
                    3503            ;
0D3D 12197D         3504    S13:    CALL    FP_BASE7        ;DO FP OUTPUT
0D40 7401           3505            MOV     A,#1            ;OUTPUT A SPACE
0D42 8157           3506            AJMP    SP7
                    3507            ;
                    3508            ;***************************************************************
                    3509            ;
                    3510            ; ANU -  Get variable name from text - set carry if not found
                    3511            ;        if succeeds returns variable in R7:R6
                    3512            ;        R6 = 0 if no digit in name
                    3513            ;
                    3514            ;***************************************************************
                    3515            ;
0D44 D1CB           3516    ANU:    ACALL   IGC             ;INCREMENT AND GET CHARACTER
0D46 121FED         3517            LCALL   DIGIT_CHECK     ;CHECK FOR DIGIT
0D49 400C           3518            JC      AL2             ;EXIT IF VALID DIGIT
0D4B B45F01         3519            CJNE    A,#'_',AL       ;SEE IF A _
0D4E 22             3520            RET
                    3521            ;
0D4F B44100         3522    AL:     CJNE    A,#'A',AL1      ;IS IT AN ASCII A?
0D52 4004           3523    AL1:    JC      AL3             ;EXIT IF CARRY IS SET
0D54 B45B00         3524            CJNE    A,#'Z'+1,AL2    ;IS IT LESS THAN AN ASCII Z
0D57 B3             3525    AL2:    CPL     C               ;FLIP CARRY
0D58 22             3526    AL3:    RET
                    3527            ;
0D59 30D53E         3528    SD01:   JNB     F0,VAR2
                    3529            ;
0D5C 901761         3530    SD0:    MOV     DPTR,#E6X
0D5F 810E           3531            AJMP    EK
                    3532            ;
0D61 D2D5           3533    SDIMX:  SETB    F0              ;SAYS DOING A DIMENSION
0D63 8002           3534            SJMP    VAR1
                    3535            ;
0D65 C2D5           3536    VAR:    CLR     F0              ;SAYS DOING A VARIABLE
                    3537            ;
0D67 D1CD           3538    VAR1:   ACALL   GC              ;GET THE CHARACTER
0D69 B14F           3539            ACALL   AL              ;CHECK FOR ALPHA
0D6B 5004           3540            JNC     VAR11           ;ERROR IF IN DIM
0D6D 20D5EC         3541            JB      F0,SD0
0D70 22             3542            RET
0D71 FF             3543    VAR11:  MOV     R7,A            ;SAVE ALPHA CHARACTER
0D72 E4             3544            CLR     A               ;ZERO IN CASE OF FAILURE
0D73 FD             3545            MOV     R5,A            ;SAVE IT
                    3546            ;
0D74 FE             3547    VY:     MOV     R6,A
0D75 B144           3548            ACALL   ANU             ;CHECK FOR ALPHA OR NUMBER
0D77 4007           3549            JC      VX              ;EXIT IF NO ALPHA OR NUM
                    3550            ;
0D79 CF             3551            XCH     A,R7
0D7A 2D             3552            ADD     A,R5            ;NUMBER OF CHARACTERS IN ALPHABET
0D7B CF             3553            XCH     A,R7            ;PUT IT BACK
0D7C 7D1A           3554            MOV     R5,#26          ;FOR THE SECOND TIME AROUND
0D7E 80F4           3555            SJMP    VY
                    3556            ;
0D80 C215           3557    VX:     CLR     LINEB           ;TELL EDITOR A VARIABLE IS DECLARED
0D82 B4E02F         3558            CJNE    A,#T_LPAR,V4    ;SEE IF A LEFT PAREN
                    3559            ;
BASIC52E                                                                                                      PAGE 63

0D85 430680         3560            ORL     R6B0,#80H       ;SET BIT 7 TO SIGINIFY MATRIX
0D88 120619         3561            CALL    F_VAR           ;FIND THE VARIABLE
0D8B C002           3562            PUSH    R2B0            ;SAVE THE LOCATION
0D8D C000           3563            PUSH    R0B0
0D8F 50C8           3564            JNC     SD01            ;DEFAULT IF NOT IN TABLE
0D91 20D528         3565            JB      F0,SDI          ;NO DEFAULT FOR DIMENSION
0D94 790A           3566            MOV     R1,#10
0D96 7B00           3567            MOV     R3,#0
0D98 B1CC           3568            ACALL   D_CHK
                    3569            ;
0D9A D197           3570    VAR2:   ACALL   PAREN_INT       ;EVALUATE INTEGER IN PARENS
0D9C BB00BD         3571            CJNE    R3,#0,SD0       ;ERROR IF R3<>0
0D9F D082           3572            POP     DPL             ;GET VAR FOR LOOKUP
0DA1 D083           3573            POP     DPH
0DA3 E0             3574            MOVX    A,@DPTR         ;GET DIMENSION
0DA4 14             3575            DEC     A               ;BUMP OFFSET
0DA5 99             3576            SUBB    A,R1            ;A MUST BE > R1
0DA6 40B4           3577            JC      SD0
0DA8 1205C0         3578            LCALL   DECDP2          ;BUMP POINTER TWICE
0DAB 510D           3579            ACALL   VARB            ;CALCULATE THE BASE
                    3580            ;
0DAD C9             3581    X3120:  XCH     A,R1            ;SWAP R2:R0, R3:R1
0DAE C8             3582            XCH     A,R0
0DAF C9             3583            XCH     A,R1
0DB0 CB             3584            XCH     A,R3
0DB1 CA             3585            XCH     A,R2
0DB2 CB             3586            XCH     A,R3
0DB3 22             3587            RET
                    3588            ;
0DB4 20D5A5         3589    V4:     JB      F0,SD0          ;ERROR IF NO LPAR FOR DIM
0DB7 120619         3590            LCALL   F_VAR           ;GET SCALAR VARIABLE
0DBA C3             3591            CLR     C
0DBB 22             3592            RET
                    3593            ;
0DBC D197           3594    SDI:    ACALL   PAREN_INT       ;EVALUATE PAREN EXPRESSION
0DBE BB009B         3595            CJNE    R3,#0,SD0       ;ERROR IF NOT ZERO
0DC1 D000           3596            POP     R0B0            ;SET UP R2:R0
0DC3 D002           3597            POP     R2B0
0DC5 B1CC           3598            ACALL   D_CHK           ;DO DIM
0DC7 D1C6           3599            ACALL   C_TST           ;CHECK FOR COMMA
0DC9 5096           3600            JNC     SDIMX           ;LOOP IF COMMA
0DCB 22             3601            RET                     ;RETURN IF NO COMMA
                    3602            ;
0DCC 09             3603    D_CHK:  INC     R1              ;BUMP FOR TABLE LOOKUP
0DCD E9             3604            MOV     A,R1
0DCE 608C           3605            JZ      SD0             ;ERROR IF 0FFFFH
0DD0 FC             3606            MOV     R4,A            ;SAVE FOR LATER
0DD1 900108         3607            MOV     DPTR,#MT_ALL    ;GET MATRIX ALLOCATION
0DD4 510D           3608            ACALL   VARB            ;DO THE CALCULATION
0DD6 AF83           3609            MOV     R7,DPH          ;SAVE MATRIX ALLOCATION
0DD8 AE82           3610            MOV     R6,DPL
0DDA 900106         3611            MOV     DPTR,#ST_ALL    ;SEE IF TOO MUCH MEMORY TAKEN
0DDD 1215B0         3612            CALL    FUL1            ;ST_ALL SHOULD BE > R3:R1
0DE0 900108         3613            MOV     DPTR,#MT_ALL    ;SAVE THE NEW MATRIX POINTER
0DE3 120605         3614            CALL    S31DP
0DE6 8882           3615            MOV     DPL,R0          ;GET VARIABLE ADDRESS
0DE8 8A83           3616            MOV     DPH,R2
0DEA EC             3617            MOV     A,R4            ;DIMENSION SIZE
BASIC52E                                                                                                      PAGE 64

0DEB F0             3618            MOVX    @DPTR,A         ;SAVE IT
0DEC 1205C0         3619            CALL    DECDP2          ;SAVE TARGET ADDRESS
                    3620            ;
0DEF EF             3621    R76S:   MOV     A,R7
0DF0 F0             3622            MOVX    @DPTR,A
0DF1 A3             3623            INC     DPTR
0DF2 EE             3624            MOV     A,R6            ;ELEMENT SIZE
0DF3 F0             3625            MOVX    @DPTR,A
0DF4 22             3626            RET                     ;R2:R0 STILL HAS SYMBOL TABLE ADDRESS
                    3627            ;
                    3628            ;***************************************************************
                    3629            ;
                    3630            ; The statement action routine - INPUT
                    3631            ;
                    3632            ;***************************************************************
                    3633            ;
0DF5 D1A9           3634    SINPUT: ACALL   CPS             ;PRINT STRING IF THERE
                    3635            ;
0DF7 D1C6           3636            ACALL   C_TST           ;CHECK FOR A COMMA
0DF9 5007           3637            JNC     IN2A            ;NO CRLF
0DFB 913C           3638            ACALL   SP0             ;DO A CRLF
                    3639            ;
0DFD 7D3F           3640    IN2:    MOV     R5,#'?'         ;OUTPUT A ?
0DFF 120711         3641            CALL    TEROT
                    3642            ;
0E02 D222           3643    IN2A:   SETB    INP_B           ;DOING INPUT
0E04 1206D8         3644            CALL    INLINE          ;INPUT THE LINE
0E07 C222           3645            CLR     INP_B
0E09 750F00         3646            MOV     TEMP5,#HIGH IBUF
0E0C 750E07         3647            MOV     TEMP4,#LOW IBUF
                    3648            ;
0E0F D1BF           3649    IN3:    ACALL   S_C             ;SEE IF A STRING
0E11 400D           3650            JC      IN3A            ;IF CARRY IS SET, NO STRING
0E13 B1AD           3651            ACALL   X3120           ;FLIP THE ADDRESSES
0E15 AB0F           3652            MOV     R3,TEMP5
0E17 A90E           3653            MOV     R1,TEMP4
0E19 319D           3654            ACALL   SSOOP
0E1B D1C6           3655            ACALL   C_TST           ;SEE IF MORE TO DO
0E1D 50DE           3656            JNC     IN2
0E1F 22             3657            RET
                    3658            ;
0E20 12184D         3659    IN3A:   CALL    DTEMP           ;GET THE USER LOCATION
0E23 121957         3660            CALL    GET_NUM         ;GET THE USER SUPPLIED NUMBER
0E26 7018           3661            JNZ     IN5             ;ERROR IF NOT ZERO
0E28 121854         3662            CALL    TEMPD           ;SAVE THE DATA POINTER
0E2B F101           3663            ACALL   VAR_ER          ;GET THE VARIABLE
0E2D F1D1           3664            ACALL   XPOP            ;SAVE THE VARIABLE
0E2F 12184D         3665            CALL    DTEMP           ;GET DPTR BACK FROM VAR_ER
0E32 D1C6           3666            ACALL   C_TST           ;SEE IF MORE TO DO
0E34 4013           3667            JC      IN6             ;EXIT IF NO COMMA
0E36 E0             3668            MOVX    A,@DPTR         ;GET INPUT TERMINATOR
0E37 B42C06         3669            CJNE    A,#',',IN5      ;IF NOT A COMMA DO A CR AND TRY AGAIN
0E3A A3             3670            INC     DPTR            ;BUMP PAST COMMA AND READ NEXT VALUE
0E3B 121854         3671            CALL    TEMPD
0E3E 80CF           3672            SJMP    IN3
                    3673            ;
0E40 9000F3         3674    IN5:    MOV     DPTR,#IAN       ;PRINT INPUT A NUMBER
0E43 1206AD         3675            CALL    CRP             ;DO A CR, THEN, PRINT FROM ROM
BASIC52E                                                                                                      PAGE 65

0E46 021844         3676            LJMP    CC1             ;TRY IT AGAIN
                    3677            ;
0E49 E0             3678    IN6:    MOVX    A,@DPTR
0E4A B40D01         3679            CJNE    A,#CR,EIGP
0E4D 22             3680            RET
                    3681            ;
0E4E 90036D         3682    EIGP:   MOV     DPTR,#EIG
0E51 1206AD         3683            CALL    CRP             ;PRINT THE MESSAGE AND EXIT
0E54 813C           3684            AJMP    SP0             ;EXIT WITH A CRLF
                    3685            ;
                    3686            ;***************************************************************
                    3687            ;
0E56                3688    SOT:    ; On timer interrupt
                    3689            ;
                    3690            ;***************************************************************
                    3691            ;
0E56 D185           3692            ACALL   TWO             ;GET THE NUMBERS
0E58 8B4B           3693            MOV     SP_H,R3
0E5A 894C           3694            MOV     SP_L,R1
0E5C 900126         3695            MOV     DPTR,#TIV       ;SAVE THE NUMBER
0E5F D210           3696            SETB    OTS
0E61 A1EF           3697            AJMP    R76S            ;EXIT
                    3698            ;
                    3699            ;
                    3700            ;***************************************************************
                    3701            ;
0E63                3702    SCALL:  ; Call a user rountine
                    3703            ;
                    3704            ;***************************************************************
                    3705            ;
0E63 F130           3706            ACALL   INTERR          ;CONVERT INTEGER
0E65 BA000A         3707            CJNE    R2,#0,S_C_1     ;SEE IF TRAP
0E68 E8             3708            MOV     A,R0
0E69 20E706         3709            JB      ACC.7,S_C_1
0E6C 28             3710            ADD     A,R0
0E6D 904100         3711            MOV     DPTR,#4100H
0E70 F582           3712            MOV     DPL,A
                    3713            ;
0E72 316C           3714    S_C_1:  ACALL   AC1             ;JUMP TO USER PROGRAM
0E74 53D0E7         3715            ANL     PSW,#11100111B  ;BACK TO BANK 0
0E77 22             3716            RET                     ;EXIT
                    3717            ;
                    3718            ;**************************************************************
                    3719            ;
0E78                3720    THREE:  ; Save value for timer function
                    3721            ;
                    3722            ;**************************************************************
                    3723            ;
0E78 D18E           3724            ACALL   ONE             ;GET THE FIRST INTEGER
0E7A 12167B         3725            CALL    CBIAS           ;BIAS FOR TIMER LOAD
0E7D 8B40           3726            MOV     T_HH,R3
0E7F 8941           3727            MOV     T_LL,R1
0E81 7F2C           3728            MOV     R7,#','         ;WASTE A COMMA
0E83 91E5           3729            ACALL   EATC            ;FALL THRU TO TWO
                    3730            ;
                    3731            ;**************************************************************
                    3732            ;
0E85                3733    TWO:    ; Get two values seperated by a comma off the stack
BASIC52E                                                                                                      PAGE 66

                    3734            ;
                    3735            ;**************************************************************
                    3736            ;
0E85 F143           3737            ACALL   EXPRB
0E87 7F2C           3738            MOV     R7,#','         ;WASTE THE COMMA
0E89 F141           3739            ACALL   WE
0E8B 0214A1         3740            JMP     TWOL            ;EXIT
                    3741            ;
                    3742            ;*************************************************************
                    3743            ;
0E8E                3744    ONE:    ; Evaluate an expression and get an integer
                    3745            ;
                    3746            ;*************************************************************
                    3747            ;
0E8E F143           3748            ACALL   EXPRB           ;EVALUATE EXPERSSION
                    3749            ;
0E90 121223         3750    IFIXL:  CALL    IFIX            ;INTEGERS IN R3:R1
0E93 E9             3751            MOV     A,R1
0E94 22             3752            RET
                    3753            ;
                    3754            ;
                    3755            ;*************************************************************
                    3756            ;
0E95                3757    I_PI:   ; Increment text pointer then get an integer
                    3758            ;
                    3759            ;*************************************************************
                    3760            ;
0E95 D1D7           3761            ACALL   GCI1            ;BUMP TEXT, THEN GET INTEGER
                    3762            ;
0E97                3763    PAREN_INT:; Get an integer in parens ( )
                    3764            ;
0E97 91DF           3765            ACALL   P_E
0E99 80F5           3766            SJMP    IFIXL
                    3767            ;
0E9B 851383         3768    DP_B:   MOV     DPH,BOFAH
0E9E 851482         3769            MOV     DPL,BOFAL
0EA1 22             3770            RET
                    3771            ;
0EA2 850A83         3772    DP_T:   MOV     DPH,TXAH
0EA5 850882         3773            MOV     DPL,TXAL
0EA8 22             3774            RET
                    3775            ;
0EA9 D1CD           3776    CPS:    ACALL   GC              ;GET THE CHARACTER
0EAB B42273         3777            CJNE    A,#'"',NOPASS   ;EXIT IF NO STRING
0EAE D1A2           3778            ACALL   DP_T            ;GET TEXT POINTER
0EB0 A3             3779            INC     DPTR            ;BUMP PAST "
0EB1 7C22           3780            MOV     R4,#'"'
0EB3 1206C3         3781            CALL    PN0             ;DO THE PRINT
0EB6 A3             3782            INC     DPTR            ;GO PAST QUOTE
0EB7 C3             3783            CLR     C               ;PASSED TEST
                    3784            ;
0EB8 85830A         3785    T_DP:   MOV     TXAH,DPH        ;TEXT POINTER GETS DPTR
0EBB 858208         3786            MOV     TXAL,DPL
0EBE 22             3787            RET
                    3788            ;
                    3789            ;*************************************************************
                    3790            ;
0EBF                3791    S_C:    ; Check for a string
BASIC52E                                                                                                      PAGE 67

                    3792            ;
                    3793            ;*************************************************************
                    3794            ;
0EBF D1CD           3795            ACALL   GC              ;GET THE CHARACTER
0EC1 B4245D         3796            CJNE    A,#'$',NOPASS   ;SET CARRY IF NOT A STRING
0EC4 21E7           3797            AJMP    IST_CAL         ;CLEAR CARRY, CALCULATE OFFSET
                    3798            ;
                    3799            ;
                    3800            ;
                    3801            ;**************************************************************
                    3802            ;
0EC6 D1CD           3803    C_TST:  ACALL   GC              ;GET A CHARACTER
0EC8 B42C56         3804            CJNE    A,#',',NOPASS   ;SEE IF A COMMA
                    3805            ;
                    3806            ;***************************************************************
                    3807            ;
                    3808            ;GC AND GCI - GET A CHARACTER FROM TEXT (NO BLANKS)
                    3809            ;             PUT CHARACTER IN THE ACC
                    3810            ;
                    3811            ;***************************************************************
                    3812            ;
0ECB D1D7           3813    IGC:    ACALL   GCI1            ;BUMP POINTER, THEN GET CHARACTER
                    3814            ;
0ECD D2D3           3815    GC:     SETB    RS0             ;USE BANK 1
0ECF 8AA0           3816            MOV     P2,R2           ;SET UP PORT 2
0ED1 E2             3817            MOVX    A,@R0           ;GET EXTERNAL BYTE
0ED2 C2D3           3818            CLR     RS0             ;BACK TO BANK 0
0ED4 22             3819            RET                     ;EXIT
                    3820            ;
0ED5 D1CD           3821    GCI:    ACALL   GC
                    3822            ;
                    3823            ; This routine bumps txa by one and always clears the carry
                    3824            ;
0ED7 D2D3           3825    GCI1:   SETB    RS0             ;BANK 1
0ED9 08             3826            INC     R0              ;BUMP TXA
0EDA B80001         3827            CJNE    R0,#0,GCI11
0EDD 0A             3828            INC     R2
0EDE C2D3           3829    GCI11:  CLR     RS0
0EE0 22             3830            RET                     ;EXIT
                    3831            ;
                    3832            ;**************************************************************
                    3833            ;
                    3834            ; Check delimiters
                    3835            ;
                    3836            ;**************************************************************
                    3837            ;
0EE1 D1CD           3838    DELTST: ACALL   GC              ;GET A CHARACTER
0EE3 B40D02         3839    DELTST1:CJNE    A,#CR,DT1       ;SEE IF A CR
0EE6 E4             3840            CLR     A
0EE7 22             3841            RET
                    3842            ;
0EE8 B43A36         3843    DT1:    CJNE    A,#':',NOPASS   ;SET CARRY IF NO MATCH
                    3844            ;
0EEB 22             3845    L_RET:  RET
                    3846            ;
                    3847            ;
                    3848            ;***************************************************************
                    3849            ;
BASIC52E                                                                                                      PAGE 68

                    3850            ; FINDC - Find the character in R7, update TXA
                    3851            ;
                    3852            ;***************************************************************
                    3853            ;
0EEC 7F0D           3854    FINDCR: MOV     R7,#CR          ;KILL A STATEMENT LINE
                    3855            ;
0EEE D1E1           3856    FINDC:  ACALL   DELTST
0EF0 50F9           3857            JNC     L_RET
                    3858            ;
0EF2 B50701         3859            CJNE    A,R7B0,FNDCL2   ;MATCH?
0EF5 22             3860            RET
                    3861            ;
0EF6 D1D7           3862    FNDCL2: ACALL   GCI1
0EF8 80F4           3863            SJMP    FINDC           ;LOOP
                    3864            ;
0EFA D1D7           3865    FNDCL3: ACALL   GCI1
                    3866            ;
0EFC D1E1           3867    WCR:    ACALL   DELTST          ;WASTE UNTIL A "REAL" CR
0EFE 70FA           3868            JNZ     FNDCL3
0F00 22             3869            RET
                    3870            ;
                    3871            ;***************************************************************
                    3872            ;
                    3873            ; VAR_ER - Check for a variable, exit if error
                    3874            ;
                    3875            ;***************************************************************
                    3876            ;
0F01 B165           3877    VAR_ER: ACALL   VAR
0F03 802D           3878            SJMP    INTERR1
                    3879            ;
                    3880            ;
                    3881            ;***************************************************************
                    3882            ;
                    3883            ; S_D0 - The Statement Action Routine DO
                    3884            ;
                    3885            ;***************************************************************
                    3886            ;
0F05 71BD           3887    S_DO:   ACALL   CSC             ;FINISH UP THE LINE
0F07 7C03           3888            MOV     R4,#DTYPE       ;TYPE FOR STACK
0F09 7135           3889            ACALL   SGS1            ;SAVE ON STACK
0F0B 0113           3890            AJMP    ILOOP           ;EXIT
                    3891            ;
                    3892            ;***************************************************************
                    3893            ;
                    3894            ; CLN_UP - Clean up the end of a statement, see if at end of
                    3895            ;          file, eat character and line count after CR
                    3896            ;
                    3897            ;***************************************************************
                    3898            ;
0F0D B43A02         3899    C_2:    CJNE    A,#':',C_1      ;SEE IF A TERMINATOR
0F10 C1D7           3900            AJMP    GCI1            ;BUMP POINTER AND EXIT, IF SO
                    3901            ;
0F12 B4A86D         3902    C_1:    CJNE    A,#T_ELSE,EP5
0F15 D1FC           3903            ACALL   WCR             ;WASTE UNTIL A CR
                    3904            ;
0F17 D1CD           3905    CLN_UP: ACALL   GC              ;GET THE CHARACTER
0F19 B40DF1         3906            CJNE    A,#CR,C_2       ;SEE IF A CR
0F1C D1CB           3907            ACALL   IGC             ;GET THE NEXT CHARACTER
BASIC52E                                                                                                      PAGE 69

0F1E B40102         3908            CJNE    A,#EOF,B_TXA    ;SEE IF TERMINATOR
                    3909            ;
0F21 D3             3910    NOPASS: SETB    C
0F22 22             3911            RET
                    3912            ;
0F23 C508           3913    B_TXA:  XCH     A,TXAL          ;BUMP TXA BY THREE
0F25 2403           3914            ADD     A,#3
0F27 C508           3915            XCH     A,TXAL
0F29 10D701         3916            JBC     CY,B_TXA1
0F2C 22             3917            RET
0F2D 050A           3918    B_TXA1: INC     TXAH
0F2F 22             3919            RET
                    3920            ;
                    3921            ;***************************************************************
                    3922            ;
                    3923            ;         Get an INTEGER from the text
                    3924            ;         sets CARRY if not found
                    3925            ;         returns the INTGER value in DPTR and R2:R0
                    3926            ;         returns the terminator in ACC
                    3927            ;
                    3928            ;***************************************************************
                    3929            ;
0F30 F135           3930    INTERR: ACALL   INTGER          ;GET THE INTEGER
0F32 404E           3931    INTERR1:JC      EP5             ;ERROR IF NOT FOUND
0F34 22             3932            RET                     ;EXIT IF FOUND
                    3933            ;
0F35 D1A2           3934    INTGER: ACALL   DP_T
0F37 121981         3935            CALL    FP_BASE9        ;CONVERT THE INTEGER
0F3A D1B8           3936            ACALL   T_DP
0F3C 8A83           3937            MOV     DPH,R2          ;PUT THE RETURNED VALUE IN THE DPTR
0F3E 8882           3938            MOV     DPL,R0
                    3939            ;
0F40 22             3940    ITRET:  RET                     ;EXIT
                    3941            ;
                    3942            ;
0F41 91E5           3943    WE:     ACALL   EATC            ;WASTE THE CHARACTER
                    3944            ;
                    3945            ; Fall thru to evaluate the expression
                    3946            ;
                    3947            ;***************************************************************
                    3948            ;
                    3949            ; EXPRB - Evaluate an expression
                    3950            ;
                    3951            ;***************************************************************
                    3952            ;
0F43 7ACF           3953    EXPRB:  MOV     R2,#LOW OPBOL   ;BASE PRECEDENCE
                    3954            ;
0F45 C002           3955    EP1:    PUSH    R2B0            ;SAVE OPERATOR PRECEDENCE
0F47 C224           3956            CLR     ARGF            ;RESET STACK DESIGNATOR
                    3957            ;
0F49 E581           3958    EP2:    MOV     A,SP            ;GET THE STACK POINTER
0F4B 240C           3959            ADD     A,#12           ;NEED AT LEAST 12 BYTES
0F4D 5003           3960            JNC     EP21
0F4F 02188C         3961            LJMP    E1XX2
0F52 E509           3962    EP21:   MOV     A,ASTKA         ;GET THE ARG STACK
0F54 9438           3963            SUBB    A,#LOW TM_TOP+12;NEED 12 BYTES ALSO
0F56 5003           3964            JNC     EP22
0F58 02121A         3965            LJMP    E4YY
BASIC52E                                                                                                      PAGE 70

0F5B 202413         3966    EP22:   JB      ARGF,EP4        ;MUST BE AN OPERATOR, IF SET
0F5E B165           3967            ACALL   VAR             ;IS THE VALUE A VARIABLE?
0F60 500D           3968            JNC     EP3             ;PUT VARIABLE ON STACK
                    3969            ;
0F62 F1EF           3970            ACALL   CONST           ;IS THE VALUE A NUMERIC CONSTANT?
0F64 500B           3971            JNC     EP4             ;IF SO, CONTINUE, IF NOT, SEE WHAT
0F66 D1CD           3972            CALL    GC              ;GET THE CHARACTER
0F68 B4E006         3973            CJNE    A,#T_LPAR,EP4   ;SEE IF A LEFT PAREN
0F6B 74D0           3974            MOV     A,#(LOW OPBOL+1)
0F6D 8055           3975            SJMP    XLPAR           ;PROCESS THE LEFT PAREN
                    3976            ;
0F6F F1DD           3977    EP3:    ACALL   PUSHAS          ;SAVE VAR ON STACK
                    3978            ;
0F71 D1CD           3979    EP4:    ACALL   GC              ;GET THE OPERATOR
                    3980            ;
0F73 B4E000         3981            CJNE    A,#T_LPAR,EP41  ;IS IT AN OPERATOR
0F76 500E           3982    EP41:   JNC     XOP             ;PROCESS OPERATOR
0F78 B4B000         3983            CJNE    A,#T_UOP,EP42   ;IS IT A UNARY OPERATOR
0F7B 503B           3984    EP42:   JNC     XBILT           ;PROCESS UNARY (BUILT IN) OPERATOR
0F7D D002           3985            POP     R2B0            ;GET BACK PREVIOUS OPERATOR PRECEDENCE
0F7F 2024BE         3986            JB      ARGF,ITRET      ;OK IF ARG FLAG IS SET
                    3987            ;
0F82 C3             3988    EP5:    CLR     C               ;NO RECOVERY
0F83 021887         3989            LJMP    E1XX1
                    3990            ;
                    3991            ; Process the operator
                    3992            ;
0F86 541F           3993    XOP:    ANL     A,#1FH          ;STRIP OFF THE TOKE BITS
0F88 202405         3994            JB      ARGF,XOP1       ;IF ARG FLAG IS SET, PROCESS
0F8B B4053C         3995            CJNE    A,#T_SUB-T_LPAR,XOP3
0F8E 7409           3996            MOV     A,#T_NEG-T_LPAR
                    3997            ;
0F90 24D0           3998    XOP1:   ADD     A,#LOW OPBOL+1  ;BIAS THE TABLE
0F92 FA             3999            MOV     R2,A
0F93 900000         4000            MOV     DPTR,#00H
0F96 93             4001            MOVC    A,@A+DPTR       ;GET THE CURRENT PRECEDENCE
0F97 FC             4002            MOV     R4,A
0F98 D0E0           4003            POP     ACC             ;GET THE PREVIOUS PRECEDENCE
0F9A FD             4004            MOV     R5,A            ;SAVE THE PREVIOUS PRECEDENCE
0F9B 93             4005            MOVC    A,@A+DPTR       ;GET IT
0F9C B50404         4006            CJNE    A,R4B0,XOP11    ;SEE WHICH HAS HIGHER PRECEDENCE
0F9F B40C9E         4007            CJNE    A,#12,ITRET     ;SEE IF ANEG
0FA2 D3             4008            SETB    C
0FA3 509B           4009    XOP11:  JNC     ITRET           ;PROCESS NON-INCREASING PRECEDENCE
                    4010            ;
                    4011            ; Save increasing precedence
                    4012            ;
0FA5 C005           4013            PUSH    R5B0            ;SAVE OLD PRECEDENCE ADDRESS
0FA7 C002           4014            PUSH    R2B0            ;SAVE NEW PRECEDENCE ADDRESS
0FA9 D1D7           4015            ACALL   GCI1            ;EAT THE OPERATOR
0FAB F145           4016            ACALL   EP1             ;EVALUATE REMAINING EXPRESSION
0FAD D0E0           4017    XOP12:  POP     ACC
                    4018            ;
                    4019            ; R2 has the action address, now setup and perform operation
                    4020            ;
0FAF 900057         4021    XOP2:   MOV     DPTR,#OPTAB
0FB2 2430           4022            ADD     A,#LOW (NOT OPBOL)
0FB4 315C           4023            CALL    ISTA1           ;SET UP TO RETURN TO EP2
BASIC52E                                                                                                      PAGE 71

0FB6 E149           4024            AJMP    EP2             ;JUMP TO EVALUATE EXPRESSION
                    4025            ;
                    4026            ; Built-in operator processing
                    4027            ;
0FB8 D1D7           4028    XBILT:  ACALL   GCI1            ;EAT THE TOKEN
0FBA 2430           4029            ADD     A,#LOW (50H+LOW UOPBOL)
0FBC 2024C3         4030            JB      ARGF,EP5        ;XBILT MUST COME AFTER AN OPERATOR
0FBF B4EE00         4031            CJNE    A,#STP,XBILT1
0FC2 50EB           4032    XBILT1: JNC     XOP2
                    4033            ;
0FC4 C0E0           4034    XLPAR:  PUSH    ACC             ;PUT ADDRESS ON THE STACK
0FC6 91DF           4035            ACALL   P_E
0FC8 80E3           4036            SJMP    XOP12           ;PERFORM OPERATION
                    4037            ;
0FCA B403B5         4038    XOP3:   CJNE    A,#T_ADD-T_LPAR,EP5
0FCD D1D7           4039            ACALL   GCI1
0FCF E149           4040            AJMP    EP2             ;WASTE + SIGN
                    4041            ;
0FD1 B1AD           4042    XPOP:   ACALL   X3120           ;FLIP ARGS THEN POP
                    4043            ;
                    4044            ;***************************************************************
                    4045            ;
                    4046            ; POPAS - Pop arg stack and copy variable to R3:R1
                    4047            ;
                    4048            ;***************************************************************
                    4049            ;
0FD3 12124F         4050    POPAS:  LCALL   INC_ASTKA
0FD6 021472         4051            JMP     VARCOP          ;COPY THE VARIABLE
                    4052            ;
0FD9 7A01           4053    AXTAL:  MOV     R2,#HIGH CXTAL
0FDB 7813           4054            MOV     R0,#LOW CXTAL
                    4055            ;
                    4056            ; fall thru
                    4057            ;
                    4058            ;***************************************************************
                    4059            ;
0FDD                4060    PUSHAS: ; Push the Value addressed by R2:R0 onto the arg stack
                    4061            ;
                    4062            ;***************************************************************
                    4063            ;
0FDD 12120B         4064            CALL    DEC_ASTKA
0FE0 D224           4065            SETB    ARGF            ;SAYS THAT SOMTHING IS ON THE STACK
0FE2 021472         4066            LJMP    VARCOP
                    4067            ;
                    4068            ;
                    4069            ;***************************************************************
                    4070            ;
0FE5                4071    ST_A:   ; Store at expression
                    4072            ;
                    4073            ;***************************************************************
                    4074            ;
0FE5 D18E           4075            ACALL   ONE             ;GET THE EXPRESSION
0FE7 80EA           4076            SJMP    POPAS           ;SAVE IT
                    4077            ;
                    4078            ;
                    4079            ;***************************************************************
                    4080            ;
0FE9                4081    LD_A:   ; Load at expression
BASIC52E                                                                                                      PAGE 72

                    4082            ;
                    4083            ;***************************************************************
                    4084            ;
0FE9 D18E           4085            ACALL   ONE             ;GET THE EXPRESSION
0FEB B1AD           4086            ACALL   X3120           ;FLIP ARGS
0FED 80EE           4087            SJMP    PUSHAS
                    4088            ;
                    4089            ;***************************************************************
                    4090            ;
0FEF                4091    CONST:  ; Get a constant fron the text
                    4092            ;
                    4093            ;***************************************************************
                    4094            ;
0FEF D1CD           4095            CALL    GC              ;FIRST SEE IF LITERAL
0FF1 B4D131         4096            CJNE    A,#T_ASC,C0C    ;SEE IF ASCII TOKEN
0FF4 D1CB           4097            CALL    IGC             ;GET THE CHARACTER AFTER TOKEN
0FF6 B42405         4098            CJNE    A,#'$',CN0      ;SEE IF A STRING
                    4099            ;
0FF9 511E           4100    CNX:    CALL    CSY             ;CALCULATE IT
0FFB 0213C0         4101            JMP     AXBYTE1         ;SAVE IT ON THE STACK
                    4102    ;
                    4103    ;*****************************************************************************
                    4104    ;****** Correct ASC(x) bug ***************************************************
                    4105    ;****** Wulf 5 ***************************************************************
                    4106    ;
                    4107    ;
0FFE 30E71B         4108    CN0:    jnb     acc.7,cn0t      ;jump if possibly ascii
1001 900175         4109            mov     dptr,#toktab
1004 FE             4110            mov     r6,a            ;save search token
1005 F4             4111    cn0t1:  cpl     a
1006 6013           4112            jz      cn0t4           ;jump if EOT
1008 E4             4113            clr     a
1009 93             4114            movc    a,@a+dptr       ;read token from token table
100A A3             4115            inc     dptr
100B B506F7         4116            cjne    a,r6b0,cn0t1    ;jump if wrong entry
                    4117            ;
100E FD             4118            mov     r5,a            ;save search token
100F E4             4119            clr     a
1010 93             4120    cn0t2:  movc    a,@a+dptr
1011 FE             4121            mov     r6,a            ;save first ascii of token text
                    4122            ;
1012 E4             4123    cn0t3:  clr     a
1013 93             4124            movc    a,@a+dptr
1014 A3             4125            inc     dptr
1015 30E7FA         4126            jnb     acc.7,cn0t3     ;jump if possibly ascii
                    4127            ;
1018 6D             4128            xrl     a,r5
1019 60F5           4129            jz      cn0t2           ;jump if same search token again
                    4130            ;
101B EE             4131    cn0t4:  mov     a,r6            ;get saved ascii
101C 1214B1         4132    CN0t:   CALL    TWO_R2          ;PUT IT ON THE STACK
                    4133    ;
                    4134    ;****** continue with original code: *****************************************
                    4135    ;
101F 120ED7         4136            CALL    GCI1            ;BUMP THE POINTER
1022 020CE3         4137            JMP     ERPAR           ;WASTE THE RIGHT PAREN
                    4138            ;
1025 120EA2         4139    C0C:    CALL    DP_T            ;GET THE TEXT POINTER
BASIC52E                                                                                                      PAGE 73

1028 121957         4140            CALL    GET_NUM         ;GET THE NUMBER
102B B4FF02         4141            CJNE    A,#0FFH,C1C     ;SEE IF NO NUMBER
102E D3             4142            SETB    C
102F 22             4143    C2C:    RET
                    4144            ;
1030 7006           4145    C1C:    JNZ     FPTST
1032 C3             4146            CLR     C
1033 D224           4147            SETB    ARGF
                    4148            ;
1035 020EB8         4149    C3C:    JMP     T_DP
                    4150            ;
1038 540B           4151    FPTST:  ANL     A,#00001011B    ;CHECK FOR ERROR
103A 60F3           4152            JZ      C2C             ;EXIT IF ZERO
                    4153            ;
                    4154            ; Handle the error condition
                    4155            ;
103C 901751         4156            MOV     DPTR,#E2X       ;DIVIDE BY ZERO
103F 30E003         4157            JNB     ACC.0,FPTST1    ;UNDERFLOW
1042 901804         4158            MOV     DPTR,#E7X
1045 30E103         4159    FPTST1: JNB     ACC.1,FPTS      ;OVERFLOW
1048 901F89         4160            MOV     DPTR,#E11X
                    4161            ;
104B 02188F         4162    FPTS:   JMP     ERROR
                    4163            ;
                    4164            ;***************************************************************
                    4165            ;
                    4166            ; The Command action routine - LIST
                    4167            ;
                    4168            ;***************************************************************
                    4169            ;
104E 120C19         4170    CLIST:  CALL    NUMC            ;SEE IF TO LINE PORT
1051 71CB           4171            ACALL   FSTK            ;PUT 0FFFFH ON THE STACK
1053 120F35         4172            CALL    INTGER          ;SEE IF USER SUPPLIES LN
1056 E4             4173            CLR     A               ;LN = 0 TO START
1057 FB             4174            MOV     R3,A
1058 F9             4175            MOV     R1,A
1059 4014           4176            JC      CL1             ;START FROM ZERO
                    4177            ;
105B 121854         4178            CALL    TEMPD           ;SAVE THE START ADDTESS
105E 120ED5         4179            CALL    GCI             ;GET THE CHARACTER AFTER LIST
1061 B4E507         4180            CJNE    A,#T_SUB,CLIST1 ;CHECK FOR TERMINATION ADDRESS '-'
1064 514F           4181            ACALL   INC_ASTKA       ;WASTE 0FFFFH
1066 120F30         4182            LCALL   INTERR          ;GET TERMINATION ADDRESS
1069 91B4           4183            ACALL   TWO_EY          ;PUT TERMINATION ON THE ARG STACK
106B AB0F           4184    CLIST1: MOV     R3,TEMP5        ;GET THE START ADDTESS
106D A90E           4185            MOV     R1,TEMP4
                    4186            ;
106F 12058C         4187    CL1:    CALL    GETLIN          ;GET THE LINE NO IN R3:R1
1072 601E           4188            JZ      CL3             ;RET IF AT END
                    4189            ;
1074 1135           4190    CL2:    ACALL   C3C             ;SAVE THE ADDRESS
1076 A3             4191            INC     DPTR            ;POINT TO LINE NUMBER
1077 D152           4192            ACALL   PMTOP1          ;PUT LINE NUMBER ON THE STACK
1079 5108           4193            ACALL   CMPLK           ;COMPARE LN TO END ADDRESS
107B 4015           4194            JC      CL3             ;EXIT IF GREATER
107D 12078D         4195            CALL    BCK             ;CHECK FOR A CONTROL C
1080 510B           4196            ACALL   DEC_ASTKA       ;SAVE THE COMPARE ADDRESS
1082 120EA2         4197            CALL    DP_T            ;RESTORE ADDRESS
BASIC52E                                                                                                      PAGE 74

1085 11A3           4198            ACALL   UPPL            ;UN-PROCESS THE LINE
1087 1135           4199            ACALL   C3C             ;SAVE THE CR ADDRESS
1089 1194           4200            ACALL   CL6             ;PRINT IT
108B A3             4201            INC     DPTR            ;BUMP POINTER TO NEXT LINE
108C E0             4202            MOVX    A,@DPTR         ;GET LIN LENGTH
108D D5E0E4         4203            DJNZ    ACC,CL2         ;LOOP
1090 514F           4204            ACALL   INC_ASTKA       ;WASTE THE COMPARE BYTE
                    4205            ;
1092 E187           4206    CL3:    AJMP    CMND1           ;BACK TO COMMAND PROCESSOR
                    4207            ;
1094 900007         4208    CL6:    MOV     DPTR,#IBUF      ;PRINT IBUF
1097 1206C1         4209            CALL    PRNTCR          ;PRINT IT
109A 120EA2         4210            CALL    DP_T
                    4211            ;
109D 0206A5         4212    CL7:    JMP     CRLF
                    4213            ;
10A0 120579         4214    UPPL0:  LCALL   X31DP
                    4215            ;
                    4216            ;***************************************************************
                    4217            ;
                    4218            ;UPPL - UN PREPROCESS A LINE ADDRESSED BY DPTR INTO IBUF
                    4219            ;       RETURN SOURCE ADDRESS OF CR IN DPTR ON RETURN
                    4220            ;
                    4221            ;***************************************************************
                    4222            ;
10A3 7B00           4223    UPPL:   MOV     R3,#HIGH IBUF   ;POINT R3 AT HIGH IBUF
10A5 7907           4224            MOV     R1,#LOW IBUF    ;POINT R1 AT IBUF
10A7 A3             4225            INC     DPTR            ;SKIP OVER LINE LENGTH
                    4226    ;
                    4227    ;*****************************************************************************
                    4228    ;****** Elektor 1 Patch ******************************************************
                    4229    ;
                    4230    ;       ACALL   C3C             ;SAVE THE DPTR (DP_T)
                    4231    ;       CALL    L20DPI          ;PUT LINE NUMBER IN R2:R0
                    4232    ;       CALL    FP_BASE8        ;CONVERT R2:R0 TO INTEGER
                    4233    ;       CALL    DP_T
                    4234    ;       INC     DPTR            ;BUMP DPTR PAST THE LINE NUMBER
                    4235    ;
                    4236    ;****** Proper code starts here: *********************************************
                    4237    ;
10A8 120573         4238            lcall   L20DPI          ;PUT LINE NUMBER IN R2:R0
10AB 12197F         4239            lcall   FP_BASE8        ;CONVERT R2:R0 TO INTEGER
                    4240    ;
                    4241    ;****** continue with original code: *****************************************
                    4242    ;
10AE B90D00         4243    UPP0:   CJNE    R1,#LOW IBUF+6,UPP01
10B1 4022           4244    UPP01:  JC      UPP91           ;PUT SPACES IN TEXT
10B3 A3             4245            INC     DPTR            ;BUMP PAST LN HIGH
10B4 E0             4246            MOVX    A,@DPTR         ;GET USER TEXT
10B5 FE             4247            MOV     R6,A            ;SAVE A IN R6 FOR TOKE COMPARE
10B6 20E724         4248            JB      ACC.7,UPP1      ;IF TOKEN, PROCESS
10B9 B42000         4249            CJNE    A,#20H,UPP02    ;TRAP THE USER TOKENS
10BC 5003           4250    UPP02:  JNC     UPP03
10BE B40D1C         4251            CJNE    A,#CR,UPP1      ;DO IT IF NOT A CR
10C1 B42209         4252    UPP03:  CJNE    A,#'"',UPP9     ;SEE IF STRING
10C4 3121           4253            ACALL   UPP7            ;SAVE IT
10C6 3123           4254    UPP04:  ACALL   UPP8            ;GET THE NEXT CHARACTER AND SAVE IT
10C8 B422FB         4255            CJNE    A,#'"',UPP04    ;LOOP ON QUOTES
BASIC52E                                                                                                      PAGE 75

10CB 80E1           4256            SJMP    UPP0
                    4257            ;
10CD B43A09         4258    UPP9:   CJNE    A,#':',UPP1A    ;PUT A SPACE IN DELIMITER
10D0 311F           4259            ACALL   UPP7A
10D2 EE             4260            MOV     A,R6
10D3 3121           4261            ACALL   UPP7
10D5 311F           4262    UPP91:  ACALL   UPP7A
10D7 80D5           4263            SJMP    UPP0
                    4264            ;
10D9 3125           4265    UPP1A:  ACALL   UPP81           ;SAVE THE CHARACTER, UPDATE POINTER
10DB 80D1           4266            SJMP    UPP0            ;EXIT IF A CR, ELSE LOOP
                    4267            ;
10DD 1135           4268    UPP1:   ACALL   C3C             ;SAVE THE TEXT POINTER
10DF A22D           4269            MOV     C,XBIT
10E1 92D5           4270            MOV     F0,C            ;SAVE XBIT IN F0
10E3 900175         4271    UPP11:  MOV     DPTR,#TOKTAB    ;POINT AT TOKEN TABLE
10E6 30D503         4272            JNB     F0,UPP2
10E9 122078         4273            LCALL   2078H           ;SET UP DPTR FOR LOOKUP
                    4274            ;
10EC E4             4275    UPP2:   CLR     A               ;ZERO A FOR LOOKUP
10ED 93             4276            MOVC    A,@A+DPTR       ;GET TOKEN
10EE A3             4277            INC     DPTR            ;ADVANCE THE TOKEN POINTER
10EF B4FF05         4278            CJNE    A,#0FFH,UP_2    ;SEE IF DONE
10F2 10D5EE         4279            JBC     F0,UPP11        ;NOW DO NORMAL TABLE
10F5 E187           4280            AJMP    CMND1           ;EXIT IF NOT FOUND
                    4281            ;
10F7 B506F2         4282    UP_2:   CJNE    A,R6B0,UPP2     ;LOOP UNTIL THE SAME
                    4283            ;
10FA B4B000         4284    UP_3:   CJNE    A,#T_UOP,UP_4
10FD 5002           4285    UP_4:   JNC     UPP3
10FF 311F           4286            ACALL   UPP7A           ;PRINT THE SPACE IF OK
                    4287            ;
1101 E4             4288    UPP3:   CLR     A               ;DO LOOKUP
1102 93             4289            MOVC    A,@A+DPTR
1103 20E707         4290            JB      ACC.7,UPP4      ;EXIT IF DONE, ELSE SAVE
1106 6005           4291            JZ      UPP4            ;DONE IF ZERO
1108 3121           4292            ACALL   UPP7            ;SAVE THE CHARACTER
110A A3             4293            INC     DPTR
110B 80F4           4294            SJMP    UPP3            ;LOOP
                    4295            ;
110D 120EA2         4296    UPP4:   CALL    DP_T            ;GET IT BACK
1110 EE             4297            MOV     A,R6            ;SEE IF A REM TOKEN
1111 6496           4298            XRL     A,#T_REM
1113 7004           4299            JNZ     UPP42
1115 3123           4300    UPP41:  ACALL   UPP8
1117 80FC           4301            SJMP    UPP41
1119 5093           4302    UPP42:  JNC     UPP0            ;START OVER AGAIN IF NO TOKEN
111B 311F           4303            ACALL   UPP7A           ;PRINT THE SPACE IF OK
111D 808F           4304            SJMP    UPP0            ;DONE
                    4305            ;
111F 7420           4306    UPP7A:  MOV     A,#' '          ;OUTPUT A SPACE
                    4307            ;
1121 C144           4308    UPP7:   AJMP    PPL91           ;SAVE A
                    4309            ;
1123 A3             4310    UPP8:   INC     DPTR
1124 E0             4311            MOVX    A,@DPTR
1125 B40DF9         4312    UPP81:  CJNE    A,#CR,UPP7
1128 C130           4313            AJMP    PPL71
BASIC52E                                                                                                      PAGE 76

                    4314            ;
                    4315            ;**************************************************************
                    4316            ;
                    4317            ; This table contains all of the floating point constants
                    4318            ;
                    4319            ; The constants in ROM are stored "backwards" from the way
                    4320            ; basic normally treats floating point numbers. Instead of
                    4321            ; loading from the exponent and decrementing the pointer,
                    4322            ; ROM constants pointers load from the most significant
                    4323            ; digits and increment the pointers. This is done to 1) make
                    4324            ; arg stack loading faster and 2) compensate for the fact that
                    4325            ; no decrement data pointer instruction exsist.
                    4326            ;
                    4327            ; The numbers are stored as follows:
                    4328            ;
                    4329            ; BYTE X+5    = MOST SIGNIFICANT DIGITS IN BCD
                    4330            ; BYTE X+4    = NEXT MOST SIGNIFICANT DIGITS IN BCD
                    4331            ; BYTE X+3    = NEXT LEAST SIGNIFICANT DIGITS IN BCD
                    4332            ; BYTE X+2    = LEAST SIGNIFICANT DIGITS IN BCD
                    4333            ; BYTE X+1    = SIGN OF THE ABOVE MANTISSA 0 = +, 1 = -
                    4334            ; BYTE X      = EXPONENT IN TWO'S COMPLEMENT BINARY
                    4335            ;               ZERO EXPONENT = THE NUMBER ZERO
                    4336            ;
                    4337            ;**************************************************************
                    4338            ;
112A 7E             4339    ATTAB:  DB      128-2           ; ARCTAN LOOKUP
112B 00             4340            DB      00H
112C 57             4341            DB      57H
112D 22             4342            DB      22H
112E 66             4343            DB      66H
112F 28             4344            DB      28H
                    4345            ;
1130 7F             4346            DB      128-1
1131 01             4347            DB      01H
1132 37             4348            DB      37H
1133 57             4349            DB      57H
1134 16             4350            DB      16H
1135 16             4351            DB      16H
                    4352            ;
1136 7F             4353            DB      128-1
1137 00             4354            DB      00H
1138 14             4355            DB      14H
1139 96             4356            DB      96H
113A 90             4357            DB      90H
113B 42             4358            DB      42H
                    4359            ;
113C 7F             4360            DB      128-1
113D 01             4361            DB      01H
113E 40             4362            DB      40H
113F 96             4363            DB      96H
1140 28             4364            DB      28H
1141 75             4365            DB      75H
                    4366            ;
1142 80             4367            DB      128
1143 00             4368            DB      00H
1144 64             4369            DB      64H
1145 62             4370            DB      62H
1146 65             4371            DB      65H
BASIC52E                                                                                                      PAGE 77

1147 10             4372            DB      10H
                    4373            ;
1148 80             4374            DB      128
1149 01             4375            DB      01H
114A 99             4376            DB      99H
114B 88             4377            DB      88H
114C 20             4378            DB      20H
114D 14             4379            DB      14H
                    4380            ;
114E 80             4381            DB      128
114F 00             4382            DB      00H
1150 51             4383            DB      51H
1151 35             4384            DB      35H
1152 99             4385            DB      99H
1153 19             4386            DB      19H
                    4387            ;
1154 80             4388            DB      128
1155 01             4389            DB      01H
1156 45             4390            DB      45H
1157 31             4391            DB      31H
1158 33             4392            DB      33H
1159 33             4393            DB      33H
                    4394            ;
115A 81             4395            DB      129
115B 00             4396            DB      00H
115C 00             4397            DB      00H
115D 00             4398            DB      00H
115E 00             4399            DB      00H
115F 10             4400            DB      10H
                    4401            ;
1160 FF             4402            DB      0FFH            ;END OF TABLE
                    4403            ;
1161 81             4404    NTWO:   DB      129
1162 00             4405            DB      0
1163 00             4406            DB      0
1164 00             4407            DB      0
1165 00             4408            DB      0
1166 20             4409            DB      20H
                    4410    ;
                    4411    ;*****************************************************************************
                    4412    ;****** Use XTAL up to 47 MHz ************************************************
                    4413    ;****** Wulf 2 ***************************************************************
                    4414    ;
                    4415    ;TTIME: DB      128-4           ; CLOCK CALCULATION
                    4416    ;       DB      00H
                    4417    ;       DB      00H
                    4418    ;       DB      00H
                    4419    ;       DB      04H
                    4420    ;       DB      13H
                    4421    ;
1167 7B             4422    ttime:  db      128-5           ;New clock calculation for timer 0 in
1168 00             4423            db      00H             ;16 bit mode
1169 42             4424            db      42H
116A 60             4425            db      60H
116B 27             4426            db      27H
116C 16             4427            db      16H
                    4428    ;
                    4429    ;*****************************************************************************
BASIC52E                                                                                                      PAGE 78

                    4430    ;
                    4431            ;***************************************************************
                    4432            ;
                    4433            ; COSINE - Add pi/2 to stack, then fall thru to SIN
                    4434            ;
                    4435            ;***************************************************************
                    4436            ;
116D 3192           4437    ACOS:   ACALL   POTWO           ;PUT PI/2 ON THE STACK
116F F141           4438            ACALL   AADD            ;TOS = TOS+PI/2
                    4439            ;
                    4440            ;***************************************************************
                    4441            ;
                    4442            ; SINE - use taylor series to calculate sin function
                    4443            ;
                    4444            ;***************************************************************
                    4445            ;
1171 917F           4446    ASIN:   ACALL   PIPI            ;PUT PI ON THE STACK
1173 31B5           4447            ACALL   RV              ;REDUCE THE VALUE
1175 E546           4448            MOV     A,MT2           ;CALCULATE THE SIGN
1177 5401           4449            ANL     A,#01H          ;SAVE LSB
1179 6245           4450            XRL     MT1,A           ;SAVE SIGN IN MT1
117B 912C           4451            ACALL   CSTAKA          ;NOW CONVERT TO ONE QUADRANT
117D 3192           4452            ACALL   POTWO
117F 5108           4453            ACALL   CMPLK           ;DO COMPARE
1181 4004           4454            JC      ASIN1
1183 917F           4455            ACALL   PIPI
1185 F11C           4456            ACALL   ASUB
1187 718F           4457    ASIN1:  ACALL   AABS
1189 9016CE         4458            MOV     DPTR,#SINTAB    ;SET UP LOOKUP TABLE
118C 319B           4459            ACALL   POLYC           ;CALCULATE THE POLY
118E 31DA           4460            ACALL   STRIP
1190 21FC           4461            AJMP    SIN0
                    4462            ;
                    4463            ; Put PI/2 on the stack
                    4464            ;
1192 917F           4465    POTWO:  ACALL   PIPI            ;PUT PI ON THE STACK, NOW DIVIDE
                    4466            ;
1194 901161         4467    DBTWO:  MOV     DPTR,#NTWO
1197 9133           4468            ACALL   PUSHC
                    4469            ;MOV    A,#2            ;BY TWO
                    4470            ;ACALL  TWO_R2
1199 810A           4471            AJMP    ADIV
                    4472            ;
                    4473            ;*************************************************************
                    4474            ;
119B                4475    POLYC:  ; Expand a power series to calculate a polynomial
                    4476            ;
                    4477            ;*************************************************************
                    4478            ;
119B 912A           4479            ACALL   CSTAKA2         ;COPY THE STACK
119D 31B0           4480            ACALL   AMUL            ;SQUARE THE STACK
119F 9148           4481            ACALL   POP_T1          ;SAVE X*X
11A1 9133           4482            ACALL   PUSHC           ;PUT CONSTANT ON STACK
                    4483            ;
11A3 914F           4484    POLY1:  ACALL   PUSH_T1         ;PUT COMPUTED VALUE ON STACK
11A5 31B0           4485            ACALL   AMUL            ;MULTIPLY CONSTANT AND COMPUTED VALUE
11A7 9133           4486            ACALL   PUSHC           ;PUT NEXT CONSTANT ON STACK
11A9 F141           4487            ACALL   AADD            ;ADD IT TO THE OLD VALUE
BASIC52E                                                                                                      PAGE 79

11AB E4             4488            CLR     A               ;CHECK TO SEE IF DONE
11AC 93             4489            MOVC    A,@A+DPTR
11AD B4FFF3         4490            CJNE    A,#0FFH,POLY1   ;LOOP UNTIL DONE
                    4491            ;
11B0 121975         4492    AMUL:   LCALL   FP_BASE3
11B3 0138           4493            AJMP    FPTST
                    4494            ;
                    4495            ;*************************************************************
                    4496            ;
11B5                4497    RV:     ; Reduce a value for Trig and A**X functions
                    4498            ;
                    4499            ; value = (value/x - INT(value/x)) * x
                    4500            ;
                    4501            ;*************************************************************
                    4502            ;
11B5 916C           4503            ACALL   C2_T2           ;COPY TOS TO T2
11B7 910A           4504            ACALL   ADIV            ;TOS = TOS/TEMP2
11B9 718F           4505            ACALL   AABS            ;MAKE THE TOS A POSITIVE NUMBER
11BB F545           4506            MOV     MT1,A           ;SAVE THE SIGN
11BD 912A           4507            ACALL   CSTAKA2         ;COPY THE STACK TWICE
11BF 5123           4508            ACALL   IFIX            ;PUT THE NUMBER IN R3:R1
11C1 C003           4509            PUSH    R3B0            ;SAVE R3
11C3 8946           4510            MOV     MT2,R1          ;SAVE THE LS BYTE IN MT2
11C5 716D           4511            ACALL   AINT            ;MAKE THE TOS AN INTEGER
11C7 F11C           4512            ACALL   ASUB            ;TOS = TOS/T2 - INT(TOS/T2)
11C9 9156           4513            ACALL   P_T2            ;TOS = T2
11CB 31B0           4514            ACALL   AMUL            ;TOS = T2*(TOS/T2 - INT(TOS/T2)
11CD D003           4515            POP     R3B0            ;RESTORE R3
11CF 22             4516            RET                     ;EXIT
                    4517            ;
                    4518            ;**************************************************************
                    4519            ;
                    4520            ; TAN
                    4521            ;
                    4522            ;**************************************************************
                    4523            ;
11D0 912C           4524    ATAN:   ACALL   CSTAKA          ;DUPLACATE STACK
11D2 3171           4525            ACALL   ASIN            ;TOS = SIN(X)
11D4 915A           4526            ACALL   SWAP_ASTKA      ;TOS = X
11D6 316D           4527            ACALL   ACOS            ;TOS = COS(X)
11D8 810A           4528            AJMP    ADIV            ;TOS = SIN(X)/COS(X)
                    4529            ;
11DA 5153           4530    STRIP:  ACALL   SETREG          ;SETUP R0
11DC 7B01           4531            MOV     R3,#1           ;LOOP COUNT
11DE 6181           4532            AJMP    AI11            ;WASTE THE LSB
                    4533            ;
                    4534            ;************************************************************
                    4535            ;
                    4536            ; ARC TAN
                    4537            ;
                    4538            ;************************************************************
                    4539            ;
11E0 718F           4540    AATAN:  ACALL   AABS
11E2 F545           4541            MOV     MT1,A           ;SAVE THE SIGN
11E4 5153           4542            ACALL   SETREG          ;GET THE EXPONENT
11E6 247F           4543            ADD     A,#7FH          ;BIAS THE EXPONENT
11E8 922A           4544            MOV     UBIT,C          ;SAVE CARRY STATUS
11EA 5002           4545            JNC     AATAN1          ;SEE IF > 1
BASIC52E                                                                                                      PAGE 80

11EC 517C           4546            ACALL   RECIP           ;IF > 1, TAKE RECIP
11EE 90112A         4547    AATAN1: MOV     DPTR,#ATTAB     ;SET UP TO CALCULATE THE POLY
11F1 319B           4548            ACALL   POLYC           ;CALCULATE THE POLY
11F3 302A06         4549            JNB     UBIT,SIN0       ;JUMP IF NOT SET
11F6 71A1           4550            ACALL   ANEG            ;MAKE X POLY NEGATIVE
11F8 3192           4551            ACALL   POTWO           ;SUBTRACT PI/2
11FA F141           4552            ACALL   AADD
                    4553            ;
11FC E545           4554    SIN0:   MOV     A,MT1           ;GET THE SIGN
11FE 6019           4555            JZ      SRT
1200 61A1           4556            AJMP    ANEG
                    4557            ;
                    4558            ;*************************************************************
                    4559            ;
                    4560            ; FCOMP - COMPARE 0FFFFH TO TOS
                    4561            ;
                    4562            ;*************************************************************
                    4563            ;
1202 912C           4564    FCMP:   ACALL   CSTAKA          ;COPY THE STACK
1204 71CB           4565            ACALL   FSTK            ;MAKE THE TOS = 0FFFFH
1206 915A           4566            ACALL   SWAP_ASTKA      ;NOW COMPARE IS 0FFFFH - X
                    4567            ;
1208 021973         4568    CMPLK:  JMP     FP_BASE2        ;DO THE COMPARE
                    4569            ;
                    4570            ;*************************************************************
                    4571            ;
120B                4572    DEC_ASTKA:      ;Push ARG STACK and check for underflow
                    4573            ;
                    4574            ;*************************************************************
                    4575            ;
120B 74FA           4576            MOV     A,#-FPSIZ
120D 2509           4577            ADD     A,ASTKA
120F B43200         4578            CJNE    A,#LOW TM_TOP+6,DEC_ASTKA1
1212                4579    DEC_ASTKA1:
1212 4006           4580            JC      E4YY
1214 F509           4581            MOV     ASTKA,A
1216 F9             4582            MOV     R1,A
1217 7B01           4583            MOV     R3,#ASTKAH
                    4584            ;
1219 22             4585    SRT:    RET
                    4586            ;
121A 90037B         4587    E4YY:   MOV     DPTR,#EXA
121D 014B           4588            AJMP    FPTS            ;ARG STACK ERROR
                    4589            ;
                    4590            ;
121F 9133           4591    AXTAL3: ACALL   PUSHC           ;PUSH CONSTANT, THEN MULTIPLY
1221 31B0           4592            ACALL   AMUL
                    4593            ;
                    4594            ; Fall thru to IFIX
                    4595            ;
                    4596            ;***************************************************************
                    4597            ;
1223                4598    IFIX:   ; Convert a floating point number to an integer, put in R3:R1
                    4599            ;
                    4600            ;***************************************************************
                    4601            ;
1223 E4             4602            CLR     A               ;RESET THE START
1224 FB             4603            MOV     R3,A
BASIC52E                                                                                                      PAGE 81

1225 F9             4604            MOV     R1,A
1226 A809           4605            MOV     R0,ASTKA        ;GET THE ARG STACK
1228 75A001         4606            MOV     P2,#ASTKAH
122B E2             4607            MOVX    A,@R0           ;READ EXPONENT
122C C3             4608            CLR     C
122D 9481           4609            SUBB    A,#81H          ;BASE EXPONENT
122F FC             4610            MOV     R4,A            ;SAVE IT
1230 18             4611            DEC     R0              ;POINT AT SIGN
1231 E2             4612            MOVX    A,@R0           ;GET THE SIGN
1232 7056           4613            JNZ     SQ_ERR          ;ERROR IF NEGATIVE
1234 4019           4614            JC      INC_ASTKA       ;EXIT IF EXPONENT IS < 81H
1236 0C             4615            INC     R4              ;ADJUST LOOP COUNTER
1237 E8             4616            MOV     A,R0            ;BUMP THE POINTER REGISTER
1238 9405           4617            SUBB    A,#FPSIZ-1
123A F8             4618            MOV     R0,A
                    4619            ;
123B 08             4620    I2:     INC     R0              ;POINT AT DIGIT
123C E2             4621            MOVX    A,@R0           ;GET DIGIT
123D C4             4622            SWAP    A               ;FLIP
123E 121983         4623            CALL    FP_BASE10       ;ACCUMULATE
1241 4047           4624            JC      SQ_ERR
1243 DC02           4625            DJNZ    R4,I21
1245 8008           4626            SJMP    INC_ASTKA
1247 E2             4627    I21:    MOVX    A,@R0           ;GET DIGIT
1248 121983         4628            CALL    FP_BASE10
124B 403D           4629            JC      SQ_ERR
124D DCEC           4630            DJNZ    R4,I2
                    4631            ;
                    4632            ;************************************************************
                    4633            ;
124F                4634    INC_ASTKA:      ; Pop the ARG STACK and check for overflow
                    4635            ;
                    4636            ;************************************************************
                    4637            ;
124F 7406           4638            MOV     A,#FPSIZ        ;NUMBER TO POP
1251 8001           4639            SJMP    SETREG1
                    4640            ;
1253 E4             4641    SETREG: CLR     A               ;DON'T POP ANYTHING
1254 A809           4642    SETREG1:MOV     R0,ASTKA
1256 7A01           4643            MOV     R2,#ASTKAH
1258 8AA0           4644            MOV     P2,R2
125A 28             4645            ADD     A,R0
125B 40BD           4646            JC      E4YY
125D F509           4647            MOV     ASTKA,A
125F E2             4648            MOVX    A,@R0
1260 22             4649    A_D:    RET
                    4650            ;
                    4651            ;************************************************************
                    4652            ;
                    4653            ; EBIAS - Bias a number for E to the X calculations
                    4654            ;
                    4655            ;************************************************************
                    4656            ;
1261 9143           4657    EBIAS:  ACALL   PUSH_ONE
1263 31B5           4658            ACALL   RV
1265 BB0022         4659            CJNE    R3,#00H,SQ_ERR  ;ERROR IF R3 <> 0
1268 916C           4660            ACALL   C2_T2           ;TEMP 2 GETS FRACTIONS
126A 514F           4661            ACALL   INC_ASTKA
BASIC52E                                                                                                      PAGE 82

126C 9148           4662            ACALL   POP_T1
126E 9143           4663            ACALL   PUSH_ONE
                    4664            ;
1270 E546           4665    AELP:   MOV     A,MT2
1272 700E           4666            JNZ     AEL1
                    4667            ;
1274 E545           4668            MOV     A,MT1
1276 60E8           4669            JZ      A_D
1278 90011E         4670            MOV     DPTR,#FPT2-1
127B F0             4671            MOVX    @DPTR,A         ;MAKE THE FRACTIONS NEGATIVE
                    4672            ;
127C 9143           4673    RECIP:  ACALL   PUSH_ONE
127E 915A           4674            ACALL   SWAP_ASTKA
1280 810A           4675            AJMP    ADIV
                    4676            ;
1282 1546           4677    AEL1:   DEC     MT2
1284 914F           4678            ACALL   PUSH_T1
1286 31B0           4679            ACALL   AMUL
1288 80E6           4680            SJMP    AELP
                    4681            ;
128A 0209BD         4682    SQ_ERR: LJMP    E3XX            ;LINK TO BAD ARG
                    4683            ;
                    4684            ;************************************************************
                    4685            ;
                    4686            ; SQUARE ROOT
                    4687            ;
                    4688            ;************************************************************
                    4689            ;
128D 718F           4690    ASQR:   ACALL   AABS            ;GET THE SIGN
128F 70F9           4691            JNZ     SQ_ERR          ;ERROR IF NEGATIVE
1291 916C           4692            ACALL   C2_T2           ;COPY VARIABLE TO T2
1293 9148           4693            ACALL   POP_T1          ;SAVE IT IN T1
1295 7819           4694            MOV     R0,#LOW FPT1
1297 E2             4695            MOVX    A,@R0           ;GET EXPONENT
1298 6024           4696            JZ      SQR41           ;EXIT IF ZERO
129A 2480           4697            ADD     A,#128          ;BIAS THE EXPONENT
129C 5005           4698            JNC     SQR1            ;SEE IF < 80H
129E 03             4699            RR      A
129F 547F           4700            ANL     A,#127
12A1 8007           4701            SJMP    SQR2
                    4702            ;
12A3 F4             4703    SQR1:   CPL     A               ;FLIP BITS
12A4 04             4704            INC     A
12A5 03             4705            RR      A
12A6 547F           4706            ANL     A,#127          ;STRIP MSB
12A8 F4             4707            CPL     A
12A9 04             4708            INC     A
                    4709            ;
12AA 2480           4710    SQR2:   ADD     A,#128          ;BIAS EXPONENT
12AC F2             4711            MOVX    @R0,A           ;SAVE IT
                    4712            ;
                    4713            ; NEWGUESS = ( X/OLDGUESS + OLDGUESS) / 2
                    4714            ;
12AD 9156           4715    SQR4:   ACALL   P_T2            ;TOS = X
12AF 914F           4716            ACALL   PUSH_T1         ;PUT NUMBER ON STACK
12B1 910A           4717            ACALL   ADIV            ;TOS = X/GUESS
12B3 914F           4718            ACALL   PUSH_T1         ;PUT ON AGAIN
12B5 F141           4719            ACALL   AADD            ;TOS = X/GUESS + GUESS
BASIC52E                                                                                                      PAGE 83

12B7 3194           4720            ACALL   DBTWO           ;TOS = ( X/GUESS + GUESS ) / 2
12B9 711C           4721            ACALL   TEMP_COMP       ;SEE IF DONE
12BB 30D5EF         4722            JNB     F0,SQR4
                    4723            ;
12BE 814F           4724    SQR41:  AJMP    PUSH_T1         ;PUT THE ANSWER ON THE STACK
                    4725            ;
                    4726            ;*************************************************************
                    4727            ;
                    4728            ; NATURAL LOG
                    4729            ;
                    4730            ;*************************************************************
                    4731            ;
12C0 718F           4732    ALN:    ACALL   AABS            ;MAKE SURE THAT NUM IS POSITIVE
12C2 70C6           4733            JNZ     SQ_ERR          ;ERROR IF NOT
12C4 F546           4734            MOV     MT2,A           ;CLEAR FOR LOOP
12C6 08             4735            INC     R0              ;POINT AT EXPONENT
12C7 E2             4736            MOVX    A,@R0           ;READ THE EXPONENT
12C8 60C0           4737            JZ      SQ_ERR          ;ERROR IF EXPONENT IS ZERO
12CA B48100         4738            CJNE    A,#81H,ALN1     ;SEE IF NUM >= 1
12CD 922A           4739    ALN1:   MOV     UBIT,C          ;SAVE CARRY STATUS
12CF 4002           4740            JC      ALNL            ;TAKE RECIP IF >= 1
12D1 517C           4741            ACALL   RECIP
                    4742            ;
                    4743            ; Loop to reduce
                    4744            ;
12D3 912C           4745    ALNL:   ACALL   CSTAKA          ;COPY THE STACK FOR COMPARE
12D5 9143           4746            ACALL   PUSH_ONE        ;COMPARE NUM TO ONE
12D7 5108           4747            ACALL   CMPLK
12D9 501D           4748            JNC     ALNO            ;EXIT IF DONE
12DB 5153           4749            ACALL   SETREG          ;GET THE EXPONENT
12DD 2485           4750            ADD     A,#85H          ;SEE HOW BIG IT IS
12DF 500E           4751            JNC     ALN11           ;BUMP BY EXP(11) IF TOO SMALL
12E1 9130           4752            ACALL   PLNEXP          ;PUT EXP(1) ON STACK
12E3 7401           4753            MOV     A,#1            ;BUMP COUNT
                    4754            ;
12E5 2546           4755    ALNE:   ADD     A,MT2
12E7 40A1           4756            JC      SQ_ERR
12E9 F546           4757            MOV     MT2,A
12EB 31B0           4758            ACALL   AMUL            ;BIAS THE NUMBER
12ED 80E4           4759            SJMP    ALNL
                    4760            ;
12EF 9017F2         4761    ALN11:  MOV     DPTR,#EXP11     ;PUT EXP(11) ON STACK
12F2 9133           4762            ACALL   PUSHC
12F4 740B           4763            MOV     A,#11
12F6 80ED           4764            SJMP    ALNE
                    4765            ;
12F8 916C           4766    ALNO:   ACALL   C2_T2           ;PUT NUM IN TEMP 2
12FA 9143           4767            ACALL   PUSH_ONE        ;TOS = 1
12FC F11C           4768            ACALL   ASUB            ;TOS = X - 1
12FE 9156           4769            ACALL   P_T2            ;TOS = X
1300 9143           4770            ACALL   PUSH_ONE        ;TOS = 1
1302 F141           4771            ACALL   AADD            ;TOS = X + 1
1304 910A           4772            ACALL   ADIV            ;TOS = (X-1)/(X+1)
1306 9016A9         4773            MOV     DPTR,#LNTAB     ;LOG TABLE
1309 319B           4774            ACALL   POLYC
130B A3             4775            INC     DPTR            ;POINT AT LN(10)
130C 9133           4776            ACALL   PUSHC
130E 31B0           4777            ACALL   AMUL
BASIC52E                                                                                                      PAGE 84

1310 E546           4778            MOV     A,MT2           ;GET THE COUNT
1312 91B1           4779            ACALL   TWO_R2          ;PUT IT ON THE STACK
1314 F11C           4780            ACALL   ASUB            ;INT - POLY
1316 31DA           4781            ACALL   STRIP
1318 302A74         4782            JNB     UBIT,AABS
                    4783            ;
131B 22             4784    LN_D:   RET
                    4785            ;
                    4786            ;*************************************************************
                    4787            ;
131C                4788    TEMP_COMP:      ; Compare FPTEMP1 to TOS, FPTEMP1 gets TOS
                    4789            ;
                    4790            ;*************************************************************
                    4791            ;
131C 914F           4792            ACALL   PUSH_T1         ;SAVE THE TEMP
131E 915A           4793            ACALL   SWAP_ASTKA      ;TRADE WITH THE NEXT NUMBER
1320 912C           4794            ACALL   CSTAKA          ;COPY THE STACK
1322 9148           4795            ACALL   POP_T1          ;SAVE THE NEW NUMBER
1324 021973         4796            JMP     FP_BASE2        ;DO THE COMPARE
                    4797            ;
1327 9130           4798    AETOX:  ACALL   PLNEXP          ;EXP(1) ON TOS
1329 915A           4799            ACALL   SWAP_ASTKA      ;X ON TOS
                    4800            ;
132B                4801    AEXP:   ;EXPONENTIATION
                    4802            ;
132B 5161           4803            ACALL   EBIAS           ;T1=BASE,T2=FRACTIONS,TOS=INT MULTIPLIED
132D 90011F         4804            MOV     DPTR,#FPT2      ;POINT AT FRACTIONS
1330 E0             4805            MOVX    A,@DPTR         ;READ THE EXP OF THE FRACTIONS
1331 60E8           4806            JZ      LN_D            ;EXIT IF ZERO
1333 9156           4807            ACALL   P_T2            ;TOS = FRACTIONS
1335 914F           4808            ACALL   PUSH_T1         ;TOS = BASE
1337 5153           4809            ACALL   SETREG          ;SEE IF BASE IS ZERO
1339 6002           4810            JZ      AEXP1
133B 51C0           4811            ACALL   ALN             ;TOS = LN(BASE)
133D 31B0           4812    AEXP1:  ACALL   AMUL            ;TOS = FRACTIONS * LN(BASE)
133F 9130           4813            ACALL   PLNEXP          ;TOS = EXP(1)
1341 915A           4814            ACALL   SWAP_ASTKA      ;TOS = FRACTIONS * LN(BASE)
1343 5161           4815            ACALL   EBIAS           ;T2 = FRACTIONS, TOS = INT MULTIPLIED
1345 754600         4816            MOV     MT2,#00H        ;NOW CALCULATE E**X
1348 9143           4817            ACALL   PUSH_ONE
134A 912C           4818            ACALL   CSTAKA
134C 9148           4819            ACALL   POP_T1          ;T1 = 1
                    4820            ;
134E 9156           4821    AEXL:   ACALL   P_T2            ;TOS = FRACTIONS
1350 31B0           4822            ACALL   AMUL            ;TOS = FRACTIONS * ACCUMLATION
1352 0546           4823            INC     MT2             ;DO THE DEMONIATOR
1354 E546           4824            MOV     A,MT2
1356 91B1           4825            ACALL   TWO_R2
1358 910A           4826            ACALL   ADIV
135A 912C           4827            ACALL   CSTAKA          ;SAVE THE ITERATION
135C 914F           4828            ACALL   PUSH_T1         ;NOW ACCUMLATE
135E F141           4829            ACALL   AADD            ;ADD ACCUMLATION
1360 711C           4830            ACALL   TEMP_COMP
1362 30D5E9         4831            JNB     F0,AEXL         ;LOOP UNTIL DONE
                    4832            ;
1365 514F           4833            ACALL   INC_ASTKA
1367 914F           4834            ACALL   PUSH_T1
1369 31B0           4835            ACALL   AMUL            ;LAST INT MULTIPLIED
BASIC52E                                                                                                      PAGE 85

                    4836            ;
136B 21B0           4837    MU1:    AJMP    AMUL            ;FIRST INT MULTIPLIED
                    4838            ;
                    4839            ;***************************************************************
                    4840            ;
                    4841            ; integer operator - INT
                    4842            ;
                    4843            ;***************************************************************
                    4844            ;
136D 5153           4845    AINT:   ACALL   SETREG          ;SET UP THE REGISTERS, CLEAR CARRY
136F 9481           4846            SUBB    A,#129          ;SUBTRACT EXPONENT BIAS
1371 5007           4847            JNC     AI1             ;JUMP IF ACC > 81H
                    4848            ;
                    4849            ; Force the number to be a zero
                    4850            ;
1373 514F           4851            ACALL   INC_ASTKA       ;BUMP THE STACK
                    4852            ;
1375 9004E0         4853    P_Z:    MOV     DPTR,#ZRO       ;PUT ZERO ON THE STACK
1378 8133           4854            AJMP    PUSHC
                    4855            ;
137A 9407           4856    AI1:    SUBB    A,#7
137C 5010           4857            JNC     AI3
137E F4             4858            CPL     A
137F 04             4859            INC     A
1380 FB             4860            MOV     R3,A
1381 18             4861    AI11:   DEC     R0              ;POINT AT SIGN
                    4862            ;
1382 18             4863    AI2:    DEC     R0              ;NOW AT LSB'S
1383 E2             4864            MOVX    A,@R0           ;READ BYTE
1384 54F0           4865            ANL     A,#0F0H         ;STRIP NIBBLE
1386 F2             4866            MOVX    @R0,A           ;WRITE BYTE
1387 DB01           4867            DJNZ    R3,AI21
1389 22             4868            RET
138A E4             4869    AI21:   CLR     A
138B F2             4870            MOVX    @R0,A           ;CLEAR THE LOCATION
138C DBF4           4871            DJNZ    R3,AI2
                    4872            ;
138E 22             4873    AI3:    RET                     ;EXIT
                    4874            ;
                    4875            ;***************************************************************
                    4876            ;
138F                4877    AABS:   ; Absolute value - Make sign of number positive
                    4878            ;                  return sign in ACC
                    4879            ;
                    4880            ;***************************************************************
                    4881            ;
138F 71A1           4882            ACALL   ANEG            ;CHECK TO SEE IF + OR -
1391 7019           4883            JNZ     ALPAR           ;EXIT IF NON ZERO, BECAUSE THE NUM IS
1393 F2             4884            MOVX    @R0,A           ;MAKE A POSITIVE SIGN
1394 22             4885            RET
                    4886            ;
                    4887            ;***************************************************************
                    4888            ;
1395                4889    ASGN:   ; Returns the sign of the number 1 = +, -1 = -
                    4890            ;
                    4891            ;***************************************************************
                    4892            ;
1395 514F           4893            ACALL   INC_ASTKA       ;POP STACK, GET EXPONENT
BASIC52E                                                                                                      PAGE 86

1397 60DC           4894            JZ      P_Z             ;EXIT IF ZERO
1399 18             4895            DEC     R0              ;BUMP TO SIGN
139A E2             4896            MOVX    A,@R0           ;GET THE SIGN
139B FF             4897            MOV     R7,A            ;SAVE THE SIGN
139C 9143           4898            ACALL   PUSH_ONE        ;PUT A ONE ON THE STACK
139E EF             4899            MOV     A,R7            ;GET THE SIGN
139F 600B           4900            JZ      ALPAR           ;EXIT IF ZERO
                    4901            ;
                    4902            ; Fall thru to ANEG
                    4903            ;
                    4904            ;***************************************************************
                    4905            ;
13A1                4906    ANEG:   ; Flip the sign of the number on the tos
                    4907            ;
                    4908            ;***************************************************************
                    4909            ;
13A1 5153           4910            ACALL   SETREG
13A3 18             4911            DEC     R0              ;POINT AT THE SIGN OF THE NUMBER
13A4 6006           4912            JZ      ALPAR           ;EXIT IF ZERO
13A6 E2             4913            MOVX    A,@R0
13A7 6401           4914            XRL     A,#01H          ;FLIP THE SIGN
13A9 F2             4915            MOVX    @R0,A
13AA 6401           4916            XRL     A,#01H          ;RESTORE THE SIGN
                    4917            ;
13AC 22             4918    ALPAR:  RET
                    4919            ;
                    4920            ;***************************************************************
                    4921            ;
13AD                4922    ACBYTE: ; Read the ROM
                    4923            ;
                    4924            ;***************************************************************
                    4925            ;
13AD 5123           4926            ACALL   IFIX            ;GET EXPRESSION
13AF 120579         4927            CALL    X31DP           ;PUT R3:R1 INTO THE DP
13B2 E4             4928            CLR     A
13B3 93             4929            MOVC    A,@A+DPTR
13B4 81B1           4930            AJMP    TWO_R2
                    4931            ;
                    4932            ;***************************************************************
                    4933            ;
13B6                4934    ADBYTE: ; Read internal memory
                    4935            ;
                    4936            ;***************************************************************
                    4937            ;
13B6 5123           4938            ACALL   IFIX            ;GET THE EXPRESSION
13B8 1209D5         4939            CALL    R3CK            ;MAKE SURE R3 = 0
13BB E7             4940            MOV     A,@R1
13BC 81B1           4941            AJMP    TWO_R2
                    4942            ;
                    4943            ;***************************************************************
                    4944            ;
13BE                4945    AXBYTE: ; Read external memory
                    4946            ;
                    4947            ;***************************************************************
                    4948            ;
13BE 5123           4949            ACALL   IFIX            ;GET THE EXPRESSION
13C0 8BA0           4950    AXBYTE1:MOV     P2,R3
13C2 E3             4951            MOVX    A,@R1
BASIC52E                                                                                                      PAGE 87

13C3 81B1           4952            AJMP    TWO_R2
                    4953            ;
                    4954            ;***************************************************************
                    4955            ;
                    4956            ; The relational operators - EQUAL                        (=)
                    4957            ;                            GREATER THAN                 (>)
                    4958            ;                            LESS THAN                    (<)
                    4959            ;                            GREATER THAN OR EQUAL        (>=)
                    4960            ;                            LESS THAN OR EQUAL           (<=)
                    4961            ;                            NOT EQUAL                    (<>)
                    4962            ;
                    4963            ;***************************************************************
                    4964            ;
13C5 5108           4965    AGT:    ACALL   CMPLK
13C7 72D5           4966            ORL     C,F0            ;SEE IF EITHER IS A ONE
13C9 40AA           4967    AGT1:   JC      P_Z
                    4968            ;
13CB 9013D0         4969    FSTK:   MOV     DPTR,#FS
13CE 8133           4970            AJMP    PUSHC
                    4971            ;
13D0 85             4972    FS:     DB      85H
13D1 00             4973            DB      00H
13D2 00             4974            DB      00H
13D3 50             4975            DB      50H
13D4 53             4976            DB      53H
13D5 65             4977            DB      65H
                    4978            ;
13D6 5108           4979    ALT:    ACALL   CMPLK
13D8 B3             4980    ALT1:   CPL     C
13D9 80EE           4981            SJMP    AGT1
                    4982            ;
13DB 5108           4983    AEQ:    ACALL   CMPLK
13DD A2D5           4984    AEQ1:   MOV     C,F0
13DF 80F7           4985            SJMP    ALT1
                    4986            ;
13E1 5108           4987    ANE:    ACALL   CMPLK
13E3 B2D5           4988            CPL     F0
13E5 80F6           4989            SJMP    AEQ1
                    4990            ;
13E7 5108           4991    AGE:    ACALL   CMPLK
13E9 80DE           4992            SJMP    AGT1
                    4993            ;
13EB 5108           4994    ALE:    ACALL   CMPLK
13ED 72D5           4995            ORL     C,F0
13EF 80E7           4996            SJMP    ALT1
                    4997            ;
                    4998            ;***************************************************************
                    4999            ;
13F1                5000    ARND:   ; Generate a random number
                    5001            ;
                    5002            ;***************************************************************
                    5003            ;
13F1 90010C         5004            MOV     DPTR,#RCELL     ;GET THE BINARY SEED
13F4 1205BA         5005            CALL    L31DPI
13F7 E9             5006            MOV     A,R1
13F8 C3             5007            CLR     C
13F9 13             5008            RRC     A
13FA F8             5009            MOV     R0,A
BASIC52E                                                                                                      PAGE 88

13FB 7406           5010            MOV     A,#6
13FD 13             5011            RRC     A
13FE 29             5012            ADD     A,R1
13FF C8             5013            XCH     A,R0
1400 3B             5014            ADDC    A,R3
1401 FA             5015            MOV     R2,A
1402 1582           5016            DEC     DPL             ;SAVE THE NEW SEED
1404 9124           5017            ACALL   S20DP
1406 91B4           5018            ACALL   TWO_EY
1408 71CB           5019            ACALL   FSTK
                    5020            ;
140A 121977         5021    ADIV:   LCALL   FP_BASE4
140D 0138           5022            AJMP    FPTST
                    5023            ;
                    5024            ;***************************************************************
                    5025            ;
140F                5026    SONERR: ; ON ERROR Statement
                    5027            ;
                    5028            ;***************************************************************
                    5029            ;
140F 120F30         5030            LCALL   INTERR          ;GET THE LINE NUMBER
1412 D213           5031            SETB    ON_ERR
1414 900102         5032            MOV     DPTR,#ERRNUM    ;POINT AT THR ERROR LOCATION
1417 800B           5033            SJMP    S20DP
                    5034            ;
                    5035            ;
                    5036            ;**************************************************************
                    5037            ;
1419                5038    SONEXT: ; ON EXT1 Statement
                    5039            ;
                    5040            ;**************************************************************
                    5041            ;
1419 120F30         5042            LCALL   INTERR
141C D212           5043            SETB    INTBIT
141E 43A884         5044            ORL     IE,#10000100B   ;ENABLE INTERRUPTS
1421 900120         5045            MOV     DPTR,#INTLOC
                    5046            ;
1424 EA             5047    S20DP:  MOV     A,R2            ;SAVE R2:R0 @DPTR
1425 F0             5048            MOVX    @DPTR,A
1426 A3             5049            INC     DPTR
1427 E8             5050            MOV     A,R0
1428 F0             5051            MOVX    @DPTR,A
1429 22             5052            RET
                    5053            ;
                    5054            ;***************************************************************
                    5055            ;
                    5056            ; CASTAK - Copy and push another top of arg stack
                    5057            ;
                    5058            ;***************************************************************
                    5059            ;
142A 912C           5060    CSTAKA2:ACALL   CSTAKA          ;COPY STACK TWICE
                    5061            ;
142C 5153           5062    CSTAKA: ACALL   SETREG          ;SET UP R2:R0
142E 8023           5063            SJMP    PUSH_T12
                    5064            ;
1430 9017F8         5065    PLNEXP: MOV     DPTR,#EXP1
                    5066            ;
                    5067            ;***************************************************************
BASIC52E                                                                                                      PAGE 89

                    5068            ;
                    5069            ; PUSHC - Push constant on to the arg stack
                    5070            ;
                    5071            ;***************************************************************
                    5072            ;
1433 510B           5073    PUSHC:  ACALL   DEC_ASTKA
1435 8BA0           5074            MOV     P2,R3
1437 7B06           5075            MOV     R3,#FPSIZ       ;LOOP COUNTER
                    5076            ;
1439 E4             5077    PCL:    CLR     A               ;SET UP A
143A 93             5078            MOVC    A,@A+DPTR       ;LOAD IT
143B F3             5079            MOVX    @R1,A           ;SAVE IT
143C A3             5080            INC     DPTR            ;BUMP POINTERS
143D 19             5081            DEC     R1
143E DBF9           5082            DJNZ    R3,PCL          ;LOOP
                    5083            ;
1440 D224           5084            SETB    ARGF
1442 22             5085            RET                     ;EXIT
                    5086            ;
1443                5087    PUSH_ONE:;
                    5088            ;
1443 9016F2         5089            MOV     DPTR,#FPONE
1446 8133           5090            AJMP    PUSHC
                    5091            ;
1448                5092    POP_T1:
                    5093            ;
1448 7B01           5094            MOV     R3,#HIGH FPT1
144A 7919           5095            MOV     R1,#LOW FPT1
144C 020FD3         5096            JMP     POPAS
                    5097            ;
144F                5098    PUSH_T1:
                    5099            ;
144F 7819           5100            MOV     R0,#LOW FPT1
1451                5101    PUSH_T11:
1451 7A01           5102            MOV     R2,#HIGH FPT1
1453                5103    PUSH_T12:
1453 020FDD         5104            LJMP    PUSHAS
                    5105            ;
1456 781F           5106    P_T2:   MOV     R0,#LOW FPT2
1458 80F7           5107            SJMP    PUSH_T11                ;JUMP TO PUSHAS
                    5108            ;
                    5109            ;****************************************************************
                    5110            ;
145A                5111    SWAP_ASTKA:     ; SWAP TOS<>TOS-1
                    5112            ;
                    5113            ;****************************************************************
                    5114            ;
145A 5153           5115            ACALL   SETREG          ;SET UP R2:R0 AND P2
145C 7406           5116            MOV     A,#FPSIZ        ;PUT TOS+1 IN R1
145E FA             5117            MOV     R2,A
145F 28             5118            ADD     A,R0
1460 F9             5119            MOV     R1,A
                    5120            ;
1461 E2             5121    S_L:    MOVX    A,@R0
1462 FB             5122            MOV     R3,A
1463 E3             5123            MOVX    A,@R1
1464 F2             5124            MOVX    @R0,A
1465 EB             5125            MOV     A,R3
BASIC52E                                                                                                      PAGE 90

1466 F3             5126            MOVX    @R1,A
1467 19             5127            DEC     R1
1468 18             5128            DEC     R0
1469 DAF6           5129            DJNZ    R2,S_L
146B 22             5130            RET
                    5131            ;
146C 5153           5132    C2_T2:  ACALL   SETREG          ;SET UP R2:R0
146E 7B01           5133            MOV     R3,#HIGH FPT2
1470 791F           5134            MOV     R1,#LOW FPT2    ;TEMP VALUE
                    5135            ;
                    5136            ; Fall thru
                    5137            ;
                    5138            ;***************************************************************
                    5139            ;
                    5140            ; VARCOP - Copy a variable from R2:R0 to R3:R1
                    5141            ;
                    5142            ;***************************************************************
                    5143            ;
1472 7C06           5144    VARCOP: MOV     R4,#FPSIZ       ;LOAD THE LOOP COUNTER
                    5145            ;
1474 8AA0           5146    V_C:    MOV     P2,R2           ;SET UP THE PORTS
1476 E2             5147            MOVX    A,@R0           ;READ THE VALUE
1477 8BA0           5148            MOV     P2,R3           ;PORT TIME AGAIN
1479 F3             5149            MOVX    @R1,A           ;SAVE IT
147A B18B           5150            ACALL   DEC3210         ;BUMP POINTERS
147C DCF6           5151            DJNZ    R4,V_C          ;LOOP
147E 22             5152            RET                     ;EXIT
                    5153            ;
147F 9017FE         5154    PIPI:   MOV     DPTR,#PIE
1482 8133           5155            AJMP    PUSHC
                    5156            ;
                    5157            ;***************************************************************
                    5158            ;
                    5159            ; The logical operators ANL, ORL, XRL, NOT
                    5160            ;
                    5161            ;***************************************************************
                    5162            ;
1484 91A1           5163    AANL:   ACALL   TWOL            ;GET THE EXPRESSIONS
1486 EB             5164            MOV     A,R3            ;DO THE AND
1487 5F             5165            ANL     A,R7
1488 FA             5166            MOV     R2,A
1489 E9             5167            MOV     A,R1
148A 5E             5168            ANL     A,R6
148B 8026           5169            SJMP    TWO_EX
                    5170            ;
148D 91A1           5171    AORL:   ACALL   TWOL            ;SAME THING FOR OR
148F EB             5172            MOV     A,R3
1490 4F             5173            ORL     A,R7
1491 FA             5174            MOV     R2,A
1492 E9             5175            MOV     A,R1
1493 4E             5176            ORL     A,R6
1494 801D           5177            SJMP    TWO_EX
                    5178            ;
1496 71CB           5179    ANOT:   ACALL   FSTK            ;PUT 0FFFFH ON THE STACK
                    5180            ;
1498 91A1           5181    AXRL:   ACALL   TWOL
149A EB             5182            MOV     A,R3
149B 6F             5183            XRL     A,R7
BASIC52E                                                                                                      PAGE 91

149C FA             5184            MOV     R2,A
149D E9             5185            MOV     A,R1
149E 6E             5186            XRL     A,R6
149F 8012           5187            SJMP    TWO_EX
                    5188            ;
14A1 5123           5189    TWOL:   ACALL   IFIX
14A3 AF03           5190            MOV     R7,R3B0
14A5 AE01           5191            MOV     R6,R1B0
14A7 4123           5192            AJMP    IFIX
                    5193            ;
                    5194            ;*************************************************************
                    5195            ;
14A9                5196    AGET:   ; READ THE BREAK BYTE AND PUT IT ON THE ARG STACK
                    5197            ;
                    5198            ;*************************************************************
                    5199            ;
14A9 900100         5200            MOV     DPTR,#GTB       ;GET THE BREAK BYTE
14AC E0             5201            MOVX    A,@DPTR
14AD 101801         5202            JBC     GTRD,TWO_R2
14B0 E4             5203            CLR     A
                    5204            ;
14B1 7A00           5205    TWO_R2: MOV     R2,#00H         ;ACC GOES TO STACK
                    5206            ;
                    5207            ;
14B3 F8             5208    TWO_EX: MOV     R0,A            ;R2:ACC GOES TO STACK
                    5209            ;
                    5210            ;
14B4 D224           5211    TWO_EY: SETB    ARGF            ;R2:R0 GETS PUT ON THE STACK
14B6 021987         5212            JMP     FP_BASE12       ;DO IT
                    5213            ;
                    5214            ;*************************************************************
                    5215            ;
                    5216            ; Put directs onto the stack
                    5217            ;
                    5218            ;**************************************************************
                    5219            ;
14B9 E5A8           5220    A_IE:   MOV     A,IE            ;IE
14BB 80F4           5221            SJMP    TWO_R2
                    5222            ;
14BD E5B8           5223    A_IP:   MOV     A,IP            ;IP
14BF 80F0           5224            SJMP    TWO_R2
                    5225            ;
14C1 AA8C           5226    ATIM0:  MOV     R2,TH0          ;TIMER 0
14C3 A88A           5227            MOV     R0,TL0
14C5 80ED           5228            SJMP    TWO_EY
                    5229            ;
14C7 AA8D           5230    ATIM1:  MOV     R2,TH1          ;TIMER 1
14C9 A88B           5231            MOV     R0,TL1
14CB 80E7           5232            SJMP    TWO_EY
                    5233            ;
14CD AACD           5234    ATIM2:  MOV     R2,TH2
14CF A8CC           5235            MOV     R0,TL2
                    5236    ;       DB      0AAH            ;MOV R2 DIRECT OP CODE
                    5237    ;       DB      0CDH            ;T2 HIGH
                    5238    ;       DB      0A8H            ;MOV R0 DIRECT OP CODE
                    5239    ;       DB      0CCH            ;T2 LOW
14D1 80E1           5240            SJMP    TWO_EY          ;TIMER 2
                    5241            ;
BASIC52E                                                                                                      PAGE 92

14D3 E5C8           5242    AT2CON: MOV     A,T2CON
                    5243    ;       DB      0E5H            ;MOV A,DIRECT OPCODE
                    5244    ;       DB      0C8H            ;T2CON LOCATION
14D5 80DA           5245            SJMP    TWO_R2
                    5246            ;
14D7 E588           5247    ATCON:  MOV     A,TCON          ;TCON
14D9 80D6           5248            SJMP    TWO_R2
                    5249            ;
14DB E589           5250    ATMOD:  MOV     A,TMOD          ;TMOD
14DD 80D2           5251            SJMP    TWO_R2
                    5252            ;
14DF AACB           5253    ARCAP2: MOV     R2,RCAPH2
14E1 A8CA           5254            MOV     R0,RCAPL2
                    5255    ;       DB      0AAH            ;MOV R2, DIRECT OP CODE
                    5256    ;       DB      0CBH            ;RCAP2H LOCATION
                    5257    ;       DB      0A8H            ;MOV R0, DIRECT OP CODE
                    5258    ;       DB      0CAH            ;R2CAPL LOCATION
14E3 80CF           5259            SJMP    TWO_EY
                    5260            ;
14E5 E590           5261    AP1:    MOV     A,P1            ;GET P1
14E7 80C8           5262            SJMP    TWO_R2          ;PUT IT ON THE STACK
                    5263            ;
14E9 E587           5264    APCON:  MOV     A,PCON
                    5265    ;       DB      0E5H            ;MOV A, DIRECT OP CODE
                    5266    ;       DB      87H             ;ADDRESS OF PCON
14EB 80C4           5267            SJMP    TWO_R2          ;PUT PCON ON THE STACK
                    5268            ;
                    5269            ;***************************************************************
                    5270            ;
                    5271            ;THIS IS THE LINE EDITOR
                    5272            ;
                    5273            ;TAKE THE PROCESSED LINE IN IBUF AND INSERT IT INTO THE
                    5274            ;BASIC TEXT FILE.
                    5275            ;
                    5276            ;***************************************************************
                    5277            ;
14ED 02056E         5278    LINE0:  LJMP    NOGO            ;CAN'T EDIT A ROM
                    5279            ;
14F0 E513           5280    LINE:   MOV     A,BOFAH
14F2 B402F8         5281            CJNE    A,#HIGH PSTART,LINE0
14F5 1205A9         5282            CALL    G4              ;GET END ADDRESS FOR EDITING
14F8 AC82           5283            MOV     R4,DPL
14FA AD83           5284            MOV     R5,DPH
14FC AB0F           5285            MOV     R3,TEMP5        ;GET HIGH ORDER IBLN
14FE A90E           5286            MOV     R1,TEMP4        ;LOW ORDER IBLN
                    5287            ;
1500 12058C         5288            CALL    GETLIN          ;FIND THE LINE
1503 7012           5289            JNZ     INSR            ;INSERT IF NOT ZERO, ELSE APPEND
                    5290            ;
                    5291            ;APPEND THE LINE AT THE END
                    5292            ;
1505 E50D           5293            MOV     A,TEMP3         ;PUT IBCNT IN THE ACC
1507 B40401         5294            CJNE    A,#4H,LINE1     ;SEE IF NO ENTRY
150A 22             5295            RET                     ;RET IF NO ENTRY
                    5296            ;
150B B1A8           5297    LINE1:  ACALL   FULL            ;SEE IF ENOUGH SPACE LEFT
150D AA05           5298            MOV     R2,R5B0         ;PUT END ADDRESS A INTO TRANSFER
150F A804           5299            MOV     R0,R4B0         ;REGISTERS
BASIC52E                                                                                                      PAGE 93

1511 B166           5300            ACALL   IMOV            ;DO THE BLOCK MOVE
                    5301            ;
1513 7401           5302    UE:     MOV     A,#EOF          ;SAVE EOF CHARACTER
1515 A199           5303            AJMP    TBR
                    5304            ;
                    5305            ;INSERT A LINE INTO THE FILE
                    5306            ;
1517 FF             5307    INSR:   MOV     R7,A            ;SAVE IT IN R7
1518 121854         5308            CALL    TEMPD           ;SAVE INSERATION ADDRESS
151B E50D           5309            MOV     A,TEMP3         ;PUT THE COUNT LENGTH IN THE ACC
151D 4009           5310            JC      LTX             ;JUMP IF NEW LINE # NOT = OLD LINE #
151F B40401         5311            CJNE    A,#04H,INSR1    ;SEE IF NULL
1522 E4             5312            CLR     A
                    5313            ;
1523 9F             5314    INSR1:  SUBB    A,R7            ;SUBTRACT LINE COUNT FROM ACC
1524 6036           5315            JZ      LIN1            ;LINE LENGTHS EQUAL
1526 401F           5316            JC      GTX             ;SMALLER LINE
                    5317            ;
                    5318            ;EXPAND FOR A NEW LINE OR A LARGER LINE
                    5319            ;
1528 FF             5320    LTX:    MOV     R7,A            ;SAVE A IN R7
1529 E50D           5321            MOV     A,TEMP3         ;GET THE COUNT IN THE ACC
152B B40401         5322            CJNE    A,#04H,LTX1     ;DO NO INSERTATION IF NULL LINE
152E 22             5323            RET                     ;EXIT IF IT IS
                    5324            ;
152F EF             5325    LTX1:   MOV     A,R7            ;GET THE COUNT BACK - DELTA IN A
1530 B1A8           5326            ACALL   FULL            ;SEE IF ENOUGH MEMORY NEW EOFA IN R3:R1
1532 12184D         5327            CALL    DTEMP           ;GET INSERATION ADDRESS
1535 B19D           5328            ACALL   NMOV            ;R7:R6 GETS (EOFA)-DPTR
1537 120DAD         5329            CALL    X3120
153A A904           5330            MOV     R1,R4B0         ;EOFA LOW
153C AB05           5331            MOV     R3,R5B0         ;EOFA HIGH
153E 0E             5332            INC     R6              ;INCREMENT BYTE COUNT
153F BE0001         5333            CJNE    R6,#00,LTX2     ;NEED TO BUMP HIGH BYTE?
1542 0F             5334            INC     R7
                    5335            ;
1543 B181           5336    LTX2:   ACALL   RMOV            ;GO DO THE INSERTION
1545 8015           5337            SJMP    LIN1            ;INSERT THE CURRENT LINE
                    5338            ;
1547 F4             5339    GTX:    CPL     A               ;FLIP ACC
1548 04             5340            INC     A               ;TWOS COMPLEMENT
1549 1205DE         5341            CALL    ADDPTR          ;DO THE ADDITION
154C B19D           5342            ACALL   NMOV            ;R7:R6 GETS (EOFA)-DPTR
154E A982           5343            MOV     R1,DPL          ;SET UP THE REGISTERS
1550 AB83           5344            MOV     R3,DPH
1552 AA0F           5345            MOV     R2,TEMP5        ;PUT INSERTATION ADDRESS IN THE RIGHT REG
1554 A80E           5346            MOV     R0,TEMP4
1556 6002           5347            JZ      GTX1            ;IF ACC WAS ZERO FROM NMOV, JUMP
1558 B16D           5348            ACALL   LMOV            ;IF NO ZERO DO A LMOV
                    5349            ;
155A B113           5350    GTX1:   ACALL   UE              ;SAVE NEW END ADDRESS
                    5351            ;
155C AA0F           5352    LIN1:   MOV     R2,TEMP5        ;GET THE INSERTATION ADDRESS
155E A80E           5353            MOV     R0,TEMP4
1560 E50D           5354            MOV     A,TEMP3         ;PUT THE COUNT LENGTH IN ACC
1562 B40401         5355            CJNE    A,#04H,IMOV     ;SEE IF NULL
1565 22             5356            RET                     ;EXIT IF NULL
                    5357            ;
BASIC52E                                                                                                      PAGE 94

                    5358            ;***************************************************************
                    5359            ;
                    5360            ;INSERT A LINE AT ADDRESS R2:R0
                    5361            ;
                    5362            ;***************************************************************
                    5363            ;
1566 E4             5364    IMOV:   CLR     A               ;TO SET UP
1567 7904           5365            MOV     R1,#LOW IBCNT   ;INITIALIZE THE REGISTERS
1569 FB             5366            MOV     R3,A
156A AE0D           5367            MOV     R6,TEMP3        ;PUT THE BYTE COUNT IN R6 FOR LMOV
156C FF             5368            MOV     R7,A            ;PUT A 0 IN R7 FOR LMOV
                    5369            ;
                    5370            ;***************************************************************
                    5371            ;
                    5372            ;COPY A BLOCK FROM THE BEGINNING
                    5373            ;
                    5374            ;R2:R0 IS THE DESTINATION ADDRESS
                    5375            ;R3:R1 IS THE SOURCE ADDRESS
                    5376            ;R7:R6 IS THE COUNT REGISTER
                    5377            ;
                    5378            ;***************************************************************
                    5379            ;
156D B196           5380    LMOV:   ACALL   TBYTE           ;TRANSFER THE BYTE
156F B176           5381            ACALL   INC3210         ;BUMP THE POINTER
1571 D147           5382            ACALL   DEC76           ;BUMP R7:R6
1573 70F8           5383            JNZ     LMOV            ;LOOP
1575 22             5384            RET                     ;GO BACK TO CALLING ROUTINE
                    5385            ;
1576 08             5386    INC3210:INC     R0
1577 B80001         5387            CJNE    R0,#00H,INC3211
157A 0A             5388            INC     R2
                    5389            ;
157B 09             5390    INC3211:INC     R1
157C B90001         5391            CJNE    R1,#00H,INC3212
157F 0B             5392            INC     R3
1580 22             5393    INC3212:RET
                    5394            ;
                    5395            ;***************************************************************
                    5396            ;
                    5397            ;COPY A BLOCK STARTING AT THE END
                    5398            ;
                    5399            ;R2:R0 IS THE DESTINATION ADDRESS
                    5400            ;R3:R1 IS THE SOURCE ADDRESS
                    5401            ;R6:R7 IS THE COUNT REGISTER
                    5402            ;
                    5403            ;***************************************************************
                    5404            ;
1581 B196           5405    RMOV:   ACALL   TBYTE           ;TRANSFER THE BYTE
1583 B18B           5406            ACALL   DEC3210         ;DEC THE LOCATIONS
1585 D147           5407            ACALL   DEC76           ;BUMP THE COUNTER
1587 70F8           5408            JNZ     RMOV            ;LOOP
                    5409            ;
1589 00             5410    DEC_R:  NOP                     ;CREATE EQUAL TIMING
158A 22             5411            RET                     ;EXIT
                    5412            ;
158B 18             5413    DEC3210:DEC     R0              ;BUMP THE POINTER
158C B8FF01         5414            CJNE    R0,#0FFH,DEC3212;SEE IF OVERFLOWED
158F 1A             5415    DEC3211:DEC     R2              ;BUMP THE HIGH BYTE
BASIC52E                                                                                                      PAGE 95

1590 19             5416    DEC3212:DEC     R1              ;BUMP THE POINTER
1591 B9FFF5         5417            CJNE    R1,#0FFH,DEC_R  ;SEE IF OVERFLOWED
1594 1B             5418            DEC     R3              ;CHANGE THE HIGH BYTE
1595 22             5419            RET                     ;EXIT
                    5420            ;
                    5421            ;***************************************************************
                    5422            ;
                    5423            ;TBYTE - TRANSFER A BYTE
                    5424            ;
                    5425            ;***************************************************************
                    5426            ;
1596 8BA0           5427    TBYTE:  MOV     P2,R3           ;OUTPUT SOURCE REGISTER TO PORT
1598 E3             5428            MOVX    A,@R1           ;PUT BYTE IN ACC
                    5429            ;
1599 8AA0           5430    TBR:    MOV     P2,R2           ;OUTPUT DESTINATION TO PORT
159B F2             5431            MOVX    @R0,A           ;SAVE THE BYTE
159C 22             5432            RET                     ;EXIT
                    5433            ;
                    5434            ;***************************************************************
                    5435            ;
                    5436            ;NMOV - R7:R6 = END ADDRESS - DPTR
                    5437            ;
                    5438            ;ACC GETS CLOBBERED
                    5439            ;
                    5440            ;***************************************************************
                    5441            ;
159D EC             5442    NMOV:   MOV     A,R4            ;THE LOW BYTE OF EOFA
159E C3             5443            CLR     C               ;CLEAR THE CARRY FOR SUBB
159F 9582           5444            SUBB    A,DPL           ;SUBTRACT DATA POINTER LOW
15A1 FE             5445            MOV     R6,A            ;PUT RESULT IN R6
15A2 ED             5446            MOV     A,R5            ;HIGH BYTE OF EOFA
15A3 9583           5447            SUBB    A,DPH           ;SUBTRACT DATA POINTER HIGH
15A5 FF             5448            MOV     R7,A            ;PUT RESULT IN R7
15A6 4E             5449            ORL     A,R6            ;SEE IF ZERO
15A7 22             5450    NMOV1:  RET                     ;EXIT
                    5451            ;
                    5452            ;***************************************************************
                    5453            ;
                    5454            ;CHECK FOR A FILE OVERFLOW
                    5455            ;LEAVES THE NEW END ADDRESS IN R3:R1
                    5456            ;A HAS THE INCREASE IN SIZE
                    5457            ;
                    5458            ;***************************************************************
                    5459            ;
15A8 2C             5460    FULL:   ADD     A,R4            ;ADD A TO END ADDRESS
15A9 F9             5461            MOV     R1,A            ;SAVE IT
15AA E4             5462            CLR     A
15AB 3D             5463            ADDC    A,R5            ;ADD THE CARRY
15AC FB             5464            MOV     R3,A
15AD 900104         5465            MOV     DPTR,#VARTOP    ;POINT AT VARTOP
                    5466            ;
15B0 1205CC         5467    FUL1:   CALL    DCMPX           ;COMPARE THE TWO
15B3 40F2           5468            JC      NMOV1           ;OUT OF ROOM
                    5469            ;
15B5 901816         5470    TB:     MOV     DPTR,#E5X       ;OUT OF MEMORY
15B8 014B           5471            AJMP    FPTS
                    5472            ;
                    5473            ;***************************************************************
BASIC52E                                                                                                      PAGE 96

                    5474            ;
                    5475            ; PP - Preprocesses the line in IBUF back into IBUF
                    5476            ;      sets F0 if no line number
                    5477            ;      leaves the correct length of processed line in IBCNT
                    5478            ;      puts the line number in IBLN
                    5479            ;      wastes the text address TXAL and TXAH
                    5480            ;
                    5481            ;***************************************************************
                    5482            ;
15BA F16C           5483    PP:     ACALL   T_BUF           ;TXA GETS IBUF
15BC 120F35         5484            CALL    INTGER          ;SEE IF A NUMBER PRESENT
15BF 121854         5485            CALL    TEMPD           ;SAVE THE INTEGER IN TEMP5:TEMP4
15C2 92D5           5486            MOV     F0,C            ;SAVE INTEGER IF PRESENT
15C4 900005         5487            MOV     DPTR,#IBLN      ;SAVE THE LINE NUMBER, EVEN IF NONE
15C7 9124           5488            ACALL   S20DP
15C9 A808           5489            MOV     R0,TXAL         ;TEXT POINTER
15CB 7907           5490            MOV     R1,#LOW IBUF    ;STORE POINTER
                    5491            ;
                    5492            ; Now process the line back into IBUF
                    5493            ;
15CD C224           5494    PPL:    CLR     ARGF            ;FIRST PASS DESIGNATOR
15CF 900175         5495            MOV     DPTR,#TOKTAB    ;POINT DPTR AT LOOK UP TABLE
                    5496            ;
15D2 8805           5497    PPL1:   MOV     R5B0,R0         ;SAVE THE READ POINTER
15D4 E4             5498            CLR     A               ;ZERO A FOR LOOKUP
15D5 93             5499            MOVC    A,@A+DPTR       ;GET THE TOKEN
15D6 FF             5500            MOV     R7,A            ;SAVE TOKEN IN CASE OF MATCH
                    5501            ;
15D7 E2             5502    PPL2:   MOVX    A,@R0           ;GET THE USER CHARACTER
15D8 FB             5503            MOV     R3,A            ;SAVE FOR REM
15D9 B46100         5504            CJNE    A,#'a',PPL21
15DC 4007           5505    PPL21:  JC      PPX             ;CONVERT LOWER TO UPPER CASE
15DE B47B00         5506            CJNE    A,#('z'+1),PPL22
15E1 5002           5507    PPL22:  JNC     PPX
15E3 C2E5           5508            CLR     ACC.5
                    5509            ;
15E5 FA             5510    PPX:    MOV     R2,A
15E6 F2             5511            MOVX    @R0,A           ;SAVE UPPER CASE
15E7 A3             5512            INC     DPTR            ;BUMP THE LOOKUP POINTER
15E8 E4             5513            CLR     A
15E9 93             5514            MOVC    A,@A+DPTR
15EA B50203         5515            CJNE    A,R2B0,PPL3     ;LEAVE IF NOT THE SAME
15ED 08             5516            INC     R0              ;BUMP THE USER POINTER
15EE 80E7           5517            SJMP    PPL2            ;CONTINUE TO LOOP
                    5518            ;
15F0 20E72F         5519    PPL3:   JB      ACC.7,PPL6      ;JUMP IF FOUND MATCH
15F3 602D           5520            JZ      PPL6            ;USER MATCH
                    5521            ;
                    5522            ;
                    5523            ; Scan to the next TOKTAB entry
                    5524            ;
15F5 A3             5525    PPL4:   INC     DPTR            ;ADVANCE THE POINTER
15F6 E4             5526            CLR     A               ;ZERO A FOR LOOKUP
15F7 93             5527            MOVC    A,@A+DPTR       ;LOAD A WITH TABLE
15F8 20E703         5528            JB      ACC.7,PPL41     ;KEEP SCANNING IF NOT A RESERVED WORD
15FB 70F8           5529            JNZ     PPL4
15FD A3             5530            INC     DPTR
                    5531            ;
BASIC52E                                                                                                      PAGE 97

                    5532            ; See if at the end of TOKTAB
                    5533            ;
15FE A805           5534    PPL41:  MOV     R0,R5B0         ;RESTORE THE POINTER
1600 B4FFCF         5535            CJNE    A,#0FFH,PPL1    ;SEE IF END OF TABLE
                    5536            ;
                    5537            ; Character not in TOKTAB, so see what it is
                    5538            ;
1603 BA2003         5539            CJNE    R2,#' ',PPLX    ;SEE IF A SPACE
1606 08             5540            INC     R0              ;BUMP USER POINTER
1607 80C4           5541            SJMP    PPL             ;TRY AGAIN
                    5542            ;
1609 302D0A         5543    PPLX:   JNB     XBIT,PPLY       ;EXTERNAL TRAP
160C 202407         5544            JB      ARGF,PPLY
160F D224           5545            SETB    ARGF            ;SAYS THAT THE USER HAS TABLE
1611 122078         5546            LCALL   2078H           ;SET UP POINTER
1614 A1D2           5547            AJMP    PPL1
                    5548            ;
1616 D12F           5549    PPLY:   ACALL   PPL7            ;SAVE CHARACTER, EXIT IF A CR
1618 B422B2         5550            CJNE    A,#'"',PPL      ;SEE IF QUOTED STRING, START AGAIN IF NOT
                    5551            ;
                    5552            ; Just copy a quoted string
                    5553            ;
161B D12F           5554    PPLY1:  ACALL   PPL7            ;SAVE THE CHARACTER, TEST FOR CR
161D B422FB         5555            CJNE    A,#'"',PPLY1    ;IS THERE AN ENDQUOTE, IF NOT LOOP
1620 80AB           5556            SJMP    PPL             ;DO IT AGAIN IF ENDQUOTE
                    5557            ;
1622 EF             5558    PPL6:   MOV     A,R7            ;GET THE TOKEN
1623 D144           5559            ACALL   PPL91           ;SAVE THE TOKEN
1625 B496A5         5560            CJNE    A,#T_REM,PPL    ;SEE IF A REM TOKEN
1628 EB             5561            MOV     A,R3
1629 D130           5562            ACALL   PPL71           ;WASTE THE REM STATEMENT
162B D12F           5563    PPL61:  ACALL   PPL7            ;LOOP UNTIL A CR
162D 80FC           5564            SJMP    PPL61
                    5565            ;
162F E2             5566    PPL7:   MOVX    A,@R0           ;GET THE CHARACTER
1630 B40D10         5567    PPL71:  CJNE    A,#CR,PPL9      ;FINISH IF A CR
1633 D000           5568            POP     R0B0            ;WASTE THE CALLING STACK
1635 D000           5569            POP     R0B0
1637 F3             5570            MOVX    @R1,A           ;SAVE CR IN MEMORY
1638 09             5571            INC     R1              ;SAVE A TERMINATOR
1639 7401           5572            MOV     A,#EOF
163B F3             5573            MOVX    @R1,A
163C E9             5574            MOV     A,R1            ;SUBTRACT FOR LENGTH
163D 9404           5575            SUBB    A,#4
163F F50D           5576            MOV     TEMP3,A         ;SAVE LENGTH
1641 7904           5577            MOV     R1,#LOW IBCNT   ;POINT AT BUFFER COUNT
                    5578            ;
1643 08             5579    PPL9:   INC     R0
1644 F3             5580    PPL91:  MOVX    @R1,A           ;SAVE THE CHARACTER
1645 09             5581            INC     R1              ;BUMP THE POINTERS
1646 22             5582            RET                     ;EXIT TO CALLING ROUTINE
                    5583            ;
                    5584            ;
                    5585            ;***************************************************************
                    5586            ;
                    5587            ;DEC76 - DECREMENT THE REGISTER PAIR R7:R6
                    5588            ;
                    5589            ;ACC = ZERO IF R7:R6 = ZERO ; ELSE ACC DOES NOT
BASIC52E                                                                                                      PAGE 98

                    5590            ;
                    5591            ;***************************************************************
                    5592            ;
1647 1E             5593    DEC76:  DEC     R6              ;BUMP R6
1648 BEFF01         5594            CJNE    R6,#0FFH,DEC77  ;SEE IF RAPPED AROUND
164B 1F             5595            DEC     R7
164C EF             5596    DEC77:  MOV     A,R7            ;SEE IF ZERO
164D 4E             5597            ORL     A,R6
164E 22             5598            RET                     ;EXIT
                    5599            ;
                    5600            ;***************************************************************
                    5601            ;
                    5602            ; MTOP - Get or Put the top of assigned memory
                    5603            ;
                    5604            ;***************************************************************
                    5605            ;
164F 90010A         5606    PMTOP:  MOV     DPTR,#MEMTOP
1652 120573         5607    PMTOP1: CALL    L20DPI
1655 81B4           5608            AJMP    TWO_EY          ;PUT R2:R0 ON THE STACK
                    5609            ;
                    5610            ;*************************************************************
                    5611            ;
                    5612            ; AXTAL - Crystal value calculations
                    5613            ;
                    5614            ;*************************************************************
                    5615            ;
1657 9017EC         5616    AXTAL0: MOV     DPTR,#XTALV     ;CRYSTAL VALUE
165A 9133           5617            ACALL   PUSHC
                    5618            ;
165C 912A           5619    AXTAL1: ACALL   CSTAKA2         ;COPY CRYSTAL VALUE TWICE
                    5620    ;
                    5621    ;*****************************************************************************
                    5622    ;****** Disable Intel programming for to get room ****************************
                    5623    ;
                    5624    ;       ACALL   CSTAKA          ;Copy crystal value the 3rd.
                    5625    ;
                    5626    ;*****************************************************************************
                    5627    ;
165E 900709         5628            MOV     DPTR,#PTIME     ;PROM TIMER
1661 D179           5629            ACALL   AXTAL2
1663 900128         5630            MOV     DPTR,#PROGS
1666 F10E           5631            ACALL   S31L
                    5632    ;
                    5633    ;*****************************************************************************
                    5634    ;****** Disable Intel programming for to get room ****************************
                    5635    ;
                    5636    ;       MOV     DPTR,#IPTIME    ;IPROM TIMER
                    5637    ;       ACALL   AXTAL2
                    5638    ;       MOV     DPTR,#IPROGS
                    5639    ;       ACALL   S31L
                    5640    ;
                    5641    ;*****************************************************************************
                    5642    ;
1668 901167         5643            MOV     DPTR,#TTIME     ;CLOCK CALCULATION
166B 511F           5644            ACALL   AXTAL3
166D E9             5645            MOV     A,R1
166E F4             5646            CPL     A
166F 04             5647            INC     A
BASIC52E                                                                                                      PAGE 99

1670 F54A           5648            MOV     SAVE_T,A
1672 7B01           5649            MOV     R3,#HIGH CXTAL
1674 7913           5650            MOV     R1,#LOW CXTAL
1676 020FD3         5651            JMP     POPAS
                    5652            ;
1679 511F           5653    AXTAL2: ACALL   AXTAL3
                    5654            ;
167B                5655    CBIAS:  ;Bias the crystal calculations
                    5656            ;
167B E9             5657            MOV     A,R1            ;GET THE LOW COUNT
167C F4             5658            CPL     A               ;FLIP IT FOR TIMER LOAD
167D 240F           5659            ADD     A,#15           ;BIAS FOR CALL AND LOAD TIMES
167F F9             5660            MOV     R1,A            ;RESTORE IT
1680 EB             5661            MOV     A,R3            ;GET THE HIGH COUNT
1681 F4             5662            CPL     A               ;FLIP IT
1682 3400           5663            ADDC    A,#00H          ;ADD THE CARRY
1684 FB             5664            MOV     R3,A            ;RESTORE IT
1685 22             5665            RET
                    5666            ;
                    5667            ;**************************************************************
                    5668            ;
1686                5669    STONE:  ; Toggle the I/O port
                    5670            ;
                    5671            ;**************************************************************
                    5672            ;
1686 120E78         5673            CALL    THREE           ;GET THE NUMBERS
1689 D17B           5674            ACALL   CBIAS           ;BIAS R3:R1 FOR COUNT LOOP
                    5675            ;
168B C292           5676    STONE1: CLR     T_BIT           ;TOGGLE THE BIT
168D C28E           5677            CLR     TR1             ;STOP THE TIMER
168F 8B8D           5678            MOV     TH1,R3          ;LOAD THE TIMER
1691 898B           5679            MOV     TL1,R1
1693 C28F           5680            CLR     TF1             ;CLEAR THE OVERFLOW FLAG
1695 D28E           5681            SETB    TR1             ;TURN IT ON
1697 D147           5682            ACALL   DEC76
1699 308FFD         5683            JNB     TF1,$           ;WAIT
169C 71AC           5684            ACALL   ALPAR
169E D292           5685            SETB    T_BIT           ;BACK TO A ONE
16A0 12052F         5686            CALL    TIMER_LOAD1     ;LOAD THE HIGH VALUE
16A3 308FFD         5687            JNB     TF1,$           ;WAIT
16A6 70E3           5688            JNZ     STONE1          ;LOOP
16A8 22             5689            RET
                    5690            ;
                    5691            ;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
                    5692            ;
16A9                5693    LNTAB:  ; Natural log lookup table
                    5694            ;
                    5695            ;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
                    5696            ;
16A9 80             5697            DB      80H
16AA 00             5698            DB      00H
16AB 71             5699            DB      71H
16AC 37             5700            DB      37H
16AD 13             5701            DB      13H
16AE 19             5702            DB      19H
                    5703            ;
16AF 7F             5704            DB      7FH
16B0 00             5705            DB      00H
BASIC52E                                                                                                      PAGE 100

16B1 76             5706            DB      76H
16B2 64             5707            DB      64H
16B3 37             5708            DB      37H
16B4 94             5709            DB      94H
                    5710            ;
16B5 80             5711            DB      80H
16B6 00             5712            DB      00H
16B7 07             5713            DB      07H
16B8 22             5714            DB      22H
16B9 75             5715            DB      75H
16BA 17             5716            DB      17H
                    5717            ;
16BB 80             5718            DB      80H
16BC 00             5719            DB      00H
16BD 52             5720            DB      52H
16BE 35             5721            DB      35H
16BF 93             5722            DB      93H
16C0 28             5723            DB      28H
                    5724            ;
16C1 80             5725            DB      80H
16C2 00             5726            DB      00H
16C3 71             5727            DB      71H
16C4 91             5728            DB      91H
16C5 85             5729            DB      85H
16C6 86             5730            DB      86H
                    5731            ;
16C7 FF             5732            DB      0FFH
                    5733            ;
16C8 81             5734            DB      81H
16C9 00             5735            DB      00H
16CA 51             5736            DB      51H
16CB 58             5737            DB      58H
16CC 02             5738            DB      02H
16CD 23             5739            DB      23H
                    5740            ;
                    5741            ;SINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSIN
                    5742            ;
16CE                5743    SINTAB: ; Sin lookup table
                    5744            ;
                    5745            ;SINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSIN
                    5746            ;
16CE 77             5747            DB      128-9
16CF 00             5748            DB      00H
16D0 44             5749            DB      44H
16D1 90             5750            DB      90H
16D2 05             5751            DB      05H
16D3 16             5752            DB      16H
                    5753            ;
16D4 79             5754            DB      128-7
16D5 01             5755            DB      01H
16D6 08             5756            DB      08H
16D7 21             5757            DB      21H
16D8 05             5758            DB      05H
16D9 25             5759            DB      25H
                    5760            ;
16DA 7B             5761            DB      128-5
16DB 00             5762            DB      00H
16DC 19             5763            DB      19H
BASIC52E                                                                                                      PAGE 101

16DD 73             5764            DB      73H
16DE 55             5765            DB      55H
16DF 27             5766            DB      27H
16E0 7D             5767            DB      128-3
16E1 01             5768            DB      01H
16E2 70             5769            DB      70H
16E3 12             5770            DB      12H
16E4 84             5771            DB      84H
16E5 19             5772            DB      19H
                    5773            ;
16E6 7E             5774            DB      128-2
16E7 00             5775            DB      00H
16E8 33             5776            DB      33H
16E9 33             5777            DB      33H
16EA 33             5778            DB      33H
16EB 83             5779            DB      83H
                    5780            ;
16EC 80             5781            DB      128
16ED 01             5782            DB      01H
16EE 67             5783            DB      67H
16EF 66             5784            DB      66H
16F0 66             5785            DB      66H
16F1 16             5786            DB      16H
                    5787            ;
16F2 81             5788    FPONE:  DB      128+1
16F3 00             5789            DB      00H
16F4 00             5790            DB      00H
16F5 00             5791            DB      00H
16F6 00             5792            DB      00H
16F7 10             5793            DB      10H
                    5794            ;
16F8 FF             5795            DB      0FFH            ;END OF TABLE
                    5796            ;
16F9 120FD9         5797    SBAUD:  CALL    AXTAL           ;PUT CRYSTAL ON THE STACK
16FC 120F43         5798            CALL    EXPRB           ;PUT THE NUMBER AFTER BAUD ON STACK
16FF 740C           5799            MOV     A,#12
1701 91B1           5800            ACALL   TWO_R2          ;TOS = 12
1703 31B0           5801            ACALL   AMUL            ;TOS = 12*BAUD
1705 910A           5802            ACALL   ADIV            ;TOS = XTAL/(12*BAUD)
1707 5123           5803            ACALL   IFIX
1709 D17B           5804            ACALL   CBIAS
170B 900124         5805            MOV     DPTR,#SPV
                    5806            ;
170E 020605         5807    S31L:   JMP     S31DP
                    5808            ;
1711 D14F           5809    AFREE:  CALL    PMTOP           ;PUT MTOP ON STACK
1713 1205A9         5810            CALL    G4              ;GET END ADDRESS
1716 A882           5811            MOV     R0,DPL
1718 AA83           5812            MOV     R2,DPH
171A 91B4           5813            ACALL   TWO_EY
                    5814            ;
171C 121971         5815    ASUB:   LCALL   FP_BASE1        ;DO FP SUB
171F 0138           5816            AJMP    FPTST
                    5817            ;
1721 12051C         5818    ALEN:   CALL    CCAL            ;CALCULATE THE LEN OF THE SELECTED PROGRAM
1724 AA07           5819            MOV     R2,R7B0         ;SAVE THE HIGH BYTE
1726 EE             5820            MOV     A,R6            ;SAVE THE LOW BYTE
1727 81B3           5821            AJMP    TWO_EX          ;PUT IT ON THE STACK
BASIC52E                                                                                                      PAGE 102

                    5822            ;
1729 A2AF           5823    ATIME:  MOV     C,EA            ;SAVE INTERRUTS
172B C2AF           5824            CLR     EA
172D C047           5825            PUSH    MILLIV          ;SAVE MILLI VALUE
172F AA48           5826            MOV     R2,TVH          ;GET THE TIMER
1731 E549           5827            MOV     A,TVL
1733 92AF           5828            MOV     EA,C            ;SAVE INTERRUPTS
1735 91B3           5829            ACALL   TWO_EX          ;PUT TIMER ON THE STACK
1737 D0E0           5830            POP     ACC             ;GET MILLI
1739 91B1           5831            ACALL   TWO_R2          ;PUT MILLI ON STACK
173B 74C8           5832            MOV     A,#200
173D 91B1           5833            ACALL   TWO_R2          ;DIVIDE MILLI BY 200
173F 910A           5834            ACALL   ADIV
                    5835            ;
1741 12196F         5836    AADD:   LCALL   FP_BASE         ;DO FP ADDITION
1744 0138           5837            AJMP    FPTST           ;CHECK FOR ERRORS
                    5838            ;
                    5839            ;**************************************************************
                    5840            ;
                    5841            ; Here are some error messages that were moved
                    5842            ;
                    5843            ;**************************************************************
                    5844            ;
                    5845            ;
1746 42414420       5846    E1X:    DB      'BAD SYNTAX"'
174A 53594E54   
174E 415822     
1751 8A             5847    E2X:    DB      128+10
1752 44495649       5848            DB      'DIVIDE BY ZERO"'
1756 44452042   
175A 59205A45   
175E 524F22     
                    5849            ;
1761 41525241       5850    E6X:    DB      'ARRAY SIZE"'
1765 59205349   
1769 5A4522     
                    5851            ;
                    5852            ;**************************************************************
                    5853            ;
176C                5854    T_BUF:  ; TXA gets IBUF
                    5855            ;
                    5856            ;**************************************************************
                    5857            ;
176C 750A00         5858            MOV     TXAH,#HIGH IBUF
176F 750807         5859            MOV     TXAL,#LOW IBUF
1772 22             5860            RET
                    5861            ;
                    5862            ;
                    5863            ;***************************************************************
                    5864            ;
1773                5865    CXFER:  ; Transfer a program from rom to ram
                    5866            ;
                    5867            ;***************************************************************
                    5868            ;
1773 12051C         5869            CALL    CCAL            ;GET EVERYTHING SET UP
1776 7A02           5870            MOV     R2,#HIGH PSTART
1778 7800           5871            MOV     R0,#LOW PSTART
177A B16D           5872            ACALL   LMOV            ;DO THE TRANSFER
BASIC52E                                                                                                      PAGE 103

177C 120664         5873            CALL    RCLEAR          ;CLEAR THE MEMORY
                    5874            ;
                    5875            ; Fall thru to CRAM
                    5876            ;
                    5877            ;***************************************************************
                    5878            ;
177F                5879    CRAM:   ; The command action routine - RAM - Run out of ram
                    5880            ;
                    5881            ;***************************************************************
                    5882            ;
177F C217           5883            CLR     CONB            ;CAN'T CONTINUE IF MODE CHANGE
1781 751302         5884            MOV     BOFAH,#HIGH PSTART
1784 751400         5885            MOV     BOFAL,#LOW PSTART
                    5886            ;
                    5887            ; Fall thru to Command Processor
                    5888            ;
                    5889            ;***************************************************************
                    5890            ;
1787                5891    CMND1:  ; The entry point for the command processor
                    5892            ;
                    5893            ;***************************************************************
                    5894            ;
1787 120C31         5895            LCALL   SPRINT1         ;WASTE AT AND HEX
178A C22D           5896            CLR     XBIT            ;TO RESET IF NEEDED
                    5897    ;
                    5898    ;*****************************************************************************
                    5899    ;****** Karmann 1 Bugfix *****************************************************
                    5900    ;
178C F1E0           5901            acall   TEST_USER       ;check for user command extensions
                    5902    ;
                    5903    ;****** continue with original code: *****************************************
                    5904    ;
178E 9000FD         5905            MOV     DPTR,#RDYS      ;PRINT THE READY MESSAGE
1791 1206AD         5906            CALL    CRP             ;DO A CR, THEN, PRINT FROM THE ROM
                    5907            ;
1794 D22F           5908    CMNDR:  SETB    DIRF            ;SET THE DIRECT INPUT BIT
1796 853E81         5909            MOV     SP,SPSAV        ;LOAD THE STACK
1799 119D           5910            ACALL   CL7             ;DO A CRLF
                    5911            ;
179B C218           5912    CMNX:   CLR     GTRD            ;CLEAR BREAK
179D 90005E         5913            MOV     DPTR,#5EH       ;DO RUN TRAP
17A0 E0             5914            MOVX    A,@DPTR
17A1 6434           5915            XRL     A,#52
17A3 7003           5916            JNZ     CMNX1
17A5 020802         5917            LJMP    CRUN
17A8 7D3E           5918    CMNX1:  MOV     R5,#'>'         ;OUTPUT A PROMPT
17AA 120711         5919            LCALL   TEROT
17AD 1206D8         5920            CALL    INLINE          ;INPUT A LINE INTO IBUF
17B0 B1BA           5921            CALL    PP              ;PRE-PROCESS THE LINE
17B2 20D50F         5922            JB      F0,CMND3        ;NO LINE NUMBER
17B5 91F0           5923            CALL    LINE            ;PROCESS THE LINE
17B7 1205E7         5924            LCALL   LCLR
17BA 2015DE         5925            JB      LINEB,CMNX      ;DON'T CLEAR MEMORY IF NO NEED
17BD D215           5926            SETB    LINEB
17BF 120664         5927            LCALL   RCLEAR          ;CLEAR THE MEMORY
17C2 80D7           5928            SJMP    CMNX            ;LOOP BACK
                    5929            ;
17C4 F16C           5930    CMND3:  CALL    T_BUF           ;SET UP THE TEXT POINTER
BASIC52E                                                                                                      PAGE 104

17C6 120EE1         5931            CALL    DELTST          ;GET THE CHARACTER
17C9 60C9           5932            JZ      CMNDR           ;IF CR, EXIT
17CB 90010F         5933            MOV     DPTR,#CMNDD     ;POINT AT THE COMMAND LOOKUP
17CE B4F000         5934            CJNE    A,#T_CMND,CMND31;PROCESS STATEMENT IF NOT A COMMAND
17D1 400A           5935    CMND31: JC      CMND5
17D3 120ED7         5936            CALL    GCI1            ;BUMP TXA
17D6 540F           5937            ANL     A,#0FH          ;STRIP MSB'S FOR LOOKUP
17D8 12095C         5938            LCALL   ISTA1           ;PROCESS COMMAND
17DB 80B7           5939            SJMP    CMNDR
                    5940            ;
17DD 020813         5941    CMND5:  LJMP    ILOOP           ;CHECK FOR A POSSIBLE BREAK
                    5942    ;
                    5943    ;*****************************************************************************
                    5944    ;****** Karmann 1 Bugfix *****************************************************
                    5945    ;
17E0                5946    TEST_USER:                      ;check for user command extensions
17E0 E4             5947            CLR     A
17E1 902002         5948            MOV     DPTR,#2002H     ;CHECK FOR EXTERNAL TRAP PACKAGE
17E4 93             5949            MOVC    A,@A+DPTR
17E5 B45A03         5950            CJNE    A,#5AH,CMND11   ;test for user commands
17E8 122048         5951            LCALL   2048H           ;IF PRESENT JUMP TO LOCATION 200BH
17EB 22             5952    CMND11: ret
                    5953    ;
                    5954    ;****** continue with original code: *****************************************
                    5955    ;
                    5956            ;CONSTANTS
                    5957            ;
17EC 88             5958    XTALV:  DB      128+8           ; DEFAULT CRYSTAL VALUE
17ED 00             5959            DB      00H
17EE 00             5960            DB      00H
17EF 92             5961            DB      92H
17F0 05             5962            DB      05H
17F1 11             5963            DB      11H
                    5964            ;
17F2 85             5965    EXP11:  DB      85H
17F3 00             5966            DB      00H
17F4 42             5967            DB      42H
17F5 41             5968            DB      41H
17F6 87             5969            DB      87H
17F7 59             5970            DB      59H
                    5971            ;
17F8 81             5972    EXP1:   DB      128+1           ; EXP(1)
17F9 00             5973            DB      00H
17FA 18             5974            DB      18H
17FB 28             5975            DB      28H
17FC 18             5976            DB      18H
17FD 27             5977            DB      27H
                    5978    ;
                    5979    ;*****************************************************************************
                    5980    ;****** Disable Intel programming for to get room ****************************
                    5981    ;
                    5982    ;IPTIME: DB     128-4           ;FPROG TIMING
                    5983    ;       DB      00H
                    5984    ;       DB      00H
                    5985    ;       DB      00H
                    5986    ;       DB      75H
                    5987    ;       DB      83H
                    5988    ;
BASIC52E                                                                                                      PAGE 105

                    5989    ;*****************************************************************************
                    5990    ;
17FE 81             5991    PIE:    DB      128+1           ;PI
17FF 00             5992            DB      00H
1800 26             5993            DB      26H
1801 59             5994            DB      59H
1802 41             5995            DB      41H
1803 31             5996            DB      31H             ; 3.1415926
                    5997            ;
                    5998            ;***************************************************************
                    5999            ;
                    6000            ; The error messages, some have been moved
                    6001            ;
                    6002            ;***************************************************************
                    6003            ;
1804 9E             6004    E7X:    DB      128+30
1805 41524954       6005            DB      'ARITH. UNDERFLOW"'
1809 482E2055   
180D 4E444552   
1811 464C4F57   
1815 22         
                    6006            ;
1816 4D454D4F       6007    E5X:    DB      'MEMORY ALLOCATION"'
181A 52592041   
181E 4C4C4F43   
1822 4154494F   
1826 4E22       
                    6008            ;
1828 A8             6009    E3X:    DB      128+40
1829 42414420       6010            DB      'BAD ARGUMENT"'
182D 41524755   
1831 4D454E54   
1835 22         
                    6011            ;
1836 492D5354       6012    EXI:    DB      'I-STACK"'
183A 41434B22   
                    6013            ;
                    6014            ;***************************************************************
                    6015            ;
                    6016            ; The command action routine - CONTINUE
                    6017            ;
                    6018            ;***************************************************************
                    6019            ;
183E 901FA6         6020    CCONT:  MOV     DPTR,#E15X
1841 30174B         6021            JNB     CONB,ERROR      ;ERROR IF CONTINUE IS NOT SET
                    6022            ;
1844                6023    CC1:    ;used for input statement entry
                    6024            ;
1844 85420A         6025            MOV     TXAH,INTXAH     ;RESTORE TXA
1847 854308         6026            MOV     TXAL,INTXAL
184A 02080F         6027            JMP     CILOOP          ;EXECUTE
                    6028            ;
184D 850F83         6029    DTEMP:  MOV     DPH,TEMP5       ;RESTORE DPTR
1850 850E82         6030            MOV     DPL,TEMP4
1853 22             6031            RET
                    6032            ;
1854 85830F         6033    TEMPD:  MOV     TEMP5,DPH
1857 85820E         6034            MOV     TEMP4,DPL
BASIC52E                                                                                                      PAGE 106

185A 22             6035            RET
                    6036            ;
                    6037            ;**************************************************************
                    6038            ;
185B                6039    I_DL:   ; IDLE
                    6040            ;
                    6041            ;**************************************************************
                    6042            ;
185B 202F27         6043            JB      DIRF,E1XX       ;SYNTAX ERROR IN DIRECT INPUT
185E C296           6044            CLR     DACK            ;ACK IDLE
                    6045            ;
1860 438701         6046    U_ID1:  ORL     PCON,#01H
                    6047    ;       DB      01000011B       ;ORL DIRECT OP CODE
                    6048    ;       DB      87H             ;PCON ADDRESS
                    6049    ;       DB      01H             ;SET IDLE BIT
1863 20160B         6050            JB      INTPEN,I_RET    ;EXIT IF EXTERNAL INTERRUPT
1866 102108         6051            JBC     U_IDL,I_RET     ;EXIT IF USER WANTS TO
1869 3010F4         6052            JNB     OTS,U_ID1       ;LOOP IF TIMER NOT ENABLED
186C 1207E3         6053            LCALL   T_CMP           ;CHECK THE TIMER
186F 40EF           6054            JC      U_ID1           ;LOOP IF TIME NOT BIG ENOUGH
                    6055            ;
1871 D296           6056    I_RET:  SETB    DACK            ;RESTORE EXECUTION
1873 22             6057            RET                     ;EXIT IF IT IS
                    6058            ;
                    6059            ;
                    6060            ;
1874 A3             6061    ER0:    INC     DPTR            ;BUMP TO TEXT
1875 202F23         6062            JB      DIRF,ERROR0     ;CAN'T GET OUT OF DIRECT MODE
1878 301320         6063            JNB     ON_ERR,ERROR0   ;IF ON ERROR ISN'T SET, GO BACK
187B 900101         6064            MOV     DPTR,#ERRLOC    ;SAVE THE ERROR CODE
187E 120673         6065            CALL    RC2             ;SAVE ERROR AND SET UP THE STACKS
1881 A3             6066            INC     DPTR            ;POINT AT ERRNUM
1882 020844         6067            JMP     ERL4            ;LOAD ERR NUM AND EXIT
                    6068            ;
                    6069            ; Syntax error
                    6070            ;
1885 A22F           6071    E1XX:   MOV     C,DIRF          ;SEE IF IN DIRECT MODE
1887 901746         6072    E1XX1:  MOV     DPTR,#E1X       ;ERROR MESSAGE
188A 8004           6073            SJMP    ERROR1          ;TRAP ON SET DIRF
                    6074            ;
188C 901836         6075    E1XX2:  MOV     DPTR,#EXI       ;STACK ERROR
                    6076            ;
                    6077            ; Falls through
                    6078            ;
                    6079            ;***************************************************************
                    6080            ;
                    6081            ;ERROR PROCESSOR - PRINT OUT THE ERROR TYPE, CHECK TO SEE IF IN
                    6082            ;                  RUN OR COMMAND MODE, FIND AND PRINT OUT THE
                    6083            ;                  LINE NUMBER IF IN RUN MODE
                    6084            ;
                    6085            ;***************************************************************
                    6086            ;
188F C3             6087    ERROR:  CLR     C               ;RESET STACK
1890 853E81         6088    ERROR1: MOV     SP,SPSAV        ;RESET THE STACK
1893 120C31         6089            LCALL   SPRINT1         ;CLEAR LINE AND AT MODE
1896 E4             6090            CLR     A               ;SET UP TO GET ERROR CODE
1897 93             6091            MOVC    A,@A+DPTR
1898 10E7D9         6092            JBC     ACC.7,ER0       ;PROCESS ERROR
BASIC52E                                                                                                      PAGE 107

                    6093            ;
189B 1154           6094    ERROR0: ACALL   TEMPD           ;SAVE THE DATA POINTER
189D 4003           6095            JC      ERROR01         ;NO RESET IF CARRY IS SET
189F 12066F         6096            LCALL   RC1             ;RESET THE STACKS
18A2 1206A3         6097    ERROR01:CALL    CRLF2           ;DO TWO CARRIAGE RET - LINE FEED
18A5 901FF8         6098            MOV     DPTR,#ERS       ;OUTPUT ERROR MESSAGE
18A8 1206AF         6099            CALL    ROM_P
18AB 114D           6100            CALL    DTEMP           ;GET THE ERROR MESSAGE BACK
                    6101            ;
18AD 1206AF         6102    ERRS:   CALL    ROM_P           ;PRINT ERROR TYPE
18B0 302F05         6103            JNB     DIRF,ER1        ;DO NOT PRINT IN LINE IF DIRF=1
                    6104            ;
18B3 C220           6105    SERR1:  CLR     STOPBIT         ;PRINT STOP THEN EXIT, FOR LIST
18B5 021787         6106            JMP     CMND1
                    6107            ;
18B8 900103         6108    ER1:    MOV     DPTR,#INS       ;OUTPUT IN LINE
18BB 1206AF         6109            CALL    ROM_P
                    6110            ;
                    6111            ;NOW, FIND THE LINE NUMBER
                    6112            ;
                    6113            ;
18BE 120E9B         6114            CALL    DP_B            ;GET THE FIRST ADDRESS OF THE PROGRAM
18C1 E4             6115            CLR     A               ;FOR INITIALIZATION
                    6116            ;
18C2 1154           6117    ER2:    ACALL   TEMPD           ;SAVE THE DPTR
18C4 1205DE         6118            CALL    ADDPTR          ;ADD ACC TO DPTR
18C7 11FB           6119            ACALL   ER4             ;R3:R1 = TXA-DPTR
18C9 4006           6120            JC      ER3             ;EXIT IF DPTR>TXA
18CB 6004           6121            JZ      ER3             ;EXIT IF DPTR=TXA
18CD E0             6122            MOVX    A,@DPTR         ;GET LENGTH
18CE B401F1         6123            CJNE    A,#EOF,ER2      ;SEE IF AT THE END
                    6124            ;
18D1 114D           6125    ER3:    ACALL   DTEMP           ;PUT THE LINE IN THE DPTR
18D3 11FB           6126            ACALL   ER4             ;R3:R1 = TXA - BEGINNING OF LINE
18D5 E9             6127            MOV     A,R1            ;GET LENGTH
18D6 240A           6128            ADD     A,#10           ;ADD 10 TO LENGTH, DPTR STILL HAS ADR
18D8 F545           6129            MOV     MT1,A           ;SAVE THE COUNT
18DA A3             6130            INC     DPTR            ;POINT AT LINE NUMBER HIGH BYTE
18DB 121652         6131            CALL    PMTOP1          ;LOAD R2:R0, PUT IT ON THE STACK
18DE 317D           6132            ACALL   FP_BASE7        ;OUTPUT IT
18E0 2020D0         6133            JB      STOPBIT,SERR1   ;EXIT IF STOP BIT SET
18E3 1206A3         6134            CALL    CRLF2           ;DO SOME CRLF'S
18E6 114D           6135            CALL    DTEMP
18E8 1210A3         6136            CALL    UPPL            ;UNPROCESS THE LINE
18EB 121094         6137            CALL    CL6             ;PRINT IT
18EE 7D2D           6138    ER31:   MOV     R5,#'-'         ;OUTPUT DASHES, THEN AN X
18F0 316C           6139            ACALL   T_L             ;PRINT AN X IF ERROR CHARACTER FOUND
18F2 D545F9         6140            DJNZ    MT1,ER31        ;LOOP UNTIL DONE
18F5 7D58           6141            MOV     R5,#'X'
18F7 316C           6142            ACALL   T_L
18F9 01B3           6143            AJMP    SERR1
                    6144            ;
18FB AB0A           6145    ER4:    MOV     R3,TXAH         ;GET TEXT POINTER AND PERFORM SUBTRACTION
18FD A908           6146            MOV     R1,TXAL
18FF 020A02         6147            JMP     DUBSUB
                    6148            ;
                    6149            ;**************************************************************
                    6150            ;
BASIC52E                                                                                                      PAGE 108

                    6151            ; Interrupt driven timer
                    6152            ;
                    6153            ;**************************************************************
                    6154            ;
1902 854A8C         6155    I_DR:   MOV     TH0,SAVE_T      ;LOAD THE TIMER
1905 C547           6156            XCH     A,MILLIV        ;SAVE A, GET MILLI COUNTER
1907 04             6157            INC     A               ;BUMP COUNTER
1908 B4C808         6158            CJNE    A,#200,TR       ;CHECK OUT TIMER VALUE
190B E4             6159            CLR     A               ;FORCE ACC TO BE ZERO
190C 0549           6160            INC     TVL             ;INCREMENT LOW TIMER
190E B54902         6161            CJNE    A,TVL,TR        ;CHECK LOW VALUE
1911 0548           6162            INC     TVH             ;BUMP TIMER HIGH
                    6163            ;
1913 C547           6164    TR:     XCH     A,MILLIV
1915 D0D0           6165            POP     PSW
1917 32             6166            RETI
                    6167            ;
                    6168            ;**************************************************************
                    6169            ;
                    6170            ; The statement action routine - CLOCK
                    6171            ;
                    6172            ;**************************************************************
                    6173            ;
1918 3138           6174    SCLOCK: ACALL   OTST            ;GET CHARACTER AFTER CLOCK TOKEN
191A C2A9           6175            CLR     ET0
191C C22E           6176            CLR     C_BIT
191E 500D           6177            JNC     SC_R            ;EXIT IF A ZERO
                    6178    ;
                    6179    ;*****************************************************************************
                    6180    ;****** Use XTAL up to 47 MHz ************************************************
                    6181    ;****** Wulf 2 ***************************************************************
                    6182    ;
                    6183    ;       ANL     TMOD,#0F0H      ;SET UP THE MODE
                    6184    ;
1920 5389F1         6185            anl     TMOD,#0F1H      ;Set up 16 bit mode for timer 0
1923 438901         6186            orl     TMOD,#01H
                    6187    ;
                    6188    ;*****************************************************************************
                    6189    ;
1926 D22E           6190            SETB    C_BIT           ;USER INTERRUPTS
1928 43A882         6191            ORL     IE,#82H         ;ENABLE ET0 AND EA
192B D28C           6192            SETB    TR0             ;TURN ON THE TIMER
                    6193            ;
192D 22             6194    SC_R:   RET
                    6195            ;
                    6196            ;***************************************************************
                    6197            ;
192E                6198    SUI:    ; Statement USER IN action routine
                    6199            ;
                    6200            ;***************************************************************
                    6201            ;
192E 3138           6202            ACALL   OTST
1930 921E           6203            MOV     CIUB,C          ;SET OR CLEAR CIUB
1932 22             6204            RET
                    6205            ;
                    6206            ;***************************************************************
                    6207            ;
1933                6208    SUO:    ; Statement USER OUT action routine
BASIC52E                                                                                                      PAGE 109

                    6209            ;
                    6210            ;***************************************************************
                    6211            ;
1933 3138           6212            ACALL   OTST
1935 921C           6213            MOV     COUB,C
1937 22             6214            RET
                    6215            ;
1938                6216    OTST:   ; Check for a one
                    6217            ;
1938 120ED5         6218            LCALL   GCI             ;GET THE CHARACTER, CLEARS CARRY
193B 9431           6219            SUBB    A,#'1'          ;SEE IF A ONE
193D B3             6220            CPL     C               ;SETS CARRY IF ONE, CLEARS IT IF ZERO
193E 22             6221    OTST1:  RET
                    6222            ;
                    6223            ;**************************************************************
                    6224            ;
                    6225            ; IBLK - EXECUTE USER SUPPLIED TOKEN
                    6226            ;
                    6227            ;**************************************************************
                    6228            ;
193F 20D4FC         6229    IBLK:   JB      PSW.4,OTST1     ;EXIT IF REGISTER BANK <> 0
1942 20D3F9         6230            JB      PSW.3,OTST1
1945 10E706         6231            JBC     ACC.7,IBLK1     ;SEE IF BIT SEVEN IS SET
1948 900047         6232            MOV     DPTR,#USENT     ;USER ENTRY LOCATION
194B 02095C         6233            LJMP    ISTA1
                    6234            ;
194E 20E02A         6235    IBLK1:  JB      ACC.0,FP_BASE6  ;FLOATING POINT INPUT
1951 6019           6236            JZ      T_L             ;DO OUTPUT ON 80H
1953 90196D         6237            MOV     DPTR,#FP_BASE-2
1956 73             6238            JMP     @A+DPTR
                    6239            ;
                    6240            ;
                    6241            ;**************************************************************
                    6242            ;
                    6243            ; GET_NUM - GET A NUMBER, EITHER HEX OR FLOAT
                    6244            ;
                    6245            ;**************************************************************
                    6246            ;
1957 3179           6247    GET_NUM:ACALL   FP_BASE5        ;SCAN FOR HEX
1959 5020           6248            JNC     FP_BASE6        ;DO FP INPUT
                    6249            ;
195B 3181           6250            ACALL   FP_BASE9        ;ASCII STRING TO R2:R0
195D 700C           6251            JNZ     H_RET
195F C083           6252            PUSH    DPH             ;SAVE THE DATA_POINTER
1961 C082           6253            PUSH    DPL
1963 3187           6254            ACALL   FP_BASE12       ;PUT R2:R0 ON THE STACK
1965 D082           6255            POP     DPL             ;RESTORE THE DATA_POINTER
1967 D083           6256            POP     DPH
1969 E4             6257            CLR     A               ;NO ERRORS
196A 22             6258            RET                     ;EXIT
                    6259            ;
                    6260            ;**************************************************************
                    6261            ;
                    6262            ; WB - THE EGO MESSAGE
                    6263            ;
                    6264            ;**************************************************************
                    6265    ;
                    6266    ;*****************************************************************************
BASIC52E                                                                                                      PAGE 110

                    6267    ;****** Sorry - but the ego message had to be disabled ***********************
                    6268    ;
                    6269    ;WB:
                    6270    ;
                    6271    ;       DB      'W'+80H,'R'+80H
                    6272    ;       DB      'I'+80H,'T'+80H,'T','E'+80H,'N'+80H
                    6273    ;       DB      ' ','B'+80H,'Y'+80H,' '
                    6274    ;       DB      'J'+80H,'O'+80H,'H'+80H,'N'+80H,' '+80H
                    6275    ;       DB      'K','A'+80H,'T'+80H,'A'+80H,'U'+80H
                    6276    ;       DB      'S','K'+80H,'Y'+80H
                    6277    ;       DB      ', I','N'+80H,'T'+80H,'E'+80H,'L'+80H
                    6278    ;       DB      ' '+80H,'C'+80H,'O'+80H,'R'+80H,'P'+80H
                    6279    ;       DB      '. 1','9'+80H,'85'
                    6280    ;
                    6281    ;*****************************************************************************
                    6282            ;
196B 22             6283    H_RET:  RET
                    6284            ;
                    6285    ;************************************************************
                    6286    ;
                    6287    ; This is a complete BCD floating point package for the 8051 micro-
                    6288    ; controller. It provides 8 digits of accuracy with exponents that
                    6289    ; range from +127 to -127. The mantissa is in packed BCD, while the
                    6290    ; exponent is expressed in pseudo-twos complement. A ZERO exponent
                    6291    ; is used to express the number ZERO. An exponent value of 80H or
                    6292    ; greater than means the exponent is positive, i.e. 80H = E 0,
                    6293    ; 81H = E+1, 82H = E+2 and so on. If the exponent is 7FH or less,
                    6294    ; the exponent is negative, 7FH = E-1, 7EH = E-2, and so on.
                    6295    ; ALL NUMBERS ARE ASSUMED TO BE NORMALIZED and all results are
                    6296    ; normalized after calculation. A normalized mantissa is >=.10 and
                    6297    ; <=.99999999.
                    6298    ;
                    6299    ; The numbers in memory assumed to be stored as follows:
                    6300    ;
                    6301    ; EXPONENT OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE
                    6302    ; SIGN OF ARGUMENT 2       =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-1
                    6303    ; DIGIT 78 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-2
                    6304    ; DIGIT 56 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-3
                    6305    ; DIGIT 34 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-4
                    6306    ; DIGIT 12 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-5
                    6307    ;
                    6308    ; EXPONENT OF ARGUMENT 1   =   VALUE OF ARG_STACK
                    6309    ; SIGN OF ARGUMENT 1       =   VALUE OF ARG_STACK-1
                    6310    ; DIGIT 78 OF ARGUMENT 1   =   VALUE OF ARG_STACK-2
                    6311    ; DIGIT 56 OF ARGUMENT 1   =   VALUE OF ARG_STACK-3
                    6312    ; DIGIT 34 OF ARGUMENT 1   =   VALUE OF ARG_STACK-4
                    6313    ; DIGIT 12 OF ARGUMENT 1   =   VALUE OF ARG_STACK-5
                    6314    ;
                    6315    ; The operations are performed thusly:
                    6316    ;
                    6317    ; ARG_STACK+FP_NUMBER_SIZE = ARG_STACK+FP_NUMBER_SIZE # ARG_STACK
                    6318    ;
                    6319    ; Which is ARGUMENT 2 = ARGUMENT 2 # ARGUMENT 1
                    6320    ;
                    6321    ; Where # can be ADD, SUBTRACT, MULTIPLY OR DIVIDE.
                    6322    ;
                    6323    ; Note that the stack gets popped after an operation.
                    6324    ;
BASIC52E                                                                                                      PAGE 111

                    6325    ; The FP_COMP instruction POPS the ARG_STACK TWICE and returns status.
                    6326    ;
                    6327    ;**********************************************************************
                    6328    ;
                    6329    ;**********************************************************************
                    6330    ;
                    6331    ; STATUS ON RETURN - After performing an operation (+, -, *, /)
                    6332    ;                    the accumulator contains the following status
                    6333    ;
                    6334    ; ACCUMULATOR - BIT 0 - FLOATING POINT UNDERFLOW OCCURED
                    6335    ;
                    6336    ;             - BIT 1 - FLOATING POINT OVERFLOW OCCURED
                    6337    ;
                    6338    ;             - BIT 2 - RESULT WAS ZER0
                    6339    ;
                    6340    ;             - BIT 3 - DIVIDE BY ZERO ATTEMPTED
                    6341    ;
                    6342    ;             - BIT 4 - NOT USED, 0 RETURNED
                    6343    ;
                    6344    ;             - BIT 5 - NOT USED, 0 RETURNED
                    6345    ;
                    6346    ;             - BIT 6 - NOT USED, 0 RETURNED
                    6347    ;
                    6348    ;             - BIT 7 - NOT USED, 0 RETURNED
                    6349    ;
                    6350    ; NOTE: When underflow occures, a ZERO result is returned.
                    6351    ;       When overflow or divide by zero occures, a result of
                    6352    ;       .99999999 E+127 is returned and it is up to the user
                    6353    ;       to handle these conditions as needed in the program.
                    6354    ;
                    6355    ; NOTE: The Compare instruction returns F0 = 0 if ARG 1 = ARG 2
                    6356    ;       and returns a CARRY FLAG = 1 if ARG 1 is > ARG 2
                    6357    ;
                    6358    ;***********************************************************************
                    6359    ;
                    6360    ;***********************************************************************
                    6361    ;
                    6362    ; The following values MUST be provided by the user
                    6363    ;
                    6364    ;***********************************************************************
                    6365    ;
  0009              6366    ARG_STACK       EQU     9       ;ARGUMENT STACK POINTER
  0001              6367    ARG_STACK_PAGE  EQU     1
                    6368    ;OUTPUT          EQU     1990H   ;CALL LOCATION TO OUTPUT A CHARACTER
  0058              6369    CONVERT         EQU     58H     ;LOCATION TO CONVERT NUMBERS
  0019              6370    INTGRC          BIT     25      ;BIT SET IF INTGER ERROR
                    6371    ;
                    6372    ;***********************************************************************
                    6373    ;
                    6374    ; The following equates are used internally
                    6375    ;
                    6376    ;***********************************************************************
                    6377    ;
  0006              6378    FP_NUMBER_SIZE  EQU     6
  0000              6379    UNDERFLOW       EQU     0
  0001              6380    OVERFLOW        EQU     1
  0002              6381    ZERO            EQU     2
  0003              6382    ZERO_DIVIDE     EQU     3
BASIC52E                                                                                                      PAGE 112

                    6383    ;
                    6384    ;***********************************************************************
                    6385    ;
                    6386            ;**************************************************************
                    6387            ;
                    6388            ; The following internal locations are used by the math pack
                    6389            ; ordering is important and the FP_DIGITS must be bit
                    6390            ; addressable
                    6391            ;
                    6392            ;***************************************************************
                    6393            ;
  0028              6394    FP_STATUS       EQU     28H             ;NOT USED
  0029              6395    FP_TEMP         EQU     FP_STATUS+1     ;NOT USED
  002A              6396    FP_CARRY        EQU     FP_STATUS+2     ;USED FOR BITS
  0023              6397    ADD_IN          BIT     35              ;DCMPXZ IN BASIC BACKAGE
  0050              6398    XSIGN           BIT     FP_CARRY.0
  0051              6399    FOUND_RADIX     BIT     FP_CARRY.1
  0052              6400    FIRST_RADIX     BIT     FP_CARRY.2
  0053              6401    DONE_LOAD       BIT     FP_CARRY.3
  002B              6402    FP_DIG12        EQU     FP_CARRY+1
  002C              6403    FP_DIG34        EQU     FP_CARRY+2
  002D              6404    FP_DIG56        EQU     FP_CARRY+3
  002E              6405    FP_DIG78        EQU     FP_CARRY+4
  002F              6406    FP_SIGN         EQU     FP_CARRY+5
  0078              6407    MSIGN           BIT     FP_SIGN.0
  0030              6408    FP_EXP          EQU     FP_CARRY+6
  002B              6409    FP_NIB1         EQU     FP_DIG12
  002C              6410    FP_NIB2         EQU     FP_NIB1+1
  002D              6411    FP_NIB3         EQU     FP_NIB1+2
  002E              6412    FP_NIB4         EQU     FP_NIB1+3
  002F              6413    FP_NIB5         EQU     FP_NIB1+4
  0030              6414    FP_NIB6         EQU     FP_NIB1+5
  0031              6415    FP_NIB7         EQU     FP_NIB1+6
  0032              6416    FP_NIB8         EQU     FP_NIB1+7
  0033              6417    FP_ACCX         EQU     FP_NIB1+8
  0034              6418    FP_ACCC         EQU     FP_NIB1+9
  0035              6419    FP_ACC1         EQU     FP_NIB1+10
  0036              6420    FP_ACC2         EQU     FP_NIB1+11
  0037              6421    FP_ACC3         EQU     FP_NIB1+12
  0038              6422    FP_ACC4         EQU     FP_NIB1+13
  0039              6423    FP_ACC5         EQU     FP_NIB1+14
  003A              6424    FP_ACC6         EQU     FP_NIB1+15
  003B              6425    FP_ACC7         EQU     FP_NIB1+16
  003C              6426    FP_ACC8         EQU     FP_NIB1+17
  003D              6427    FP_ACCS         EQU     FP_NIB1+18
                    6428            ;
                    6429    ;        ORG     1990H
                    6430            ;
196C                6431    OUTPUT:
196C 020711         6432    T_L:    LJMP    TEROT
                    6433            ;
                    6434            ;
                    6435            ;**************************************************************
                    6436            ;
                    6437            ; The floating point entry points and jump table
                    6438            ;
                    6439            ;**************************************************************
                    6440            ;
BASIC52E                                                                                                      PAGE 113

196F 2193           6441    FP_BASE:        AJMP    FLOATING_ADD
1971 2189           6442    FP_BASE1:       AJMP    FLOATING_SUB
1973 4143           6443    FP_BASE2:       AJMP    FLOATING_COMP
1975 4173           6444    FP_BASE3:       AJMP    FLOATING_MUL
1977 41B0           6445    FP_BASE4:       AJMP    FLOATING_DIV
1979 8189           6446    FP_BASE5:       AJMP    HEXSCAN
197B 81C2           6447    FP_BASE6:       AJMP    FLOATING_POINT_INPUT
197D A17A           6448    FP_BASE7:       AJMP    FLOATING_POINT_OUTPUT
197F C1F7           6449    FP_BASE8:       AJMP    CONVERT_BINARY_TO_ASCII_STRING
1981 C19E           6450    FP_BASE9:       AJMP    CONVERT_ASCII_STRING_TO_BINARY
1983 C1D3           6451    FP_BASE10:      AJMP    MULNUM10
1985 E130           6452    FP_BASE11:      AJMP    HEXOUT
1987 81B6           6453    FP_BASE12:      AJMP    PUSHR2R0
                    6454            ;
                    6455            ;
1989                6456    FLOATING_SUB:
                    6457            ;
1989 75A001         6458            MOV     P2,#ARG_STACK_PAGE
198C A809           6459            MOV     R0,ARG_STACK
198E 18             6460            DEC     R0              ;POINT TO SIGN
198F E2             6461            MOVX    A,@R0           ;READ SIGN
1990 B2E0           6462            CPL     ACC.0
1992 F2             6463            MOVX    @R0,A
                    6464            ;
                    6465            ;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                    6466            ;
1993                6467    FLOATING_ADD:
                    6468            ;
                    6469            ;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                    6470            ;
                    6471            ;
1993 916A           6472            ACALL   MDES1           ;R7=TOS EXP, R6=TOS-1 EXP, R4=TOS SIGN
                    6473                                    ;R3=TOS-1 SIGN, OPERATION IS R1 # R0
                    6474            ;
1995 EF             6475            MOV     A,R7            ;GET TOS EXPONENT
1996 600D           6476            JZ      POP_AND_EXIT    ;IF TOS=0 THEN POP AND EXIT
1998 BE0012         6477            CJNE    R6,#0,LOAD1     ;CLEAR CARRY EXIT IF ZERO
                    6478            ;
                    6479            ;**************************************************************
                    6480            ;
199B                6481    SWAP_AND_EXIT:  ; Swap external args and return
                    6482            ;
                    6483            ;**************************************************************
                    6484            ;
199B 915E           6485            ACALL   LOAD_POINTERS
199D 7F06           6486            MOV     R7,#FP_NUMBER_SIZE
                    6487            ;
199F E2             6488    SE1:    MOVX    A,@R0           ;SWAP THE ARGUMENTS
19A0 F3             6489            MOVX    @R1,A
19A1 18             6490            DEC     R0
19A2 19             6491            DEC     R1
19A3 DFFA           6492            DJNZ    R7,SE1
                    6493            ;
19A5                6494    POP_AND_EXIT:
                    6495            ;
19A5 E509           6496            MOV     A,ARG_STACK     ;POP THE STACK
19A7 2406           6497            ADD     A,#FP_NUMBER_SIZE
19A9 F509           6498            MOV     ARG_STACK,A
BASIC52E                                                                                                      PAGE 114

19AB E4             6499            CLR     A
19AC 22             6500            RET
                    6501            ;
                    6502            ;
19AD 9E             6503    LOAD1:  SUBB    A,R6            ;A = ARG 1 EXP - ARG 2 EXP
19AE 8F30           6504            MOV     FP_EXP,R7       ;SAVE EXPONENT AND SIGN
19B0 8C2F           6505            MOV     FP_SIGN,R4
19B2 5009           6506            JNC     LOAD2           ;ARG1 EXPONENT IS LARGER OR SAME
19B4 8E30           6507            MOV     FP_EXP,R6
19B6 8B2F           6508            MOV     FP_SIGN,R3
19B8 F4             6509            CPL     A
19B9 04             6510            INC     A               ;COMPENSATE FOR EXP DELTA
19BA C8             6511            XCH     A,R0            ;FORCE R0 TO POINT AT THE LARGEST
19BB C9             6512            XCH     A,R1            ;EXPONENT
19BC C8             6513            XCH     A,R0
                    6514            ;
19BD FF             6515    LOAD2:  MOV     R7,A            ;SAVE THE EXPONENT DELTA IN R7
19BE C223           6516            CLR     ADD_IN
19C0 BD0002         6517            CJNE    R5,#0,LOAD21
19C3 D223           6518            SETB    ADD_IN
                    6519            ;
                    6520            ; Load the R1 mantissa
                    6521            ;
19C5 917B           6522    LOAD21: ACALL   LOADR1_MANTISSA ;LOAD THE SMALLEST NUMBER
                    6523            ;
                    6524            ; Now align the number to the delta exponent
                    6525            ; R4 points to the string of the last digits lost
                    6526            ;
19C7 BF0B00         6527            CJNE    R7,#DIGIT+DIGIT+3,LOAD22
19CA 4002           6528    LOAD22: JC      LOAD23
19CC 7F0A           6529            MOV     R7,#DIGIT+DIGIT+2
                    6530            ;
19CE 752A00         6531    LOAD23: MOV     FP_CARRY,#00    ;CLEAR THE CARRY
19D1 71BB           6532            ACALL   RIGHT           ;SHIFT THE NUMBER
                    6533            ;
                    6534            ; Set up for addition and subtraction
                    6535            ;
19D3 7F04           6536            MOV     R7,#DIGIT       ;LOOP COUNT
19D5 792E           6537            MOV     R1,#FP_DIG78
                    6538    ;
                    6539    ;*****************************************************************************
                    6540    ;****** Elektor 2 Patch ******************************************************
                    6541    ;****** Floting Point Error, found by D. Mudric and Z. Stojsavljevic *********
                    6542    ;
                    6543    ;       MOV     A,#9EH
                    6544    ;****** Error Number 1
                    6545    ;
                    6546    ;****** Value in R4 must be complemented with 100D (#9AH), it must be the
                    6547    ;****** first complement
                    6548    ;
                    6549    ;       CLR     C
                    6550    ;       SUBB    A,R4
                    6551    ;       DA      A
                    6552    ;       XCH     A,R4
                    6553    ;       JNZ     LOAD24
                    6554    ;       MOV     R4,A
                    6555    ;****** Error Number 2
                    6556    ;
BASIC52E                                                                                                      PAGE 115

                    6557    ;****** With substraction, after reducing both the minuend and the
                    6558    ;****** subtrahend to the same exponents, when R4 <> 0, it is obvious
                    6559    ;****** that one always has to make a borrowing from the first higher
                    6560    ;****** position of the minuend, not as it is stated by the original
                    6561    ;****** were it is made only when R4 = 50H
                    6562    ;
                    6563    ;LOAD24: CJNE    A,#50H,LOAD25   ;TEST FOR SUBTRACTION
                    6564    ;LOAD25: JNB     ADD_IN,SUBLP    ;DO SUBTRACTION IF NO ADD_IN
                    6565    ;
                    6566    ;*****************************************************************************
                    6567    ;****** Proper code starts here: *********************************************
                    6568    ;
19D7 749A           6569            mov     A,#9AH
19D9 C3             6570            clr     C
19DA 9C             6571            subb    A,R4
19DB D4             6572            da      A
19DC CC             6573            xch     A,R4
19DD 30231B         6574            jnb     ADD_IN,SUBLP
19E0 B45000         6575            cjne    A,#50H,LOAD25
                    6576    ;
                    6577    ;****** continue with original code: *****************************************
                    6578    ;
19E3 B3             6579    LOAD25: CPL     C               ;FLIP CARRY FOR ADDITION
19E4 31F2           6580            ACALL   ADDLP           ;DO ADDITION
                    6581            ;
19E6 5008           6582            JNC     ADD_R
19E8 052A           6583            INC     FP_CARRY
19EA 7F01           6584            MOV     R7,#1
19EC 71BB           6585            ACALL   RIGHT
19EE 7172           6586            ACALL   INC_FP_EXP      ;SHIFT AND BUMP EXPONENT
                    6587            ;
19F0 6163           6588    ADD_R:  AJMP    STORE_ALIGN_TEST_AND_EXIT
                    6589            ;
19F2 E2             6590    ADDLP:  MOVX    A,@R0
19F3 37             6591            ADDC    A,@R1
19F4 D4             6592            DA      A
19F5 F7             6593            MOV     @R1,A
19F6 18             6594            DEC     R0
19F7 19             6595            DEC     R1
19F8 DFF8           6596            DJNZ    R7,ADDLP        ;LOOP UNTIL DONE
19FA 22             6597            RET
                    6598            ;
19FB E2             6599    SUBLP:  MOVX    A,@R0           ;NOW DO SUBTRACTION
19FC FE             6600            MOV     R6,A
19FD E4             6601            CLR     A
19FE 3499           6602            ADDC    A,#99H
1A00 97             6603            SUBB    A,@R1
1A01 2E             6604            ADD     A,R6
1A02 D4             6605            DA      A
1A03 F7             6606            MOV     @R1,A
1A04 18             6607            DEC     R0
1A05 19             6608            DEC     R1
1A06 DFF3           6609            DJNZ    R7,SUBLP
1A08 4011           6610            JC      FSUB6
                    6611            ;
                    6612            ; Need to complement the result and sign because the floating
                    6613            ; point accumulator mantissa was larger than the external
                    6614            ; memory and their signs were equal.
BASIC52E                                                                                                      PAGE 116

                    6615            ;
1A0A B278           6616            CPL     FP_SIGN.0
1A0C 792E           6617            MOV     R1,#FP_DIG78
1A0E 7F04           6618            MOV     R7,#DIGIT       ;LOOP COUNT
                    6619            ;
1A10 749A           6620    FSUB5:  MOV     A,#9AH
1A12 97             6621            SUBB    A,@R1
1A13 2400           6622            ADD     A,#0
1A15 D4             6623            DA      A
1A16 F7             6624            MOV     @R1,A
1A17 19             6625            DEC     R1
1A18 B3             6626            CPL     C
1A19 DFF5           6627            DJNZ    R7,FSUB5        ;LOOP
                    6628            ;
                    6629            ; Now see how many zeros their are
                    6630            ;
1A1B 782B           6631    FSUB6:  MOV     R0,#FP_DIG12
1A1D 7F00           6632            MOV     R7,#0
                    6633            ;
1A1F E6             6634    FSUB7:  MOV     A,@R0
1A20 7008           6635            JNZ     FSUB8
1A22 0F             6636            INC     R7
1A23 0F             6637            INC     R7
1A24 08             6638            INC     R0
1A25 B82FF7         6639            CJNE    R0,#FP_SIGN,FSUB7
1A28 61AB           6640            AJMP    ZERO_AND_EXIT
                    6641            ;
1A2A B41000         6642    FSUB8:  CJNE    A,#10H,FSUB81
1A2D 5001           6643    FSUB81: JNC     FSUB9
1A2F 0F             6644            INC     R7
                    6645            ;
                    6646            ; Now R7 has the number of leading zeros in the FP ACC
                    6647            ;
1A30 E530           6648    FSUB9:  MOV     A,FP_EXP        ;GET THE OLD EXPONENT
1A32 C3             6649            CLR     C
1A33 9F             6650            SUBB    A,R7            ;SUBTRACT FROM THE NUMBER OF ZEROS
1A34 600B           6651            JZ      FSUB10
1A36 4009           6652            JC      FSUB10
                    6653            ;
1A38 F530           6654            MOV     FP_EXP,A        ;SAVE THE NEW EXPONENT
                    6655            ;
1A3A 71F5           6656            ACALL   LEFT1           ;SHIFT THE FP ACC
1A3C 752A00         6657            MOV     FP_CARRY,#0
1A3F 6163           6658            AJMP    STORE_ALIGN_TEST_AND_EXIT
                    6659            ;
1A41 61A5           6660    FSUB10: AJMP    UNDERFLOW_AND_EXIT
                    6661            ;
                    6662            ;***************************************************************
                    6663            ;
1A43                6664    FLOATING_COMP:  ; Compare two floating point numbers
                    6665                    ; used for relational operations and is faster
                    6666                    ; than subtraction. ON RETURN, The carry is set
                    6667                    ; if ARG1 is > ARG2, else carry is not set
                    6668                    ; if ARG1 = ARG2, F0 gets set
                    6669            ;
                    6670            ;***************************************************************
                    6671            ;
1A43 916A           6672            ACALL   MDES1           ;SET UP THE REGISTERS
BASIC52E                                                                                                      PAGE 117

1A45 E509           6673            MOV     A,ARG_STACK
1A47 240C           6674            ADD     A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
1A49 F509           6675            MOV     ARG_STACK,A     ;POP THE STACK TWICE, CLEAR THE CARRY
1A4B EE             6676            MOV     A,R6            ;CHECK OUT EXPONENTS
1A4C C2D5           6677            CLR     F0
1A4E 9F             6678            SUBB    A,R7
1A4F 600A           6679            JZ      EXPONENTS_EQUAL
1A51 4003           6680            JC      ARG1_EXP_IS_LARGER
                    6681            ;
                    6682            ; Now the ARG2 EXPONENT is > ARG1 EXPONENT
                    6683            ;
1A53                6684    SIGNS_DIFFERENT:
                    6685            ;
1A53 EB             6686            MOV     A,R3            ;SEE IF SIGN OF ARG2 IS POSITIVE
1A54 8001           6687            SJMP    ARG1_EXP_IS_LARGER1
                    6688            ;
1A56                6689    ARG1_EXP_IS_LARGER:
                    6690            ;
1A56 EC             6691            MOV     A,R4            ;GET THE SIGN OF ARG1 EXPONENT
1A57                6692    ARG1_EXP_IS_LARGER1:
1A57 6001           6693            JZ      ARG1_EXP_IS_LARGER2
1A59 B3             6694            CPL     C
1A5A                6695    ARG1_EXP_IS_LARGER2:
1A5A 22             6696            RET
                    6697            ;
1A5B                6698    EXPONENTS_EQUAL:
                    6699            ;
                    6700            ; First, test the sign, then the mantissa
                    6701            ;
1A5B BD00F5         6702            CJNE    R5,#0,SIGNS_DIFFERENT
                    6703            ;
1A5E                6704    BOTH_PLUS:
                    6705            ;
1A5E 7F04           6706            MOV     R7,#DIGIT       ;POINT AT MS DIGIT
1A60 18             6707            DEC     R0
1A61 18             6708            DEC     R0
1A62 18             6709            DEC     R0
1A63 19             6710            DEC     R1
1A64 19             6711            DEC     R1
1A65 19             6712            DEC     R1
                    6713            ;
                    6714            ; Now do the compare
                    6715            ;
1A66 E2             6716    CLOOP:  MOVX    A,@R0
1A67 FE             6717            MOV     R6,A
1A68 E3             6718            MOVX    A,@R1
1A69 9E             6719            SUBB    A,R6
1A6A 70EA           6720            JNZ     ARG1_EXP_IS_LARGER
1A6C 08             6721            INC     R0
1A6D 09             6722            INC     R1
1A6E DFF6           6723            DJNZ    R7,CLOOP
                    6724            ;
                    6725            ; If here, the numbers are the same, the carry is cleared
                    6726            ;
1A70 D2D5           6727            SETB    F0
1A72 22             6728            RET                     ;EXIT WITH EQUAL
                    6729            ;
                    6730    ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
BASIC52E                                                                                                      PAGE 118

                    6731    ;
1A73                6732    FLOATING_MUL:   ; Floating point multiply
                    6733    ;
                    6734    ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
                    6735    ;
1A73 9168           6736            ACALL   MUL_DIV_EXP_AND_SIGN
                    6737            ;
                    6738            ; check for zero exponents
                    6739            ;
1A75 BE0002         6740            CJNE    R6,#00,FMUL1    ;ARG 2 EXP ZERO?
1A78 61AB           6741    FMUL0:  AJMP    ZERO_AND_EXIT
                    6742            ;
                    6743            ; calculate the exponent
                    6744            ;
1A7A 8D2F           6745    FMUL1:  MOV     FP_SIGN,R5      ;SAVE THE SIGN, IN CASE OF FAILURE
                    6746            ;
1A7C EF             6747            MOV     A,R7
1A7D 60F9           6748            JZ      FMUL0
1A7F 2E             6749            ADD     A,R6            ;ADD THE EXPONENTS
1A80 20E705         6750            JB      ACC.7,FMUL_OVER
1A83 10D708         6751            JBC     CY,FMUL21       ;SEE IF CARRY IS SET
                    6752            ;
1A86 61A5           6753            AJMP    UNDERFLOW_AND_EXIT
                    6754            ;
1A88                6755    FMUL_OVER:
                    6756            ;
1A88 5002           6757            JNC     FMUL2           ;OK IF SET
                    6758            ;
1A8A 6194           6759    FOV:    AJMP    OVERFLOW_AND_EXIT
                    6760    ;*****************************************************************************
                    6761    ;****** Wulf 1 Bugfix 1 ******************************************************
                    6762    ;****** Multiplication Error, found by D. Wulf *******************************
                    6763    ;
                    6764    ; FMUL2: SUBB    A,#129          ;SUBTRACT THE EXPONENT BIAS
                    6765    ;
                    6766    ;*****************************************************************************
                    6767    ;****** Proper code starts here: *********************************************
                    6768    ;
1A8C D228           6769    FMUL2:  setb    mul_underflow   ;Flag of multiplication limit case
1A8E 9483           6770    FMUL21: subb    A,#83H          ;exp. multipl. results are within the limits
1A90 04             6771            inc     A               ;Correct SUBB 83H
1A91 04             6772            inc     A               ;to original SUBB 81H
1A92 4002           6773            jc     NMARK_L          ;Limit case
1A94 C228           6774            clr     mul_underflow   ;No limit case
1A96                6775    NMARK_L:
                    6776    ;
                    6777    ;****** continue with original code: *****************************************
                    6778    ;
1A96 FE             6779            MOV     R6,A            ;SAVE IT FOR LATER
                    6780            ;
                    6781            ; Unpack and load R0
                    6782            ;
1A97 717E           6783            ACALL   UNPACK_R0
                    6784            ;
                    6785            ; Now set up for loop multiply
                    6786            ;
1A99 7B04           6787            MOV     R3,#DIGIT
1A9B AC01           6788            MOV     R4,R1B0
BASIC52E                                                                                                      PAGE 119

                    6789            ;
                    6790            ; Now, do the multiply and accumulate the product
                    6791            ;
1A9D 8C01           6792    FMUL3:  MOV     R1B0,R4
1A9F E3             6793            MOVX    A,@R1
1AA0 FA             6794            MOV     R2,A
1AA1 912B           6795            ACALL   MUL_NIBBLE
                    6796            ;
1AA3 EA             6797            MOV     A,R2
1AA4 C4             6798            SWAP    A
1AA5 912B           6799            ACALL   MUL_NIBBLE
1AA7 1C             6800            DEC     R4
1AA8 DBF3           6801            DJNZ    R3,FMUL3
                    6802            ;
                    6803            ; Now, pack and restore the sign
                    6804            ;
1AAA 8E30           6805            MOV     FP_EXP,R6
1AAC 8D2F           6806            MOV     FP_SIGN,R5
1AAE 6111           6807            AJMP    PACK            ;FINISH IT OFF
                    6808            ;
                    6809            ;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    6810            ;
1AB0                6811    FLOATING_DIV:
                    6812            ;
                    6813            ;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    6814            ;
1AB0 916A           6815            ACALL   MDES1
                    6816            ;
                    6817            ; Check the exponents
                    6818            ;
1AB2 8D2F           6819            MOV     FP_SIGN,R5      ;SAVE THE SIGN
1AB4 BF0006         6820            CJNE    R7,#0,DIV0      ;CLEARS THE CARRY
1AB7 7194           6821            ACALL   OVERFLOW_AND_EXIT
1AB9 E4             6822            CLR     A
1ABA D2E3           6823            SETB    ACC.ZERO_DIVIDE
1ABC 22             6824            RET
                    6825            ;
1ABD EE             6826    DIV0:   MOV     A,R6            ;GET EXPONENT
1ABE 60B8           6827            JZ      FMUL0           ;EXIT IF ZERO
1AC0 9F             6828            SUBB    A,R7            ;DELTA EXPONENT
1AC1 20E704         6829            JB      ACC.7,D_UNDER
1AC4 5004           6830            JNC     DIV3
1AC6 61A5           6831            AJMP    UNDERFLOW_AND_EXIT
                    6832            ;
1AC8 50C0           6833    D_UNDER:JNC     FOV
                    6834            ;
1ACA 2481           6835    DIV3:   ADD     A,#129          ;CORRECTLY BIAS THE EXPONENT
1ACC F530           6836            MOV     FP_EXP,A        ;SAVE THE EXPONENT
1ACE 917B           6837            ACALL   LOADR1_MANTISSA ;LOAD THE DIVIDED
                    6838            ;
1AD0 7A34           6839            MOV     R2,#FP_ACCC     ;SAVE LOCATION
1AD2 AB00           6840            MOV     R3,R0B0         ;SAVE POINTER IN R3
1AD4 752A00         6841            MOV     FP_CARRY,#0     ;ZERO CARRY BYTE
                    6842            ;
1AD7 7DFF           6843    DIV4:   MOV     R5,#0FFH        ;LOOP COUNT
1AD9 D3             6844            SETB    C
                    6845            ;
1ADA 8B00           6846    DIV5:   MOV     R0B0,R3         ;RESTORE THE EXTERNAL POINTER
BASIC52E                                                                                                      PAGE 120

1ADC 792E           6847            MOV     R1,#FP_DIG78    ;SET UP INTERNAL POINTER
1ADE 7F04           6848            MOV     R7,#DIGIT       ;LOOP COUNT
1AE0 5017           6849            JNC     DIV7            ;EXIT IF NO CARRY
                    6850            ;
1AE2 E2             6851    DIV6:   MOVX    A,@R0           ;DO ACCUMLATION
1AE3 FE             6852            MOV     R6,A
1AE4 E4             6853            CLR     A
1AE5 3499           6854            ADDC    A,#99H
1AE7 9E             6855            SUBB    A,R6
1AE8 27             6856            ADD     A,@R1
1AE9 D4             6857            DA      A
1AEA F7             6858            MOV     @R1,A
1AEB 18             6859            DEC     R0
1AEC 19             6860            DEC     R1
1AED DFF3           6861            DJNZ    R7,DIV6         ;LOOP
                    6862            ;
1AEF 0D             6863            INC     R5              ;SUBTRACT COUNTER
1AF0 40E8           6864            JC      DIV5            ;KEEP LOOPING IF CARRY
1AF2 E7             6865            MOV     A,@R1           ;GET CARRY
1AF3 9401           6866            SUBB    A,#1            ;CARRY IS CLEARED
1AF5 F7             6867            MOV     @R1,A           ;SAVE CARRY DIGIT
1AF6 B3             6868            CPL     C
1AF7 80E1           6869            SJMP    DIV5            ;LOOP
                    6870            ;
                    6871            ; Restore the result if carry was found
                    6872            ;
1AF9 31F2           6873    DIV7:   ACALL   ADDLP           ;ADD NUMBER BACK
1AFB 7700           6874            MOV     @R1,#0          ;CLEAR CARRY
1AFD 8A00           6875            MOV     R0B0,R2         ;GET SAVE COUNTER
1AFF A605           6876            MOV     @R0,5           ;SAVE COUNT BYTE
                    6877            ;
1B01 0A             6878            INC     R2              ;ADJUST SAVE COUNTER
1B02 7F01           6879            MOV     R7,#1           ;BUMP DIVIDEND
1B04 71F3           6880            ACALL   LEFT
1B06 BA3ECE         6881            CJNE    R2,#FP_ACC8+2,DIV4
                    6882            ;
1B09 D53002         6883            DJNZ    FP_EXP,DIV8
1B0C 61A5           6884            AJMP    UNDERFLOW_AND_EXIT
                    6885            ;
1B0E 752A00         6886    DIV8:   MOV     FP_CARRY,#0
                    6887            ;
                    6888            ;***************************************************************
                    6889            ;
1B11                6890    PACK:   ; Pack the mantissa
                    6891            ;
                    6892            ;***************************************************************
                    6893            ;
                    6894            ; First, set up the pointers
                    6895            ;
1B11 7834           6896            MOV     R0,#FP_ACCC
1B13 E6             6897            MOV     A,@R0           ;GET FP_ACCC
1B14 FE             6898            MOV     R6,A            ;SAVE FOR ZERO COUNT
1B15 6003           6899            JZ      PACK0           ;JUMP OVER IF ZERO
1B17 7172           6900            ACALL   INC_FP_EXP      ;BUMP THE EXPONENT
1B19 18             6901            DEC     R0
                    6902            ;
1B1A 08             6903    PACK0:  INC     R0              ;POINT AT FP_ACC1
                    6904            ;
BASIC52E                                                                                                      PAGE 121

1B1B 7408           6905    PACK1:  MOV     A,#8            ;ADJUST NIBBLE POINTER
1B1D F9             6906            MOV     R1,A
1B1E 28             6907            ADD     A,R0
1B1F F8             6908            MOV     R0,A
1B20 B60500         6909            CJNE    @R0,#5,PACK11   ;SEE IF ADJUSTING NEEDED
1B23 4013           6910    PACK11: JC      PACK31
                    6911            ;
1B25 D3             6912    PACK2:  SETB    C
1B26 E4             6913            CLR     A
1B27 18             6914            DEC     R0
1B28 36             6915            ADDC    A,@R0
1B29 D4             6916            DA      A
1B2A D6             6917            XCHD    A,@R0           ;SAVE THE VALUE
1B2B 30E409         6918            JNB     ACC.4,PACK3
1B2E D9F5           6919            DJNZ    R1,PACK2
                    6920            ;
1B30 18             6921            DEC     R0
1B31 7601           6922            MOV     @R0,#1
1B33 7172           6923            ACALL   INC_FP_EXP
1B35 8018           6924            SJMP    PACK4
                    6925            ;
1B37 19             6926    PACK3:  DEC     R1
1B38 E9             6927    PACK31: MOV     A,R1
1B39 C3             6928            CLR     C
1B3A C8             6929            XCH     A,R0
1B3B 98             6930            SUBB    A,R0
1B3C F8             6931            MOV     R0,A
                    6932    ;
                    6933    ;*****************************************************************************
                    6934    ;****** Wulf 1 Bugfix 2 ******************************************************
                    6935    ;****** Multiplication Error, found by D. Wulf *******************************
                    6936    ;
1B3D 30280F         6937            jnb     mul_underflow,PACK4
1B40 C228           6938            clr     mul_underflow
1B42 E530           6939            mov     A,FP_EXP        ;test of exceeding in limit case
1B44 6007           6940            jz      UNDER_MD        ;message about underflow
1B46 F4             6941            cpl     a               ;test of exceeding in limit case
1B47 6004           6942            jz      UNDER_MD        ;message about underflow
1B49 F4             6943            cpl     a               ;restore original exp
1B4A B40102         6944            cjne    a,#1,pack4      ;jump if not outer limit
1B4D                6945    UNDER_MD:
1B4D 61A5           6946            ajmp    UNDERFLOW_AND_EXIT
                    6947    ;
                    6948    ;****** continue with original code: *****************************************
                    6949    ;
1B4F 792B           6950    PACK4:  MOV     R1,#FP_DIG12
                    6951            ;
                    6952            ; Now, pack
                    6953            ;
1B51 E6             6954    PLOOP:  MOV     A,@R0
1B52 C4             6955            SWAP    A               ;FLIP THE DIGITS
1B53 08             6956            INC     R0
1B54 D6             6957            XCHD    A,@R0
1B55 4206           6958            ORL     6,A             ;ACCUMULATE THE OR'ED DIGITS
1B57 F7             6959            MOV     @R1,A
1B58 08             6960            INC     R0
1B59 09             6961            INC     R1
1B5A B92FF4         6962            CJNE    R1,#FP_SIGN,PLOOP
BASIC52E                                                                                                      PAGE 122

1B5D EE             6963            MOV     A,R6
1B5E 7003           6964            JNZ     STORE_ALIGN_TEST_AND_EXIT
1B60 753000         6965            MOV     FP_EXP,#0       ;ZERO EXPONENT
                    6966            ;
                    6967            ;**************************************************************
                    6968            ;
1B63                6969    STORE_ALIGN_TEST_AND_EXIT:      ;Save the number align carry and exit
                    6970            ;
                    6971            ;**************************************************************
                    6972            ;
1B63 915E           6973            ACALL   LOAD_POINTERS
1B65 8909           6974            MOV     ARG_STACK,R1    ;SET UP THE NEW STACK
1B67 7830           6975            MOV     R0,#FP_EXP
                    6976            ;
                    6977            ; Now load the numbers
                    6978            ;
1B69 E6             6979    STORE2: MOV     A,@R0
1B6A F3             6980            MOVX    @R1,A           ;SAVE THE NUMBER
1B6B 18             6981            DEC     R0
1B6C 19             6982            DEC     R1
1B6D B82AF9         6983            CJNE    R0,#FP_CARRY,STORE2
                    6984            ;
1B70 E4             6985            CLR     A               ;NO ERRORS
                    6986            ;
1B71 22             6987    PRET:   RET                     ;EXIT
                    6988            ;
1B72                6989    INC_FP_EXP:
                    6990            ;
1B72 0530           6991            INC     FP_EXP
1B74 E530           6992            MOV     A,FP_EXP
1B76 70F9           6993            JNZ     PRET            ;EXIT IF NOT ZERO
1B78 D0E0           6994            POP     ACC             ;WASTE THE CALLING STACK
1B7A D0E0           6995            POP     ACC
1B7C 6194           6996            AJMP    OVERFLOW_AND_EXIT
                    6997    ;
                    6998    ;***********************************************************************
                    6999    ;
1B7E                7000    UNPACK_R0:      ; Unpack BCD digits and load into nibble locations
                    7001    ;
                    7002    ;***********************************************************************
                    7003            ;
1B7E C001           7004            PUSH    R1B0
1B80 7932           7005            MOV     R1,#FP_NIB8
                    7006            ;
1B82 E2             7007    ULOOP:  MOVX    A,@R0
1B83 540F           7008            ANL     A,#0FH
1B85 F7             7009            MOV     @R1,A           ;SAVE THE NIBBLE
1B86 E2             7010            MOVX    A,@R0
1B87 C4             7011            SWAP    A
1B88 540F           7012            ANL     A,#0FH
1B8A 19             7013            DEC     R1
1B8B F7             7014            MOV     @R1,A           ;SAVE THE NIBBLE AGAIN
1B8C 18             7015            DEC     R0
1B8D 19             7016            DEC     R1
1B8E B92AF1         7017            CJNE    R1,#FP_NIB1-1,ULOOP
                    7018            ;
1B91 D001           7019            POP     R1B0
                    7020            ;
BASIC52E                                                                                                      PAGE 123

1B93 22             7021    LOAD7:  RET
                    7022            ;
                    7023            ;**************************************************************
                    7024            ;
1B94                7025    OVERFLOW_AND_EXIT:      ;LOAD 99999999 E+127,  SET OV BIT, AND EXIT
                    7026            ;
                    7027            ;**************************************************************
                    7028            ;
1B94 782E           7029            MOV     R0,#FP_DIG78
1B96 7499           7030            MOV     A,#99H
                    7031            ;
1B98 F6             7032    OVE1:   MOV     @R0,A
1B99 18             7033            DEC     R0
1B9A B82AFB         7034            CJNE    R0,#FP_CARRY,OVE1
                    7035            ;
1B9D 7530FF         7036            MOV     FP_EXP,#0FFH
1BA0 7163           7037            ACALL   STORE_ALIGN_TEST_AND_EXIT
                    7038            ;
1BA2 D2E1           7039            SETB    ACC.OVERFLOW
1BA4 22             7040            RET
                    7041            ;
                    7042            ;**************************************************************
                    7043            ;
1BA5                7044    UNDERFLOW_AND_EXIT:     ;LOAD 0, SET UF BIT, AND EXIT
                    7045            ;
                    7046            ;**************************************************************
                    7047            ;
1BA5 71AB           7048            ACALL   ZERO_AND_EXIT
1BA7 E4             7049            CLR     A
1BA8 D2E0           7050            SETB    ACC.UNDERFLOW
1BAA 22             7051            RET
                    7052            ;
                    7053            ;**************************************************************
                    7054            ;
1BAB                7055    ZERO_AND_EXIT:          ;LOAD 0, SET ZERO BIT, AND EXIT
                    7056            ;
                    7057            ;**************************************************************
                    7058            ;
1BAB 71B2           7059            ACALL   FP_CLEAR
1BAD 7163           7060            ACALL   STORE_ALIGN_TEST_AND_EXIT
1BAF D2E2           7061            SETB    ACC.ZERO
1BB1 22             7062            RET                     ;EXIT
                    7063            ;
                    7064            ;**************************************************************
                    7065            ;
1BB2                7066    FP_CLEAR:
                    7067            ;
                    7068            ; Clear internal storage
                    7069            ;
                    7070            ;**************************************************************
                    7071            ;
1BB2 E4             7072            CLR     A
1BB3 783D           7073            MOV     R0,#FP_ACC8+1
                    7074            ;
1BB5 F6             7075    FPC1:   MOV     @R0,A
1BB6 18             7076            DEC     R0
1BB7 B829FB         7077            CJNE    R0,#FP_TEMP,FPC1
1BBA 22             7078            RET
BASIC52E                                                                                                      PAGE 124

                    7079            ;
                    7080            ;**************************************************************
                    7081            ;
1BBB                7082    RIGHT:  ; Shift ACCUMULATOR RIGHT the number of nibbles in R7
                    7083            ; Save the shifted values in R4 if SAVE_ROUND is set
                    7084            ;
                    7085            ;**************************************************************
                    7086            ;
1BBB 7C00           7087            MOV     R4,#0           ;IN CASE OF NO SHIFT
                    7088            ;
1BBD C3             7089    RIGHT1: CLR     C
1BBE EF             7090    RIGHT2: MOV     A,R7            ;GET THE DIGITS TO SHIFT
1BBF 6022           7091            JZ      RIGHTL1         ;EXIT IF ZERO
1BC1 9402           7092            SUBB    A,#2            ;TWO TO DO?
1BC3 501F           7093            JNC     RIGHT5          ;SHIFT TWO NIBBLES
                    7094            ;
                    7095            ; Swap one nibble then exit
                    7096            ;
1BC5 C000           7097    RIGHT3: PUSH    R0B0            ;SAVE POINTER REGISTER
1BC7 C001           7098            PUSH    R1B0
                    7099            ;
1BC9 792E           7100            MOV     R1,#FP_DIG78    ;LOAD THE POINTERS
1BCB 782D           7101            MOV     R0,#FP_DIG56
1BCD EC             7102            MOV     A,R4            ;GET THE OVERFLOW REGISTER
1BCE D7             7103            XCHD    A,@R1           ;GET DIGIT 8
1BCF C4             7104            SWAP    A               ;FLIP FOR LOAD
1BD0 FC             7105            MOV     R4,A
                    7106            ;
1BD1 E7             7107    RIGHTL: MOV     A,@R1           ;GET THE LOW ORDER BYTE
1BD2 D6             7108            XCHD    A,@R0           ;SWAP NIBBLES
1BD3 C4             7109            SWAP    A               ;FLIP FOR STORE
1BD4 F7             7110            MOV     @R1,A           ;SAVE THE DIGITS
1BD5 18             7111            DEC     R0              ;BUMP THE POINTERS
1BD6 19             7112            DEC     R1
1BD7 B92AF7         7113            CJNE    R1,#FP_DIG12-1,RIGHTL   ;LOOP
                    7114            ;
1BDA E7             7115            MOV     A,@R1           ;ACC = CH8
1BDB C4             7116            SWAP    A               ;ACC = 8CH
1BDC 540F           7117            ANL     A,#0FH          ;ACC = 0CH
1BDE F7             7118            MOV     @R1,A           ;CARRY DONE
1BDF D001           7119            POP     R1B0            ;EXIT
1BE1 D000           7120            POP     R0B0            ;RESTORE REGISTER
1BE3 22             7121    RIGHTL1:RET
                    7122            ;
1BE4 FF             7123    RIGHT5: MOV     R7,A            ;SAVE THE NEW SHIFT NUMBER
1BE5 E4             7124            CLR     A
1BE6 C52A           7125            XCH     A,FP_CARRY      ;SWAP THE NIBBLES
1BE8 C52B           7126            XCH     A,FP_DIG12
1BEA C52C           7127            XCH     A,FP_DIG34
1BEC C52D           7128            XCH     A,FP_DIG56
1BEE C52E           7129            XCH     A,FP_DIG78
1BF0 FC             7130            MOV     R4,A            ;SAVE THE LAST DIGIT SHIFTED
1BF1 80CB           7131            SJMP    RIGHT2
                    7132            ;
                    7133            ;***************************************************************
                    7134            ;
1BF3                7135    LEFT:   ; Shift ACCUMULATOR LEFT the number of nibbles in R7
                    7136            ;
BASIC52E                                                                                                      PAGE 125

                    7137            ;***************************************************************
                    7138            ;
1BF3 7C00           7139            MOV     R4,#00H         ;CLEAR FOR SOME ENTRYS
                    7140            ;
1BF5 C3             7141    LEFT1:  CLR     C
1BF6 EF             7142    LEFT2:  MOV     A,R7            ;GET SHIFT VALUE
1BF7 6022           7143            JZ      LEFTL1          ;EXIT IF ZERO
1BF9 9402           7144            SUBB    A,#2            ;SEE HOW MANY BYTES TO SHIFT
1BFB 501F           7145            JNC     LEFT5
                    7146            ;
1BFD C000           7147    LEFT3:  PUSH    R0B0            ;SAVE POINTER
1BFF C001           7148            PUSH    R1B0
1C01 782A           7149            MOV     R0,#FP_CARRY
1C03 792B           7150            MOV     R1,#FP_DIG12
                    7151            ;
1C05 E6             7152            MOV     A,@R0           ;ACC=CHCL
1C06 C4             7153            SWAP    A               ;ACC = CLCH
1C07 F6             7154            MOV     @R0,A           ;ACC = CLCH, @R0 = CLCH
                    7155            ;
1C08 E7             7156    LEFTL:  MOV     A,@R1           ;DIG 12
1C09 C4             7157            SWAP    A               ;DIG 21
1C0A D6             7158            XCHD    A,@R0
1C0B F7             7159            MOV     @R1,A           ;SAVE IT
1C0C 08             7160            INC     R0              ;BUMP POINTERS
1C0D 09             7161            INC     R1
1C0E B82EF7         7162            CJNE    R0,#FP_DIG78,LEFTL
                    7163            ;
1C11 EC             7164            MOV     A,R4
1C12 C4             7165            SWAP    A
1C13 D6             7166            XCHD    A,@R0
1C14 54F0           7167            ANL     A,#0F0H
1C16 FC             7168            MOV     R4,A
                    7169            ;
1C17 D001           7170            POP     R1B0
1C19 D000           7171            POP     R0B0            ;RESTORE
1C1B 22             7172    LEFTL1: RET                     ;DONE
                    7173            ;
1C1C FF             7174    LEFT5:  MOV     R7,A            ;RESTORE COUNT
1C1D E4             7175            CLR     A
1C1E CC             7176            XCH     A,R4            ;GET THE RESTORATION BYTE
1C1F C52E           7177            XCH     A,FP_DIG78      ;DO THE SWAP
1C21 C52D           7178            XCH     A,FP_DIG56
1C23 C52C           7179            XCH     A,FP_DIG34
1C25 C52B           7180            XCH     A,FP_DIG12
1C27 C52A           7181            XCH     A,FP_CARRY
1C29 80CB           7182            SJMP    LEFT2
                    7183            ;
1C2B                7184    MUL_NIBBLE:
                    7185            ;
                    7186            ; Multiply the nibble in R7 by the FP_NIB locations
                    7187            ; accumulate the product in FP_ACC
                    7188            ;
                    7189            ; Set up the pointers for multiplication
                    7190            ;
1C2B 540F           7191            ANL     A,#0FH          ;STRIP OFF MS NIBBLE
1C2D FF             7192            MOV     R7,A
1C2E 783C           7193            MOV     R0,#FP_ACC8
1C30 7932           7194            MOV     R1,#FP_NIB8
BASIC52E                                                                                                      PAGE 126

1C32 E4             7195            CLR     A
1C33 F533           7196            MOV     FP_ACCX,A
                    7197            ;
1C35 18             7198    MNLOOP: DEC     R0              ;BUMP POINTER TO PROPAGATE CARRY
1C36 26             7199            ADD     A,@R0           ;ATTEMPT TO FORCE CARRY
1C37 D4             7200            DA      A               ;BCD ADJUST
1C38 30E403         7201            JNB     ACC.4,MNL0      ;DON'T ADJUST IF NO NEED
1C3B 18             7202            DEC     R0              ;PROPAGATE CARRY TO THE NEXT DIGIT
1C3C 06             7203            INC     @R0             ;DO THE ADJUSTING
1C3D 08             7204            INC     R0              ;RESTORE R0
                    7205            ;
1C3E D6             7206    MNL0:   XCHD    A,@R0           ;RESTORE INITIAL NUMBER
1C3F 8FF0           7207            MOV     B,R7            ;GET THE NUBBLE TO MULTIPLY
1C41 E7             7208            MOV     A,@R1           ;GET THE OTHER NIBBLE
1C42 A4             7209            MUL     AB              ;DO THE MULTIPLY
1C43 75F00A         7210            MOV     B,#10           ;NOW BCD ADJUST
1C46 84             7211            DIV     AB
1C47 C5F0           7212            XCH     A,B             ;GET THE REMAINDER
1C49 26             7213            ADD     A,@R0           ;PROPAGATE THE PARTIAL PRODUCTS
1C4A D4             7214            DA      A               ;BCD ADJUST
1C4B 30E402         7215            JNB     ACC.4,MNL1      ;PROPAGATE PARTIAL PRODUCT CARRY
1C4E 05F0           7216            INC     B
                    7217            ;
1C50 08             7218    MNL1:   INC     R0
1C51 D6             7219            XCHD    A,@R0           ;SAVE THE NEW PRODUCT
1C52 18             7220            DEC     R0
1C53 E5F0           7221            MOV     A,B             ;GET BACK THE QUOTIENT
1C55 19             7222            DEC     R1
1C56 B92ADC         7223            CJNE    R1,#FP_NIB1-1,MNLOOP
                    7224            ;
1C59 2533           7225            ADD     A,FP_ACCX       ;GET THE OVERFLOW
1C5B D4             7226            DA      A               ;ADJUST
1C5C F6             7227            MOV     @R0,A           ;SAVE IT
1C5D 22             7228            RET                     ;EXIT
                    7229            ;
                    7230            ;***************************************************************
                    7231            ;
1C5E                7232    LOAD_POINTERS:  ; Load the ARG_STACK into R0 and bump R1
                    7233            ;
                    7234            ;***************************************************************
                    7235            ;
1C5E 75A001         7236            MOV     P2,#ARG_STACK_PAGE
1C61 A809           7237            MOV     R0,ARG_STACK
1C63 7406           7238            MOV     A,#FP_NUMBER_SIZE
1C65 28             7239            ADD     A,R0
1C66 F9             7240            MOV     R1,A
1C67 22             7241            RET
                    7242            ;
                    7243            ;***************************************************************
                    7244            ;
1C68                7245    MUL_DIV_EXP_AND_SIGN:
                    7246            ;
                    7247            ; Load the sign into R7, R6. R5 gets the sign for
                    7248            ; multiply and divide.
                    7249            ;
                    7250            ;***************************************************************
                    7251            ;
1C68 71B2           7252            ACALL   FP_CLEAR        ;CLEAR INTERNAL MEMORY
BASIC52E                                                                                                      PAGE 127

                    7253            ;
1C6A 915E           7254    MDES1:  ACALL   LOAD_POINTERS   ;LOAD REGISTERS
1C6C E2             7255            MOVX    A,@R0           ;ARG 1 EXP
1C6D FF             7256            MOV     R7,A            ;SAVED IN R7
1C6E E3             7257            MOVX    A,@R1           ;ARG 2 EXP
1C6F FE             7258            MOV     R6,A            ;SAVED IN R6
1C70 18             7259            DEC     R0              ;BUMP POINTERS TO SIGN
1C71 19             7260            DEC     R1
1C72 E2             7261            MOVX    A,@R0           ;GET THE SIGN
1C73 FC             7262            MOV     R4,A            ;SIGN OF ARG1
1C74 E3             7263            MOVX    A,@R1           ;GET SIGN OF NEXT ARG
1C75 FB             7264            MOV     R3,A            ;SIGN OF ARG2
1C76 6C             7265            XRL     A,R4            ;ACC GETS THE NEW SIGN
1C77 FD             7266            MOV     R5,A            ;R5 GETS THE NEW SIGN
                    7267            ;
                    7268            ; Bump the pointers to point at the LS digit
                    7269            ;
1C78 18             7270            DEC     R0
1C79 19             7271            DEC     R1
                    7272            ;
1C7A 22             7273            RET
                    7274            ;
                    7275            ;***************************************************************
                    7276            ;
1C7B                7277    LOADR1_MANTISSA:
                    7278            ;
                    7279            ; Load the mantissa of R0 into FP_Digits
                    7280            ;
                    7281            ;***************************************************************
                    7282            ;
1C7B C000           7283            PUSH    R0B0            ;SAVE REGISTER 1
1C7D 782E           7284            MOV     R0,#FP_DIG78    ;SET UP THE POINTER
                    7285            ;
1C7F E3             7286    LOADR1: MOVX    A,@R1
1C80 F6             7287            MOV     @R0,A
1C81 19             7288            DEC     R1
1C82 18             7289            DEC     R0
1C83 B82AF9         7290            CJNE    R0,#FP_CARRY,LOADR1
                    7291            ;
1C86 D000           7292            POP     R0B0
1C88 22             7293            RET
                    7294            ;
                    7295            ;***************************************************************
                    7296            ;
1C89                7297    HEXSCAN:        ; Scan a string to determine if it is a hex number
                    7298                    ; set carry if hex, else carry = 0
                    7299            ;
                    7300            ;***************************************************************
                    7301            ;
1C89 B15F           7302            ACALL   GET_DPTR_CHARACTER
1C8B C083           7303            PUSH    DPH
1C8D C082           7304            PUSH    DPL             ;SAVE THE POINTER
                    7305            ;
1C8F E0             7306    HEXSC1: MOVX    A,@DPTR         ;GET THE CHARACTER
1C90 F1ED           7307            ACALL   DIGIT_CHECK     ;SEE IF A DIGIT
1C92 4012           7308            JC      HS1             ;CONTINUE IF A DIGIT
1C94 91A9           7309            ACALL   HEX_CHECK       ;SEE IF HEX
1C96 400E           7310            JC      HS1
BASIC52E                                                                                                      PAGE 128

                    7311            ;
1C98 C2E5           7312            CLR     ACC.5           ;NO LOWER CASE
1C9A B44803         7313            CJNE    A,#'H',HEXDON
1C9D D3             7314            SETB    C
1C9E 8001           7315            SJMP    HEXDO1          ;NUMBER IS VALID HEX, MAYBE
                    7316            ;
1CA0 C3             7317    HEXDON: CLR     C
                    7318            ;
1CA1 D082           7319    HEXDO1: POP     DPL             ;RESTORE POINTER
1CA3 D083           7320            POP     DPH
1CA5 22             7321            RET
                    7322            ;
1CA6 A3             7323    HS1:    INC     DPTR            ;BUMP TO NEXT CHARACTER
1CA7 80E6           7324            SJMP    HEXSC1          ;LOOP
                    7325            ;
1CA9                7326    HEX_CHECK:      ;CHECK FOR A VALID ASCII HEX, SET CARRY IF FOUND
                    7327            ;
1CA9 C2E5           7328            CLR     ACC.5           ;WASTE LOWER CASE
1CAB B44700         7329            CJNE    A,#'F'+1,HEX_CHECK1     ;SEE IF F OR LESS
1CAE                7330    HEX_CHECK1:
1CAE 4001           7331            JC      HC1
1CB0 22             7332            RET
                    7333            ;
1CB1 B44100         7334    HC1:    CJNE    A,#'A',HC11     ;SEE IF A OR GREATER
1CB4 B3             7335    HC11:   CPL     C
1CB5 22             7336            RET
                    7337            ;
1CB6                7338    PUSHR2R0:
                    7339            ;
1CB6 7B00           7340            MOV     R3,#HIGH CONVERT;CONVERSION LOCATION
1CB8 7958           7341            MOV     R1,#LOW CONVERT
1CBA D1F7           7342            ACALL   CONVERT_BINARY_TO_ASCII_STRING
1CBC 740D           7343            MOV     A,#0DH          ;A CR TO TERMINATE
1CBE F3             7344            MOVX    @R1,A           ;SAVE THE CR
1CBF 900058         7345            MOV     DPTR,#CONVERT
                    7346            ;
                    7347            ; Falls thru to FLOATING INPUT
                    7348            ;
                    7349            ;***************************************************************
                    7350            ;
1CC2                7351    FLOATING_POINT_INPUT:   ; Input a floating point number pointed to by
                    7352                            ; the DPTR
                    7353            ;
                    7354            ;***************************************************************
                    7355            ;
1CC2 71B2           7356            ACALL   FP_CLEAR        ;CLEAR EVERYTHING
1CC4 B15F           7357            ACALL   GET_DPTR_CHARACTER
1CC6 B165           7358            ACALL   PLUS_MINUS_TEST
1CC8 9278           7359            MOV     MSIGN,C         ;SAVE THE MANTISSA SIGN
                    7360            ;
                    7361            ; Now, set up for input loop
                    7362            ;
1CCA 7834           7363            MOV     R0,#FP_ACCC
1CCC 7E7F           7364            MOV     R6,#7FH         ;BASE EXPONENT
1CCE D2D5           7365            SETB    F0              ;SET INITIAL FLAG
                    7366            ;
1CD0 F1EB           7367    INLOOP: ACALL   GET_DIGIT_CHECK
1CD2 5007           7368            JNC     GTEST           ;IF NOT A CHARACTER, WHAT IS IT?
BASIC52E                                                                                                      PAGE 129

1CD4 540F           7369            ANL     A,#0FH          ;STRIP ASCII
1CD6 B138           7370            ACALL   STDIG           ;STORE THE DIGITS
                    7371            ;
1CD8 A3             7372    INLPIK: INC     DPTR            ;BUMP POINTER FOR LOOP
1CD9 80F5           7373            SJMP    INLOOP          ;LOOP FOR INPUT
                    7374            ;
1CDB B42E0C         7375    GTEST:  CJNE    A,#'.',GT1      ;SEE IF A RADIX
1CDE 205163         7376            JB      FOUND_RADIX,INERR
1CE1 D251           7377            SETB    FOUND_RADIX
1CE3 B834F2         7378            CJNE    R0,#FP_ACCC,INLPIK
1CE6 D252           7379            SETB    FIRST_RADIX     ;SET IF FIRST RADIX
1CE8 80EE           7380            SJMP    INLPIK          ;GET ADDITIONAL DIGITS
                    7381            ;
1CEA 20D557         7382    GT1:    JB      F0,INERR        ;ERROR IF NOT CLEARED
1CED B46502         7383            CJNE    A,#'e',GT11     ;CHECK FOR LOWER CASE
1CF0 8003           7384            SJMP    GT12
1CF2 B44533         7385    GT11:   CJNE    A,#'E',FINISH_UP
1CF5 B15E           7386    GT12:   ACALL   INC_AND_GET_DPTR_CHARACTER
1CF7 B165           7387            ACALL   PLUS_MINUS_TEST
1CF9 9250           7388            MOV     XSIGN,C         ;SAVE SIGN STATUS
1CFB F1EB           7389            ACALL   GET_DIGIT_CHECK
1CFD 5045           7390            JNC     INERR
                    7391            ;
1CFF 540F           7392            ANL     A,#0FH          ;STRIP ASCII BIAS OFF THE CHARACTER
1D01 FD             7393            MOV     R5,A            ;SAVE THE CHARACTER IN R5
                    7394            ;
1D02 A3             7395    GT2:    INC     DPTR
1D03 F1EB           7396            ACALL   GET_DIGIT_CHECK
1D05 500D           7397            JNC     FINISH1
1D07 540F           7398            ANL     A,#0FH          ;STRIP OFF BIAS
1D09 CD             7399            XCH     A,R5            ;GET THE LAST DIGIT
1D0A 75F00A         7400            MOV     B,#10           ;MULTIPLY BY TEN
1D0D A4             7401            MUL     AB
1D0E 2D             7402            ADD     A,R5            ;ADD TO ORIGINAL VALUE
1D0F FD             7403            MOV     R5,A            ;SAVE IN R5
1D10 50F0           7404            JNC     GT2             ;LOOP IF NO CARRY
1D12 7DFF           7405            MOV     R5,#0FFH        ;FORCE AN ERROR
                    7406            ;
1D14 ED             7407    FINISH1:MOV     A,R5            ;GET THE SIGN
1D15 305009         7408            JNB     XSIGN,POSNUM    ;SEE IF EXPONENT IS POS OR NEG
1D18 C3             7409            CLR     C
1D19 9E             7410            SUBB    A,R6
1D1A F4             7411            CPL     A
1D1B 04             7412            INC     A
1D1C 4009           7413            JC      FINISH2
1D1E 7401           7414            MOV     A,#01H
1D20 22             7415            RET
                    7416            ;
1D21 2E             7417    POSNUM: ADD     A,R6            ;ADD TO EXPONENT
1D22 5003           7418            JNC     FINISH2
                    7419            ;
1D24 7402           7420    POSNM1: MOV     A,#02H
1D26 22             7421            RET
                    7422            ;
1D27 CE             7423    FINISH2:XCH     A,R6            ;SAVE THE EXPONENT
                    7424            ;
1D28                7425    FINISH_UP:
                    7426            ;
BASIC52E                                                                                                      PAGE 130

1D28 8E30           7427            MOV     FP_EXP,R6       ;SAVE EXPONENT
1D2A B83402         7428            CJNE    R0,#FP_ACCC,FINISH_UP1
1D2D 71B2           7429            ACALL   FP_CLEAR        ;CLEAR THE MEMORY IF 0
1D2F                7430    FINISH_UP1:
1D2F E509           7431            MOV     A,ARG_STACK     ;GET THE ARG STACK
1D31 C3             7432            CLR     C
1D32 940C           7433            SUBB    A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
1D34 F509           7434            MOV     ARG_STACK,A     ;ADJUST FOR STORE
1D36 6111           7435            AJMP    PACK
                    7436            ;
1D38 C2D5           7437    STDIG:  CLR     F0              ;CLEAR INITIAL DESIGNATOR
1D3A 700B           7438            JNZ     STDIG1          ;CONTINUE IF NOT ZERO
1D3C B83408         7439            CJNE    R0,#FP_ACCC,STDIG1
1D3F 305204         7440            JNB     FIRST_RADIX,RET_X
                    7441            ;
1D42 DE02           7442    DECX:   DJNZ    R6,RET_X
                    7443            ;
1D44 74FF           7444    INERR:  MOV     A,#0FFH
                    7445            ;
1D46 22             7446    RET_X:  RET
                    7447            ;
1D47 205302         7448    STDIG1: JB      DONE_LOAD,FRTEST
1D4A C252           7449            CLR     FIRST_RADIX
                    7450            ;
1D4C 2052F3         7451    FRTEST: JB      FIRST_RADIX,DECX
                    7452            ;
1D4F 205101         7453    FDTEST: JB      FOUND_RADIX,FDT1
1D52 0E             7454            INC     R6
                    7455            ;
1D53 2053F0         7456    FDT1:   JB      DONE_LOAD,RET_X
1D56 B83D02         7457            CJNE    R0,#FP_ACC8+1,FDT2
1D59 D253           7458            SETB    DONE_LOAD
                    7459            ;
1D5B F6             7460    FDT2:   MOV     @R0,A           ;SAVE THE STRIPPED ACCUMULATOR
1D5C 08             7461            INC     R0              ;BUMP THE POINTER
1D5D 22             7462            RET                     ;EXIT
                    7463            ;
                    7464            ;***************************************************************
                    7465            ;
                    7466            ; I/O utilities
                    7467            ;
                    7468            ;***************************************************************
                    7469            ;
1D5E                7470    INC_AND_GET_DPTR_CHARACTER:
                    7471            ;
1D5E A3             7472            INC     DPTR
                    7473            ;
1D5F                7474    GET_DPTR_CHARACTER:
                    7475            ;
1D5F E0             7476            MOVX    A,@DPTR         ;GET THE CHARACTER
1D60 B42016         7477            CJNE    A,#' ',PMT1     ;SEE IF A SPACE
                    7478            ;
                    7479            ; Kill spaces
                    7480            ;
1D63 80F9           7481            SJMP    INC_AND_GET_DPTR_CHARACTER
                    7482            ;
1D65                7483    PLUS_MINUS_TEST:
                    7484            ;
BASIC52E                                                                                                      PAGE 131

1D65 B4E302         7485            CJNE    A,#0E3H,PMT11   ;SEE IF A PLUS, PLUS TOKEN FROM BASIC
1D68 800E           7486            SJMP    PMT3
1D6A B42B02         7487    PMT11:  CJNE    A,#'+',PMT12
1D6D 8009           7488            SJMP    PMT3
1D6F B4E502         7489    PMT12:  CJNE    A,#0E5H,PMT13   ;SEE IF MINUS, MINUS TOKEN FROM BASIC
1D72 8003           7490            SJMP    PMT2
1D74 B42D02         7491    PMT13:  CJNE    A,#'-',PMT1
                    7492            ;
1D77 D3             7493    PMT2:   SETB    C
                    7494            ;
1D78 A3             7495    PMT3:   INC     DPTR
                    7496            ;
1D79 22             7497    PMT1:   RET
                    7498            ;
                    7499            ;***************************************************************
                    7500            ;
1D7A                7501    FLOATING_POINT_OUTPUT:  ; Output the number, format is in location 23
                    7502            ;
                    7503            ; IF FORMAT = 00 - FREE FLOATING
                    7504            ;           = FX - EXPONENTIAL (X IS THE NUMBER OF SIG DIGITS)
                    7505            ;           = NX - N = NUM BEFORE RADIX, X = NUM AFTER RADIX
                    7506            ;                  N + X = 8 MAX
                    7507            ;
                    7508            ;***************************************************************
                    7509            ;
1D7A 916A           7510            ACALL   MDES1           ;GET THE NUMBER TO OUTPUT, R0 IS POINTER
1D7C 31A5           7511            ACALL   POP_AND_EXIT    ;OUTPUT POPS THE STACK
1D7E EF             7512            MOV     A,R7
1D7F FE             7513            MOV     R6,A            ;PUT THE EXPONENT IN R6
1D80 717E           7514            ACALL   UNPACK_R0       ;UNPACK THE NUMBER
1D82 782B           7515            MOV     R0,#FP_NIB1     ;POINT AT THE NUMBER
1D84 E517           7516            MOV     A,FORMAT        ;GET THE FORMAT
1D86 FB             7517            MOV     R3,A            ;SAVE IN CASE OF EXP FORMAT
1D87 6049           7518            JZ      FREE            ;FREE FLOATING?
1D89 B4F000         7519            CJNE    A,#0F0H,FPO1    ;SEE IF EXPONENTIAL
1D8C 5073           7520    FPO1:   JNC     EXPOUT
                    7521            ;
                    7522            ; If here, must be integer USING format
                    7523            ;
1D8E EE             7524            MOV     A,R6            ;GET THE EXPONENT
1D8F 7002           7525            JNZ     FPO2
1D91 7E80           7526            MOV     R6,#80H
1D93 EB             7527    FPO2:   MOV     A,R3            ;GET THE FORMAT
1D94 C4             7528            SWAP    A               ;SPLIT INTEGER AND FRACTION
1D95 540F           7529            ANL     A,#0FH
1D97 FA             7530            MOV     R2,A            ;SAVE INTEGER
1D98 D167           7531            ACALL   NUM_LT          ;GET THE NUMBER OF INTEGERS
1D9A CA             7532            XCH     A,R2            ;FLIP FOR SUBB
1D9B C3             7533            CLR     C
1D9C 9A             7534            SUBB    A,R2
1D9D FF             7535            MOV     R7,A
1D9E 5006           7536            JNC     FPO3
1DA0 7D3F           7537            MOV     R5,#'?'         ;OUTPUT A QUESTION MARK
1DA2 D19C           7538            ACALL   SOUT1           ;NUMBER IS TOO LARGE FOR FORMAT
1DA4 A1D2           7539            AJMP    FREE
1DA6 BA0007         7540    FPO3:   CJNE    R2,#00,USING0   ;SEE IF ZERO
1DA9 1F             7541            DEC     R7
1DAA D189           7542            ACALL   SS7
BASIC52E                                                                                                      PAGE 132

1DAC D196           7543            ACALL   ZOUT            ;OUTPUT A ZERO
1DAE 8006           7544            SJMP    USING1
                    7545            ;
1DB0 D189           7546    USING0: ACALL   SS7             ;OUTPUT SPACES, IF NEED TO
1DB2 EA             7547            MOV     A,R2            ;OUTPUT DIGITS
1DB3 FF             7548            MOV     R7,A
1DB4 D14B           7549            ACALL   OUTR0
                    7550            ;
1DB6 EB             7551    USING1: MOV     A,R3
1DB7 540F           7552            ANL     A,#0FH          ;GET THE NUMBER RIGHT OF DP
1DB9 FA             7553            MOV     R2,A            ;SAVE IT
1DBA 60BD           7554            JZ      PMT1            ;EXIT IF ZERO
1DBC D192           7555            ACALL   ROUT            ;OUTPUT DP
1DBE D170           7556            ACALL   NUM_RT
1DC0 B50203         7557            CJNE    A,2,USINGX      ;COMPARE A TO R2
                    7558            ;
1DC3 EA             7559    USINGY: MOV     A,R2
1DC4 C180           7560            AJMP    Z7R7
                    7561            ;
1DC6 50FB           7562    USINGX: JNC     USINGY
                    7563            ;
1DC8 CA             7564    USING2: XCH     A,R2
1DC9 C3             7565            CLR     C
1DCA 9A             7566            SUBB    A,R2
1DCB CA             7567            XCH     A,R2
1DCC D180           7568            ACALL   Z7R7            ;OUTPUT ZEROS IF NEED TO
1DCE EA             7569            MOV     A,R2
1DCF FF             7570            MOV     R7,A
1DD0 C14B           7571            AJMP    OUTR0
                    7572            ;
                    7573            ; First, force exponential output, if need to
                    7574            ;
1DD2 EE             7575    FREE:   MOV     A,R6            ;GET THE EXPONENT
1DD3 7004           7576            JNZ     FREE1           ;IF ZERO, PRINT IT
1DD5 D19A           7577            ACALL   SOUT
1DD7 C196           7578            AJMP    ZOUT
                    7579            ;
1DD9 7BF0           7580    FREE1:  MOV     R3,#0F0H        ;IN CASE EXP NEEDED
1DDB 7477           7581            MOV     A,#80H-DIGIT-DIGIT-1
1DDD 2E             7582            ADD     A,R6
1DDE 4021           7583            JC      EXPOUT
1DE0 94F7           7584            SUBB    A,#0F7H
1DE2 401D           7585            JC      EXPOUT
                    7586            ;
                    7587            ; Now, just print the number
                    7588            ;
1DE4 D18B           7589            ACALL   SINOUT          ;PRINT THE SIGN OF THE NUMBER
1DE6 D167           7590            ACALL   NUM_LT          ;GET THE NUMBER LEFT OF DP
1DE8 B40802         7591            CJNE    A,#8,FREE4
1DEB C14B           7592            AJMP    OUTR0
                    7593            ;
1DED D14B           7594    FREE4:  ACALL   OUTR0
1DEF D15D           7595            ACALL   ZTEST           ;TEST FOR TRAILING ZEROS
1DF1 6057           7596            JZ      U_RET           ;DONE IF ALL TRAILING ZEROS
1DF3 D192           7597            ACALL   ROUT            ;OUTPUT RADIX
                    7598            ;
1DF5 7F01           7599    FREE2:  MOV     R7,#1           ;OUTPUT ONE DIGIT
1DF7 D14B           7600            ACALL   OUTR0
BASIC52E                                                                                                      PAGE 133

1DF9 704F           7601            JNZ     U_RET
1DFB D15D           7602            ACALL   ZTEST
1DFD 604B           7603            JZ      U_RET
1DFF 80F4           7604            SJMP    FREE2           ;LOOP
                    7605            ;
1E01 D18B           7606    EXPOUT: ACALL   SINOUT          ;PRINT THE SIGN
1E03 7F01           7607            MOV     R7,#1           ;OUTPUT ONE CHARACTER
1E05 D14B           7608            ACALL   OUTR0
1E07 D192           7609            ACALL   ROUT            ;OUTPUT RADIX
1E09 EB             7610            MOV     A,R3            ;GET FORMAT
1E0A 540F           7611            ANL     A,#0FH          ;STRIP INDICATOR
1E0C 6006           7612            JZ      EXPOTX
                    7613            ;
1E0E FF             7614            MOV     R7,A            ;OUTPUT THE NUMBER OF DIGITS
1E0F 1F             7615            DEC     R7              ;ADJUST BECAUSE ONE CHAR ALREADY OUT
1E10 D14B           7616            ACALL   OUTR0
1E12 8002           7617            SJMP    EXPOT4
                    7618            ;
1E14 B1F5           7619    EXPOTX: ACALL   FREE2           ;OUTPUT UNTIL TRAILING ZEROS
                    7620            ;
1E16 D19A           7621    EXPOT4: ACALL   SOUT            ;OUTPUT A SPACE
1E18 7D45           7622            MOV     R5,#'E'
1E1A D19C           7623            ACALL   SOUT1           ;OUTPUT AN E
1E1C EE             7624            MOV     A,R6            ;GET THE EXPONENT
1E1D 6004           7625            JZ      XOUT0           ;EXIT IF ZERO
1E1F 14             7626            DEC     A               ;ADJUST FOR THE DIGIT ALREADY OUTPUT
1E20 B48005         7627            CJNE    A,#80H,XOUT2    ;SEE WHAT IT IS
                    7628            ;
1E23 D19A           7629    XOUT0:  ACALL   SOUT
1E25 E4             7630            CLR     A
1E26 800C           7631            SJMP    XOUT4
                    7632            ;
1E28 4006           7633    XOUT2:  JC      XOUT3           ;NEGATIVE EXPONENT
1E2A 7D2B           7634            MOV     R5,#'+'         ;OUTPUT A PLUS SIGN
1E2C D19C           7635            ACALL   SOUT1
1E2E 8004           7636            SJMP    XOUT4
                    7637            ;
1E30 D18E           7638    XOUT3:  ACALL   MOUT
1E32 F4             7639            CPL     A               ;FLIP BITS
1E33 04             7640            INC     A               ;BUMP
                    7641            ;
1E34 C2E7           7642    XOUT4:  CLR     ACC.7
1E36 F8             7643            MOV     R0,A
1E37 7A00           7644            MOV     R2,#0
1E39 7958           7645            MOV     R1,#LOW CONVERT ;CONVERSION LOCATION
1E3B 7B00           7646            MOV     R3,#HIGH CONVERT
1E3D D1F7           7647            ACALL   CONVERT_BINARY_TO_ASCII_STRING
1E3F 7858           7648            MOV     R0,#LOW CONVERT ;NOW, OUTPUT EXPONENT
                    7649            ;
1E41 E2             7650    EXPOT5: MOVX    A,@R0           ;GET THE CHARACTER
1E42 FD             7651            MOV     R5,A            ;OUTPUT IT
1E43 D19C           7652            ACALL   SOUT1
1E45 08             7653            INC     R0              ;BUMP THE POINTER
1E46 E8             7654            MOV     A,R0            ;GET THE POINTER
1E47 B501F7         7655            CJNE    A,R1B0,EXPOT5   ;LOOP
                    7656            ;
1E4A 22             7657    U_RET:  RET                     ;EXIT
                    7658            ;
BASIC52E                                                                                                      PAGE 134

1E4B                7659    OUTR0:  ; Output the characters pointed to by R0, also bias ascii
                    7660            ;
1E4B EF             7661            MOV     A,R7            ;GET THE COUNTER
1E4C 600E           7662            JZ      OUTR            ;EXIT IF DONE
1E4E E6             7663            MOV     A,@R0           ;GET THE NUMBER
1E4F 4430           7664            ORL     A,#30H          ;ASCII BIAS
1E51 08             7665            INC     R0              ;BUMP POINTER AND COUNTER
1E52 1F             7666            DEC     R7
1E53 FD             7667            MOV     R5,A            ;PUT CHARACTER IN OUTPUT REGISTER
1E54 D19C           7668            ACALL   SOUT1           ;OUTPUT THE CHARACTER
1E56 E4             7669            CLR     A               ;JUST FOR TEST
1E57 B833F1         7670            CJNE    R0,#FP_NIB8+1,OUTR0
1E5A 7455           7671            MOV     A,#55H          ;KNOW WHERE EXIT OCCURED
                    7672            ;
1E5C 22             7673    OUTR:   RET
                    7674            ;
1E5D A900           7675    ZTEST:  MOV     R1,R0B0         ;GET POINTER REGISTER
                    7676            ;
1E5F E7             7677    ZT0:    MOV     A,@R1           ;GET THE VALUE
1E60 7004           7678            JNZ     ZT1
1E62 09             7679            INC     R1              ;BUMP POINTER
1E63 B933F9         7680            CJNE    R1,#FP_NIB8+1,ZT0
                    7681            ;
1E66 22             7682    ZT1:    RET
                    7683            ;
1E67 EE             7684    NUM_LT: MOV     A,R6            ;GET EXPONENT
1E68 C3             7685            CLR     C               ;GET READY FOR SUBB
1E69 9480           7686            SUBB    A,#80H          ;SUB EXPONENT BIAS
1E6B 5001           7687            JNC     NL1             ;OK IF NO CARRY
1E6D E4             7688            CLR     A               ;NO DIGITS LEFT
                    7689            ;
1E6E FF             7690    NL1:    MOV     R7,A            ;SAVE THE COUNT
1E6F 22             7691            RET
                    7692            ;
1E70 C3             7693    NUM_RT: CLR     C               ;SUBB AGAIN
1E71 7480           7694            MOV     A,#80H          ;EXPONENT BIAS
1E73 9E             7695            SUBB    A,R6            ;GET THE BIASED EXPONENT
1E74 5001           7696            JNC     NR1
1E76 E4             7697            CLR     A
                    7698            ;
1E77 22             7699    NR1:    RET                     ;EXIT
                    7700            ;
1E78 EF             7701    SPACE7: MOV     A,R7            ;GET THE NUMBER OF SPACES
1E79 60FC           7702            JZ      NR1             ;EXIT IF ZERO
1E7B D19A           7703            ACALL   SOUT            ;OUTPUT A SPACE
1E7D 1F             7704            DEC     R7              ;BUMP COUNTER
1E7E 80F8           7705            SJMP    SPACE7          ;LOOP
                    7706            ;
1E80 FF             7707    Z7R7:   MOV     R7,A
                    7708            ;
1E81 EF             7709    ZERO7:  MOV     A,R7            ;GET COUNTER
1E82 60F3           7710            JZ      NR1             ;EXIT IF ZERO
1E84 D196           7711            ACALL   ZOUT            ;OUTPUT A ZERO
1E86 1F             7712            DEC     R7              ;BUMP COUNTER
1E87 80F8           7713            SJMP    ZERO7           ;LOOP
                    7714            ;
1E89 D178           7715    SS7:    ACALL   SPACE7
                    7716            ;
BASIC52E                                                                                                      PAGE 135

1E8B EC             7717    SINOUT: MOV     A,R4            ;GET THE SIGN
1E8C 600C           7718            JZ      SOUT            ;OUTPUT A SPACE IF ZERO
                    7719            ;
1E8E 7D2D           7720    MOUT:   MOV     R5,#'-'
1E90 800A           7721            SJMP    SOUT1           ;OUTPUT A MINUS IF NOT
                    7722            ;
1E92 7D2E           7723    ROUT:   MOV     R5,#'.'         ;OUTPUT A RADIX
1E94 8006           7724            SJMP    SOUT1
                    7725            ;
1E96 7D30           7726    ZOUT:   MOV     R5,#'0'         ;OUTPUT A ZERO
1E98 8002           7727            SJMP    SOUT1
                    7728            ;
1E9A 7D20           7729    SOUT:   MOV     R5,#' '         ;OUTPUT A SPACE
                    7730            ;
1E9C 216C           7731    SOUT1:  AJMP    OUTPUT
                    7732            ;
                    7733            ;***************************************************************
                    7734            ;
1E9E                7735    CONVERT_ASCII_STRING_TO_BINARY:
                    7736            ;
                    7737            ;DPTR POINTS TO ASCII STRING
                    7738            ;PUT THE BINARY NUMBER IN R2:R0, ERROR IF >64K
                    7739            ;
                    7740            ;***************************************************************
                    7741            ;
1E9E 9189           7742    CASB:   ACALL   HEXSCAN         ;SEE IF HEX NUMBER
1EA0 9223           7743            MOV     ADD_IN,C        ;IF ADD_IN IS SET, THE NUMBER IS HEX
1EA2 F1EB           7744            ACALL   GET_DIGIT_CHECK
1EA4 B3             7745            CPL     C               ;FLIP FOR EXIT
1EA5 4028           7746            JC      RCASB
1EA7 7B00           7747            MOV     R3,#00H         ;ZERO R3:R1 FOR LOOP
1EA9 7900           7748            MOV     R1,#00H
1EAB 8015           7749            SJMP    CASB5
                    7750            ;
1EAD A3             7751    CASB2:  INC     DPTR
1EAE 8900           7752            MOV     R0B0,R1         ;SAVE THE PRESENT CONVERTED VALUE
1EB0 8B02           7753            MOV     R2B0,R3         ;IN R2:R0
1EB2 F1EB           7754            ACALL   GET_DIGIT_CHECK
1EB4 400C           7755            JC      CASB5
1EB6 302316         7756            JNB     ADD_IN,RCASB    ;CONVERSION COMPLETE
1EB9 91A9           7757            ACALL   HEX_CHECK       ;SEE IF HEX NUMBER
1EBB 4003           7758            JC      CASB4           ;PROCEED IF GOOD
1EBD A3             7759            INC     DPTR            ;BUMP PAST H
1EBE 800F           7760            SJMP    RCASB
                    7761            ;
1EC0 2409           7762    CASB4:  ADD     A,#9            ;ADJUST HEX ASCII BIAS
                    7763            ;
1EC2 75F00A         7764    CASB5:  MOV     B,#10
1EC5 302303         7765            JNB     ADD_IN,CASB6
1EC8 75F010         7766            MOV     B,#16           ;HEX MODE
                    7767            ;
1ECB D1D6           7768    CASB6:  ACALL   MULNUM          ;ACCUMULATE THE DIGITS
1ECD 50DE           7769            JNC     CASB2           ;LOOP IF NO CARRY
                    7770            ;
1ECF E4             7771    RCASB:  CLR     A               ;RESET ACC
1ED0 92E1           7772            MOV     ACC.OVERFLOW,C  ;IF OVERFLOW, SAY SO
1ED2 22             7773            RET                     ;EXIT
                    7774            ;
BASIC52E                                                                                                      PAGE 136

1ED3 75F00A         7775    MULNUM10:MOV    B,#10
                    7776            ;
                    7777            ;***************************************************************
                    7778            ;
1ED6                7779    MULNUM: ; Take the next digit in the acc (masked to 0FH)
                    7780            ; accumulate in R3:R1
                    7781            ;
                    7782            ;***************************************************************
                    7783            ;
1ED6 C0E0           7784            PUSH    ACC             ;SAVE ACC
1ED8 C0F0           7785            PUSH    B               ;SAVE MULTIPLIER
1EDA E9             7786            MOV     A,R1            ;PUT LOW ORDER BITS IN ACC
1EDB A4             7787            MUL     AB              ;DO THE MULTIPLY
1EDC F9             7788            MOV     R1,A            ;PUT THE RESULT BACK
1EDD EB             7789            MOV     A,R3            ;GET THE HIGH ORDER BYTE
1EDE ABF0           7790            MOV     R3,B            ;SAVE THE OVERFLOW
1EE0 D0F0           7791            POP     B               ;GET THE MULTIPLIER
1EE2 A4             7792            MUL     AB              ;DO IT
1EE3 A2D2           7793            MOV     C,OV            ;SAVE OVERFLOW IN F0
1EE5 92D5           7794            MOV     F0,C
1EE7 2B             7795            ADD     A,R3            ;ADD OVERFLOW TO HIGH RESULT
1EE8 FB             7796            MOV     R3,A            ;PUT IT BACK
1EE9 D0E0           7797            POP     ACC             ;GET THE ORIGINAL ACC BACK
1EEB 72D5           7798            ORL     C,F0            ;OR CARRY AND OVERFLOW
1EED 4007           7799            JC      MULX            ;NO GOOD IF THE CARRY IS SET
                    7800            ;
1EEF 540F           7801    MUL11:  ANL     A,#0FH          ;MASK OFF HIGH ORDER BITS
1EF1 29             7802            ADD     A,R1            ;NOW ADD THE ACC
1EF2 F9             7803            MOV     R1,A            ;PUT IT BACK
1EF3 E4             7804            CLR     A               ;PROPAGATE THE CARRY
1EF4 3B             7805            ADDC    A,R3
1EF5 FB             7806            MOV     R3,A            ;PUT IT BACK
                    7807            ;
1EF6 22             7808    MULX:   RET                     ;EXIT WITH OR WITHOUT CARRY
                    7809            ;
1EF7                7810    CONVERT_BINARY_TO_ASCII_STRING:
                    7811    ;
                    7812    ;*****************************************************************************
                    7813    ;****** Elektor 3 Patch ******************************************************
                    7814    ;****** Performance improvements *********************************************
                    7815    ;
                    7816    ;
                    7817    ;R3:R1 contains the address of the string
                    7818    ;R2:R0 contains the value to convert
                    7819    ;DPTR, R7, R6, and ACC gets clobbered
                    7820    ;
                    7821    ;***************************************************************
                    7822    ;
                    7823    ;       CLR     A               ;NO LEADING ZEROS
                    7824    ;       MOV     DPTR,#10000     ;SUBTRACT 10000
                    7825    ;       ACALL   RSUB            ;DO THE SUBTRACTION
                    7826    ;       MOV     DPTR,#1000      ;NOW 1000
                    7827    ;       ACALL   RSUB
                    7828    ;       MOV     DPTR,#100       ;NOW 100
                    7829    ;       ACALL   RSUB
                    7830    ;       MOV     DPTR,#10        ;NOW 10
                    7831    ;       ACALL   RSUB
                    7832    ;       MOV     DPTR,#1         ;NOW 1
BASIC52E                                                                                                      PAGE 137

                    7833    ;       ACALL   RSUB
                    7834    ;       JZ      RSUB2           ;JUMP OVER RET
                    7835    ;
                    7836    ;RSUB_R:        RET
                    7837    ;
                    7838    ;RSUB:  MOV     R6,#-1          ;SET UP THE COUNTER
                    7839    ;
                    7840    ;RSUB1: INC     R6              ;BUMP THE COUNTER
                    7841    ;       XCH     A,R2            ;DO A FAST COMPARE
                    7842    ;       CJNE    A,DPH,RSUB11
                    7843    ;RSUB11: XCH     A,R2
                    7844    ;       JC      FAST_DONE
                    7845    ;       XCH     A,R0            ;GET LOW BYTE
                    7846    ;       SUBB    A,DPL           ;SUBTRACT, CARRY IS CLEARED
                    7847    ;       XCH     A,R0            ;PUT IT BACK
                    7848    ;       XCH     A,R2            ;GET THE HIGH BYTE
                    7849    ;       SUBB    A,DPH           ;ADD THE HIGH BYTE
                    7850    ;       XCH     A,R2            ;PUT IT BACK
                    7851    ;       JNC     RSUB1           ;LOOP UNTIL CARRY
                    7852    ;
                    7853    ;       XCH     A,R0
                    7854    ;       ADD     A,DPL           ;RESTORE R2:R0
                    7855    ;       XCH     A,R0
                    7856    ;       XCH     A,R2
                    7857    ;       ADDC    A,DPH
                    7858    ;       XCH     A,R2
                    7859    ;
                    7860    ;FAST_DONE:
                    7861    ;
                    7862    ;       ORL     A,R6            ;OR THE COUNT VALUE
                    7863    ;       JZ      RSUB_R          ;RETURN IF ZERO
                    7864    ;
                    7865    ;RSUB2: MOV     A,#'0'          ;GET THE ASCII BIAS
                    7866    ;       ADD     A,R6            ;ADD THE COUNT
                    7867    ;
                    7868    ;RSUB4: MOV     P2,R3           ;SET UP P2
                    7869    ;       MOVX    @R1,A           ;PLACE THE VALUE IN MEMORY
                    7870    ;       INC     R1
                    7871    ;       CJNE    R1,#00H,RSUB3   ;SEE IF RAPPED AROUND
                    7872    ;       INC     R3              ;BUMP HIGH BYTE
                    7873    ;
                    7874    ;RSUB3: RET                     ;EXIT
                    7875    ;
                    7876    ;****** Faster code starts here: *********************************************
                    7877    ;
1EF7 7D00           7878            mov     R5,#0
                    7879    ;
1EF9 EA             7880    RSUB1:  mov     A, R2
1EFA 75F00A         7881            mov     B,#0AH
1EFD 84             7882            div     AB
1EFE FA             7883            mov     R2,A
1EFF E8             7884            mov     A,R0
1F00 54F0           7885            anl     A,#0F0H
1F02 45F0           7886            orl     A,B
1F04 C4             7887            swap    A
1F05 75F00A         7888            mov     B,#0AH
1F08 84             7889            div     AB
1F09 C4             7890            swap    A
BASIC52E                                                                                                      PAGE 138

1F0A FE             7891            mov     R6,A
1F0B E8             7892            mov     A,R0
1F0C 540F           7893            anl     A,#0FH
1F0E C4             7894            swap    A
1F0F 45F0           7895            orl     A,B
1F11 C4             7896            swap    A
1F12 75F00A         7897            mov     B,#0AH
1F15 84             7898            div     AB
1F16 4E             7899            orl     A,R6
1F17 F8             7900            mov     R0,A
1F18 E5F0           7901            mov     A,B
1F1A 2430           7902            add     A,#30H
1F1C 0D             7903            inc     R5
1F1D C0E0           7904            push    ACC
1F1F EA             7905            mov     A,R2
1F20 48             7906            orl     A,R0
1F21 70D6           7907            jnz     RSUB1
                    7908    ;
1F23 D0E0           7909    RSUB2:  pop     ACC
1F25 8BA0           7910            mov     P2,R3
1F27 F3             7911            movx    @R1,A
1F28 09             7912            inc     R1
1F29 B90001         7913            cjne    R1,#0,RSUB3
1F2C 0B             7914            inc     R3
                    7915    ;
1F2D DDF4           7916    RSUB3:  djnz    R5,RSUB2
1F2F 22             7917            ret
                    7918    ;
                    7919    ;****** continue with original code: *****************************************
                    7920    ;
                    7921            ;***************************************************************
                    7922            ;
1F30                7923    HEXOUT: ; Output the hex number in R3:R1, supress leading zeros, if set
                    7924            ;
                    7925            ;***************************************************************
                    7926            ;
1F30 D19A           7927            ACALL   SOUT            ;OUTPUT A SPACE
1F32 A236           7928            MOV     C,ZSURP         ;GET ZERO SUPPRESSION BIT
1F34 9223           7929            MOV     ADD_IN,C
1F36 EB             7930            MOV     A,R3            ;GET HIGH NIBBLE AND PRINT IT
1F37 F153           7931            ACALL   HOUTHI
1F39 EB             7932            MOV     A,R3
1F3A F154           7933            ACALL   HOUTLO
                    7934            ;
1F3C C223           7935    HEX2X:  CLR     ADD_IN          ;DON'T SUPPRESS ZEROS
1F3E E9             7936            MOV     A,R1            ;GET LOW NIBBLE AND PRINT IT
1F3F F153           7937            ACALL   HOUTHI
1F41 E9             7938            MOV     A,R1
1F42 F154           7939            ACALL   HOUTLO
1F44 7D48           7940            MOV     R5,#'H'         ;OUTPUT H TO INDICATE HEX MODE
                    7941            ;
1F46 C19C           7942    SOUT_1: AJMP    SOUT1
                    7943            ;
1F48 C223           7944    HOUT1:  CLR     ADD_IN          ;PRINTED SOMETHING, SO CLEAR ADD_IN
1F4A 2490           7945            ADD     A,#90H          ;CONVERT TO ASCII
1F4C D4             7946            DA      A
1F4D 3440           7947            ADDC    A,#40H
1F4F D4             7948            DA      A               ;GOT IT HERE
BASIC52E                                                                                                      PAGE 139

1F50 FD             7949            MOV     R5,A            ;OUTPUT THE BYTE
1F51 80F3           7950            SJMP    SOUT_1
                    7951            ;
1F53 C4             7952    HOUTHI: SWAP    A               ;SWAP TO OUTPUT HIGH NIBBLE
                    7953            ;
1F54 540F           7954    HOUTLO: ANL     A,#0FH          ;STRIP
1F56 70F0           7955            JNZ     HOUT1           ;PRINT IF NOT ZERO
1F58 3023ED         7956            JNB     ADD_IN,HOUT1    ;OUTPUT A ZERO IF NOT SUPRESSED
1F5B 22             7957            RET
                    7958    ;
                    7959    ;*****************************************************************************
                    7960    ;******* New baudrate detection **********************************************
                    7961    ;******* calculate r3:r1=-(Timer2 DIV 16) for serial mode ********************
                    7962    ;******* Wulf 3 alteration 2 *************************************************
                    7963    ;
                    7964    ;-- comment out for AT98LP52 -------------------------------------------------
                    7965    ;
                    7966    ;SERCALC:mov    a,#0F0h
                    7967    ;       mov     r3,a
                    7968    ;       mov     r1,TH2
                    7969    ;       anl     a,r1
                    7970    ;       swap    a
                    7971    ;       cpl     a
                    7972    ;       xch     a,r3
                    7973    ;       anl     a,TL2
                    7974    ;       xch     a,r1
                    7975    ;       anl     a,#00Fh
                    7976    ;       orl     a,r1
                    7977    ;       swap    a
                    7978    ;       cpl     a
                    7979    ;       mov     r1,ADCON        ;save BSY bit
                    7980    ;       mov     DAPR,#0         ;start A/D for 805xx test
                    7981    ;       xch     a,r1
                    7982    ;       ret
                    7983    ;
                    7984    ;-- insert for AT98LP52 -----------------------------------------------------
                    7985    ;TEST_MSG: db   'Speed OK?'
                    7986    ;       db      00h             ; Stop Code
                    7987    ;-- insert end --------------------------------------------------------------
                    7988    ;*****************************************************************************
                    7989    ;
1F78                7990            ORG     1F78H
                    7991            ;
1F78 201A03         7992    CKS_I:  JB      CKS_B,CS_I
1F7B 02401B         7993            LJMP    401BH
                    7994            ;
1F7E 022088         7995    CS_I:   LJMP    2088H
                    7996            ;
1F81 4E4F2044       7997    E14X:   DB      'NO DATA"'
1F85 41544122   
                    7998            ;
1F89 94             7999    E11X:   DB      128+20
1F8A 41524954       8000            DB      'ARITH. OVERFLOW"'
1F8E 482E204F   
1F92 56455246   
1F96 4C4F5722   
                    8001            ;
1F9A 50524F47       8002    E16X:   DB      'PROGRAMMING"'
BASIC52E                                                                                                      PAGE 140

1F9E 52414D4D   
1FA2 494E4722   
                    8003            ;
1FA6 43414E         8004    E15X:   DB      'CAN'
1FA9 27             8005            DB      27H
1FAA 5420434F       8006            DB      'T CONTINUE"'
1FAE 4E54494E   
1FB2 554522     
                    8007            ;
1FB5 494E5641       8008    E10X:   DB      'INVALID LINE NUMBER"'
1FB9 4C494420   
1FBD 4C494E45   
1FC1 204E554D   
1FC5 42455222   
                    8009            ;
1FC9 50524F4D       8010    NOROM:  DB      'PROM MODE"'
1FCD 204D4F44   
1FD1 4522       
                    8011            ;
                    8012    ;*****************************************************************************
                    8013    ;****** Set a new version message ********************************************
                    8014    ;
                    8015    ;S_N:   DB      '*MCS-51(tm) BASIC V1.1*'
                    8016    ;
1FD3 2A4D4353       8017    S_N:    DB      '*MCS-BASIC-52 V1.31*"'
1FD7 2D424153   
1FDB 49432D35   
1FDF 32205631   
1FE3 2E33312A   
1FE7 22         
                    8018    ;
                    8019    ;*****************************************************************************
                    8020    ;
1FEB                8021            ORG     1FEBH           ;FOR LINK COMPATABILITY
                    8022            ;
1FEB                8023    GET_DIGIT_CHECK:        ; Get a character, then check for digit
                    8024            ;
1FEB B15F           8025            ACALL   GET_DPTR_CHARACTER
                    8026            ;
1FED                8027    DIGIT_CHECK:    ;CHECK FOR A VALID ASCII DIGIT, SET CARRY IF FOUND
                    8028            ;
1FED B43A00         8029            CJNE    A,#'9'+1,DC10   ;SEE IF ASCII 9 OR LESS
1FF0 4001           8030    DC10:   JC      DC1
1FF2 22             8031            RET
                    8032            ;
1FF3 B43000         8033    DC1:    CJNE    A,#'0',DC11     ;SEE IF ASCII 0 OR GREATER
1FF6 B3             8034    DC11:   CPL     C
1FF7 22             8035            RET
                    8036            ;
1FF8                8037            ORG     1FF8H
                    8038            ;
1FF8 4552524F       8039    ERS:    DB      'ERROR: "'
1FFC 523A2022   
                    8040            ;
                    8041            ;***************************************************************
                    8042            ;
----                8043            XSEG    ;External Ram
                    8044            ;
BASIC52E                                                                                                      PAGE 141

                    8045            ;***************************************************************
                    8046            ;
0000                8047            DS      4
0004                8048    IBCNT:  DS      1               ;LENGTH OF A LINE
0005                8049    IBLN:   DS      2               ;THE LINE NUMBER
0007                8050    IBUF:   DS      LINLEN          ;THE INPUT BUFFER
0050                8051    CONVT:  DS      15              ;CONVERSION LOCATION FOR FPIN
                    8052            ;
0100                8053            ORG     100H
                    8054            ;
0100                8055    GTB:    DS      1               ;GET LOCATION
0101                8056    ERRLOC: DS      1               ;ERROR TYPE
0102                8057    ERRNUM: DS      2               ;WHERE TO GO ON AN ERROR
0104                8058    VARTOP: DS      2               ;TOP OF VARIABLE STORAGE
0106                8059    ST_ALL: DS      2               ;STORAGE ALLOCATION
0108                8060    MT_ALL: DS      2               ;MATRIX ALLOCATION
010A                8061    MEMTOP: DS      2               ;TOP OF MEMORY
010C                8062    RCELL:  DS      2               ;RANDOM NUMBER CELL
010E                8063            DS      FPSIZ-1
0113                8064    CXTAL:  DS      1               ;CRYSTAL
0114                8065            DS      FPSIZ-1
0119                8066    FPT1:   DS      1               ;FLOATINP POINT TEMP 1
011A                8067            DS      FPSIZ-1
011F                8068    FPT2:   DS      1               ;FLOATING POINT TEMP 2
0120                8069    INTLOC: DS      2               ;LOCATION TO GO TO ON INTERRUPT
0122                8070    STR_AL: DS      2               ;STRING ALLOCATION
0124                8071    SPV:    DS      2               ;SERIAL PORT BAUD RATE
0126                8072    TIV:    DS      2               ;TIMER INTERRUPT NUM AND LOC
0128                8073    PROGS:  DS      2               ;PROGRAM A PROM TIME OUT
                    8074    ;
                    8075    ;*****************************************************************************
                    8076    ;****** Disable Intel programming for to get room ****************************
                    8077    ;****** We don't need this, but don't remark it! *****************************
                    8078    ;
012A                8079    IPROGS: DS      2               ;INTELLIGENT PROM PROGRAMMER TIMEOUT
                    8080    ;
                    8081    ;*****************************************************************************
                    8082    ;
012C                8083    TM_TOP: DS      1
                    8084    ;
                    8085    ; ---- BASIC-52 Mainroutine End ----
                    8086    
----                8087            CSEG    ; Directive is used to select the Program Memory Space.
                    8088    
                    8089    ;****************************************************************************
                    8090    ;*                        BASIC-52 V1.31 enhancements                       *
                    8091    ;*          The following code enhanced BASIC-52 with new commands          *
                    8092    ;*               for I2C communicatin and read / write to SFR               *
                    8093    ;*--------------------------------------------------------------------------*
                    8094    ;* (C) H.-J. Boehling & D. Wulf 14.11.01                                    *
                    8095    ;*     http://home.arcor.de/h.boehling                                      *
                    8096    ;*     H-Boehling@gmx.de                                                    *
                    8097    ;****************************************************************************
                    8098    ;*
                    8099    ;* Four new I2C communication commands as I2C-bus master.
                    8100    ;*
                    8101    ;* The syntax to use is:
                    8102    ;*
BASIC52E                                                                                                      PAGE 142

                    8103    ;*     I2CSTART           Sends a start condition to I2C bus.
                    8104    ;*                        - Returns with busy, time out or status clear.  
                    8105    ;*     I2CSTOP            Sends a stop condition to I2C bus.
                    8106    ;*                        - Returns with time out or status clear.
                    8107    ;*     I2CPUT [byte]      Sends a byte to the I2C bus.
                    8108    ;*                        - Returns with time out, no acknowledge or clear.
                    8109    ;*     I2CGET [variable]  Reads a byte from I2C to a BASIC variable.
                    8110    ;*                        - Set 18H (status) to 1 to send no acknowledge:
                    8111    ;*                           DBY(18H) = 1 : I2CGET B : I2CSTOP : PRINT B
                    8112    ;*                        - Returns with time out or status clear. 
                    8113    ;*   
                    8114    ;* Register 18H is the I2C communication status register; useage is:
                    8115    ;*
                    8116    ;*     STATUS=DBY(18H)
                    8117    ;*      IF STATUS.AND.2=2 PRINT "Time out error!"
                    8118    ;*      IF STATUS.AND.4=4 PRINT "Busy error!"
                    8119    ;*      IF STATUS.AND.8=8 PRINT "No acknowlege error!"
                    8120    ;*
                    8121    ;*---------------------------------------------------------------------------
                    8122    ;*
                    8123    ;* Two new commands to read from or write to a special funkton register:
                    8124    ;*
                    8125    ;*     WRSFR ([address]) [byte]      Writes to a special funkton register.
                    8126    ;*
                    8127    ;*     RDSFR ([address]) [variable]  Reads from a special funkton register.
                    8128    ;*
                    8129    ;* [address] is the address of the SFR and had to be a value between 
                    8130    ;* 128 (080H) and 255 (0FFH).
                    8131    ;*
                    8132    ;****************************************************************************
                    8133    
                    8134    ;----- Definitions ----------------------------------------------------------
                    8135    
  0096              8136    SDA             bit     P1.6                    ;I2C serial data line.
  0095              8137    SCL             bit     P1.5                    ;I2C serial clock line.
                    8138    
  0018              8139    status          equ     018H                    ;Communication status.
                    8140    
                    8141    ;temp1          equ     11                      ;Temp. storage. ; *** alredy definition
                    8142    
                    8143    ;xbit           bit     45                      ;Command extension present. ; *** already de
                                                                               finition
                    8144     
                    8145    ; the following bits will be set in the status byte:
                    8146    
  0002              8147    tout            equ     00000010B               ;I2C time out status.
  0004              8148    busy            equ     00000100B               ;I2C bus busy status.
  0008              8149    nack            equ     00001000B               ;Slave sends no acknowledge.
                    8150                                                    
                    8151    ;----------------------------------------------------------------------------
                    8152    ; The following code is necessary to notify the new statements to BASIC.
                    8153    
2002                8154                    org     2002H                   ;5Ah at 2002h tells BASIC-52
2002 5A             8155                    db      5AH                     ;to call 2048h (see below).
2048                8156                    org     2048H                   ;Set bit 45 to tell BASIC-52
                    8157                                                    ;that custom commands or
2048 D22D           8158                    setb    xbit                    ;instructions have been
204A 22             8159                    ret                             ;added.
BASIC52E                                                                                                      PAGE 143

2070                8160                    org     2070H                   ;Store starting address of
2070 902400         8161                    mov     dptr,#vectortable       ;vector table.
2073 22             8162                    ret
2078                8163                    org     2078H                   ;Store starting address of
2078 90240C         8164                    mov     dptr,#tokentable        ;token table.
207B 22             8165                    ret
                    8166    
                    8167    ; The old code for BASIC-52 V1.3 overwrite 2090H, but this address had to be
                    8168    ; used for a user reset routine! So the code now starts at here:
                    8169    
                    8170    ;===== Here starts the code for the new BASIC statements ====================
                    8171    
2400                8172                    org     2400h                   ;use any available address
                    8173    
2400                8174    vectortable:                                    ;Vector table starts here.
                    8175                                                    ;Label to branch on:
2400 2440           8176                    dw      i2cstart                ;I2CSTART command
2402 2456           8177                    dw      i2cstop                 ;I2CSTOP command
2404 2462           8178                    dw      i2cput                  ;I2CPUT command
2406 2492           8179                    dw      i2cget                  ;I2CGET command
2408 2541           8180                    dw      wrsfr                   ;WRSFR command
240A 2519           8181                    dw      rdsfr                   ;RDSFR command
                    8182    
240C                8183    tokentable:                                     ;Token table starts here.
240C 10             8184                    db      10H                     ;1. user defined token for
240D 49324353       8185                    db      'I2CSTART'              ;command name.
2411 54415254   
2415 00             8186                    db      0                       ;End of token indicator
2416 11             8187                    db      11H                     ;2.
2417 49324353       8188                    db      'I2CSTOP'
241B 544F50     
241E 00             8189                    db      0
241F 12             8190                    db      12H                     ;3.
2420 49324350       8191                    db      'I2CPUT'
2424 5554       
2426 00             8192                    db      0
2427 13             8193                    db      13H                     ;4.
2428 49324347       8194                    db      'I2CGET'
242C 4554       
242E 00             8195                    db      0
242F 14             8196                    db      14H                     ;5.
2430 57525346       8197                    db      'WRSFR'
2434 52         
2435 00             8198                    db      0
2436 15             8199                    db      15H                     ;6.
2437 52445346       8200                    db      'RDSFR'
243B 52         
243C 00             8201                    db      0
                    8202    
                    8203    ;----- The following is necessary to get no problem with variable names -----
                    8204    
243D DF             8205                    db      0DFH                    ;Dummy token.
243E 7F             8206                    db      07FH                    ;Unused dummy char.
                    8207    
                    8208    ;----------------------------------------------------------------------------
                    8209    
243F FF             8210                    db      0FFH                    ;End of tokenlist indicator.
                    8211    
BASIC52E                                                                                                      PAGE 144

                    8212    ;----------------------------------------------------------------------------
                    8213    
                    8214    ;===== i2cstart - sends an I2C start condition to beginn communication ======
                    8215    
2440 1224BA         8216    i2cstart:       call    SCLhigh                 ;Set SCL to high.
2443 7F04           8217                    mov     R7,#4                   ;Load time out counter.
2445 D296           8218    setSDA:         setb    SDA                     ;Set SDA to high.
2447 209606         8219                    jb      SDA,ishigh              ;If not high bus is busy.
244A DFF9           8220                    djnz    R7,setSDA               ;If not try until R7 is zero.
244C 431804         8221                    orl     status,#busy            ;Set busy status.
244F 22             8222                    ret                             ;return to BASIC.
                    8223    
2450 C296           8224    ishigh:         clr     SDA                     ;Set start condition.
2452 531800         8225                    anl     status,#0               ;Clear I2C status.
2455 22             8226                    ret                             ;return to BASIC.
                    8227    
                    8228    ;===== i2cstop - sends an I2C stop condition to end communication ===========
                    8229    
2456 531800         8230    i2cstop:        anl     status,#0               ;Clear I2C status.
2459 C296           8231                    clr     SDA                     ;Get SDA ready for stop.
245B 91BA           8232                    acall   SCLhigh                 ;Set clock for stop.
245D 91B9           8233                    acall   delay                   ;Delay 4 machine cycles.
245F D296           8234                    setb    SDA                     ;Set stop condition.
2461 22             8235                    ret                             ;Return to BASIC.
                    8236    
                    8237    ;===== i2cput - sends a byte from a BASIC value out to the I2C bus ==========
                    8238    
                    8239    ;----- Get value and test for 8 bit only ------------------------------------
                    8240    
2462 7439           8241    i2cput:         mov     A,#39H                  ;Put value to send on
2464 120030         8242                    lcall   30H                     ;argument stack.
2467 7401           8243                    mov     A,#1                    ;change value to 16 bit
2469 120030         8244                    lcall   30H                     ;integer and write to R3:R1
246C BB0058         8245                    cjne    R3,#0,i2cerror          ;If R3 not zero then 
                    8246                                                    ;value bigger than 0FFH.
                    8247                                                    ;8 bit integer only error.
                    8248    
                    8249    ;----- Send byte to I2C bus -------------------------------------------------
                    8250    
246F E9             8251                    mov     A,R1                    ;Load byte to send.
2470 7E08           8252                    mov     R6,#8                   ;Load bit counter
2472 C295           8253    send:           clr     SCL                     ;Make clock low
2474 91B9           8254                    acall   delay                   ;Delay 4 machine cycles.
2476 33             8255                    rlc     A                       ;Rotate data bit to C.
2477 9296           8256                    mov     SDA,C                   ;Put data bit on pin.
2479 91BA           8257                    acall   SCLhigh                 ;Send clock.
247B 91B9           8258                    acall   delay                   ;Delay 4 machine cycles.
247D DEF3           8259                    djnz    R6,send                 ;Repeat until all bits sent.
                    8260    
                    8261    ;----- Read acknowledge from slave ------------------------------------------
                    8262            
247F C295           8263                    clr     SCL                     ;Make clock low.
2481 91B9           8264                    acall   delay                   ;Delay 4 machine cycles.
2483 D296           8265                    setb    SDA                     ;Release line for acknowledge.
2485 91BA           8266                    acall   SCLhigh                 ;Send clock for acknowlege.
2487 91B9           8267                    acall   delay                   ;Delay 4 machine cycles.
2489 309603         8268                    jnb     SDA,ackok               ;Check for valid acknowledge.
248C 431808         8269                    orl     status,#nack            ;Set no acknowledge status.
BASIC52E                                                                                                      PAGE 145

248F C295           8270    ackok:          clr     SCL                     ;Finish acknowledge bit.
2491 22             8271                    ret                             ;Return to BASIC.
                    8272    
                    8273    ;===== i2cget - Reads one byte from I2C bus to the argument stack ===========
                    8274    
2492 7E08           8275    i2cget:         mov     R6,#8                   ;Load bit counter
2494 C295           8276    read:           clr     SCL                     ;Make clock low.
2496 91B9           8277                    acall   delay                   ;Delay 4 machine cycles.
2498 91BA           8278                    acall   SCLhigh                 ;Send clock.
249A 91B9           8279                    acall   delay                   ;Delay 4 machine cycles.
249C A296           8280                    mov     C,SDA                   ;Get data bit from pin.
249E 33             8281                    rlc     A                       ;Rotate bit into result byte.
249F DEF3           8282                    djnz    R6,read                 ;Repeat until all received.
                    8283    
                    8284    ;----- Put received byte on argument stack ----------------------------------
                    8285    
24A1 F8             8286                    mov     R0,A                    ;Load R0 with reseived byte.
24A2 7A00           8287                    mov     R2,#0                   ;Set high byte to zero.
24A4 749A           8288                    mov     A,#9AH                  ;Put byte on argument stack
24A6 120030         8289                    lcall   30H                     ;with BASIC funktion.
                    8290    
                    8291    ;----- Send acknowledge to slave --------------------------------------------
                    8292    
24A9 C295           8293                    clr     SCL                     ;Set clock low.
24AB 91B9           8294                    acall   delay                   ;Delay 4 machine cycles.
24AD E518           8295                    mov     A,status                ;Load acknowledge bit
24AF 13             8296                    rrc     A                       ;into C and
24B0 9296           8297                    mov     SDA,C                   ;send acknowledge bit.
24B2 91BA           8298                    acall   SCLhigh                 ;Send acknowledge clock.
                    8299    
                    8300    ;----- Set variable to received byte ----------------------------------------
                    8301    
24B4 7443           8302                    mov     A,#43H                  ;Set next variable to value
24B6 020030         8303                    ljmp    30H                     ;on argument stack and
                    8304                                                    ;return to BASIC.
                    8305    
                    8306    ;----- delay - generates a delay of 4 machine cycles ------------------------
                    8307    
24B9 22             8308    delay:          ret                             ;4 cycles for CALL and RET.
                    8309    
                    8310    ;----- SCLhigh - sends SCL pin high and waits for any clock stretching ------
                    8311    
24BA 7F04           8312    SCLhigh:        mov     R7,#4                   ;Load time out counter.
24BC D295           8313    setSCL:         setb    SCL                     ;Set SCL to high.
24BE 209505         8314                    jb      SCL,quit                ;If SCL actually high return.
24C1 DFF9           8315                    djnz    R7,setSCL               ;If not try until R7 is zero.
24C3 431802         8316                    orl     status,#tout            ;Set status time out.
24C6 22             8317    quit:           ret
                    8318    
                    8319    ;----- error - sends an error message to the terminal -----------------------
                    8320    
24C7 7407           8321    i2cerror:       mov     A,#7                    ;Send CR/LF
24C9 120030         8322                    lcall   30H
24CC 7B24           8323                    mov     R3,#high i2cerrmsg      ;Set string address.
24CE 79DB           8324                    mov     R1,#low i2cerrmsg
                    8325    ;error:         setb    34H                     ;Read string from code memory. ; *** duplica
                                                                               te name
24D0 D234           8326    error9:         setb    34H                     ;Read string from code memory.
BASIC52E                                                                                                      PAGE 146

24D2 7406           8327                    mov     A,#6                    ;Send String to
24D4 120030         8328                    lcall   30H                     ;terminal.
24D7 E4             8329                    clr     A
24D8 020030         8330                    ljmp    30H                     ;Back to command mode.
                    8331    
24DB 4552524F       8332    i2cerrmsg:      db 'ERROR: BAD I2CPUT ARGUMENT'
24DF 523A2042   
24E3 41442049   
24E7 32435055   
24EB 54204152   
24EF 47554D45   
24F3 4E54       
24F5 22             8333                    db      22H                     ;End of text.   
                    8334    
24F6 4552524F       8335    sfrerrmsg:      db 'ERROR: BAD SFR ARGUMENT'
24FA 523A2042   
24FE 41442053   
2502 46522041   
2506 5247554D   
250A 454E54     
250D 22             8336                    db      22H                     ;End of text.
                    8337    
250E 7407           8338    sfrerror:       mov     A,#7                    ;Send CR/LF
2510 120030         8339                    lcall   30H
2513 7B24           8340                    mov     R3,#high sfrerrmsg      ;Set string address.
2515 79F6           8341                    mov     R1,#low sfrerrmsg
                    8342    ;               sjmp    error  ; *** error -> error9
2517 80B7           8343                    sjmp    error9
                    8344    
                    8345    ;===== rdsfr - read from special funtion register ==========================
                    8346    
2519 7439           8347    rdsfr:          mov     A,#39H                  ;Put address from text to
251B 120030         8348                    lcall   30H                     ;argument stack.
                    8349    
251E 7401           8350                    mov     A,#1                    ;change value to 16 bit
2520 120030         8351                    lcall   30H                     ;integer and write to R3:R1
                    8352    
2523 BB00E8         8353                    cjne    R3,#0,sfrerror          ;If R3 not zero then error.
2526 E9             8354                    mov     A,R1                    ;Address to Acc.
2527 30E7E4         8355                    jnb     Acc.7,sfrerror          ;If address less then 80H! 
252A FC             8356                    mov     R4,A                    ;Address to R4.
                    8357    
252B 758288         8358                    mov     DPL,#low sfrgettab      ;Set DPTR to jump
252E 758325         8359                    mov     DPH,#high sfrgettab     ;table.
2531 122569         8360                    call    do_sfr                  ;Read SFR.
                    8361    
2534 F8             8362                    mov     R0,A                    ;Load R0 with SFR byte.
2535 7A00           8363                    mov     R2,#0                   ;Set high byte to zero.
2537 749A           8364                    mov     A,#9AH                  ;Put byte on argument stack
2539 120030         8365                    lcall   30H
                    8366    
                    8367    ;----- Set variable to SFR byte ---------------------------------------------
                    8368    
253C 7443           8369                    mov     A,#43H                  ;Set next variable to value
253E 020030         8370                    ljmp    30H                     ;on argument stack and
                    8371                                                    ;return to BASIC.
                    8372    
                    8373    ;===== wrsfr - write to special funtion register ============================
BASIC52E                                                                                                      PAGE 147

                    8374    
2541 7439           8375    wrsfr:          mov     A,#39H                  ;Put address from text to
2543 120030         8376                    lcall   30H                     ;argument stack.
                    8377    
2546 7401           8378                    mov     A,#1                    ;change value to 16 bit
2548 120030         8379                    lcall   30H                     ;integer and write to R3:R1
254B BB00C0         8380                    cjne    R3,#0,sfrerror          ;If R3 not zero then error
254E E9             8381                    mov     A,R1                    ;or
254F 30E7BC         8382                    jnb     Acc.7,sfrerror          ;if address less then 80H! 
2552 890B           8383                    mov     temp1,R1                ;Save address.
                    8384    
2554 7439           8385                    mov     A,#39H                  ;Put value to write on
2556 120030         8386                    lcall   30H                     ;argument stack.
                    8387    
2559 7401           8388                    mov     A,#1                    ;change value to 16 bit
255B 120030         8389                    lcall   30H                     ;integer and write to R3:R1
255E BB00AD         8390                    cjne    R3,#0,sfrerror          ;If R3 not zero then 
                    8391                                                    ;8 bit integer only error.
2561 758286         8392                    mov     DPL,#low sfrputtab      ;Set DPTR to jump
2564 758325         8393                    mov     DPH,#high sfrputtab     ;table.
2567 AC0B           8394                    mov     R4,temp1                ;Address to write to R4.
                    8395    
                    8396    ;----- do_sfr - read from or wright to SFR ----------------------------------
                    8397    
                    8398    ;----- Calculate the jump ---------------------------------------------------
                    8399    
2569 EC             8400    do_sfr:         mov     A,R4                    ;Address to Acc
256A 2480           8401                    add     A,#80H
256C FC             8402                    mov     R4,A
256D 7800           8403                    mov     R0,#0
256F 25E0           8404                    add     A,ACC                   ;*2
2571 C8             8405                    xch     A,R0
2572 35E0           8406                    addc    A,ACC                   ;carry
2574 C8             8407                    xch     A,R0
2575 25E0           8408                    add     A,ACC                   ;*4
2577 C8             8409                    xch     A,R0
2578 35E0           8410                    addc    A,ACC                   ;carry
257A C8             8411                    xch     A,R0
                    8412    
                    8413    ;----- Load DPTR with offset and jump ---------------------------------------
                    8414    
257B 2582           8415                    add     A,DPL
257D F582           8416                    mov     DPL,A
257F E8             8417                    mov     A,R0
2580 3583           8418                    addc    A,DPH
2582 F583           8419                    mov     DPH,A
2584 EC             8420                    mov     A,R4
2585 73             8421                    jmp     @A+DPTR                 ;Jump into table.
                    8422    
                    8423    ;----- The direct addressing table ------------------------------------------
                    8424    
2586 8980           8425    sfrputtab:      mov     128,R1
2588 E580           8426    sfrgettab:      mov     A,128
258A 22             8427                    ret
258B 8981           8428                    mov     129,R1
258D E581           8429                    mov     A,129
258F 22             8430                    ret
2590 8982           8431                    mov     130,R1
BASIC52E                                                                                                      PAGE 148

2592 E582           8432                    mov     A,130
2594 22             8433                    ret
2595 8983           8434                    mov     131,R1
2597 E583           8435                    mov     A,131
2599 22             8436                    ret
259A 8984           8437                    mov     132,R1
259C E584           8438                    mov     A,132
259E 22             8439                    ret
259F 8985           8440                    mov     133,R1
25A1 E585           8441                    mov     A,133
25A3 22             8442                    ret
25A4 8986           8443                    mov     134,R1
25A6 E586           8444                    mov     A,134
25A8 22             8445                    ret
25A9 8987           8446                    mov     135,R1
25AB E587           8447                    mov     A,135
25AD 22             8448                    ret
25AE 8988           8449                    mov     136,R1
25B0 E588           8450                    mov     A,136
25B2 22             8451                    ret
25B3 8989           8452                    mov     137,R1
25B5 E589           8453                    mov     A,137
25B7 22             8454                    ret
25B8 898A           8455                    mov     138,R1
25BA E58A           8456                    mov     A,138
25BC 22             8457                    ret
25BD 898B           8458                    mov     139,R1
25BF E58B           8459                    mov     A,139
25C1 22             8460                    ret
25C2 898C           8461                    mov     140,R1
25C4 E58C           8462                    mov     A,140
25C6 22             8463                    ret
25C7 898D           8464                    mov     141,R1
25C9 E58D           8465                    mov     A,141
25CB 22             8466                    ret
25CC 898E           8467                    mov     142,R1
25CE E58E           8468                    mov     A,142
25D0 22             8469                    ret
25D1 898F           8470                    mov     143,R1
25D3 E58F           8471                    mov     A,143
25D5 22             8472                    ret
25D6 8990           8473                    mov     144,R1
25D8 E590           8474                    mov     A,144
25DA 22             8475                    ret
25DB 8991           8476                    mov     145,R1
25DD E591           8477                    mov     A,145
25DF 22             8478                    ret
25E0 8992           8479                    mov     146,R1
25E2 E592           8480                    mov     A,146
25E4 22             8481                    ret
25E5 8993           8482                    mov     147,R1
25E7 E593           8483                    mov     A,147
25E9 22             8484                    ret
25EA 8994           8485                    mov     148,R1
25EC E594           8486                    mov     A,148
25EE 22             8487                    ret
25EF 8995           8488                    mov     149,R1
25F1 E595           8489                    mov     A,149
BASIC52E                                                                                                      PAGE 149

25F3 22             8490                    ret
25F4 8996           8491                    mov     150,R1
25F6 E596           8492                    mov     A,150
25F8 22             8493                    ret
25F9 8997           8494                    mov     151,R1
25FB E597           8495                    mov     A,151
25FD 22             8496                    ret
25FE 8998           8497                    mov     152,R1
2600 E598           8498                    mov     A,152
2602 22             8499                    ret
2603 8999           8500                    mov     153,R1
2605 E599           8501                    mov     A,153
2607 22             8502                    ret
2608 899A           8503                    mov     154,R1
260A E59A           8504                    mov     A,154
260C 22             8505                    ret
260D 899B           8506                    mov     155,R1
260F E59B           8507                    mov     A,155
2611 22             8508                    ret
2612 899C           8509                    mov     156,R1
2614 E59C           8510                    mov     A,156
2616 22             8511                    ret
2617 899D           8512                    mov     157,R1
2619 E59D           8513                    mov     A,157
261B 22             8514                    ret
261C 899E           8515                    mov     158,R1
261E E59E           8516                    mov     A,158
2620 22             8517                    ret
2621 899F           8518                    mov     159,R1
2623 E59F           8519                    mov     A,159
2625 22             8520                    ret
2626 89A0           8521                    mov     160,R1
2628 E5A0           8522                    mov     A,160
262A 22             8523                    ret
262B 89A1           8524                    mov     161,R1
262D E5A1           8525                    mov     A,161
262F 22             8526                    ret
2630 89A2           8527                    mov     162,R1
2632 E5A2           8528                    mov     A,162
2634 22             8529                    ret
2635 89A3           8530                    mov     163,R1
2637 E5A3           8531                    mov     A,163
2639 22             8532                    ret
263A 89A4           8533                    mov     164,R1
263C E5A4           8534                    mov     A,164
263E 22             8535                    ret
263F 89A5           8536                    mov     165,R1
2641 E5A5           8537                    mov     A,165
2643 22             8538                    ret
2644 89A6           8539                    mov     166,R1
2646 E5A6           8540                    mov     A,166
2648 22             8541                    ret
2649 89A7           8542                    mov     167,R1
264B E5A7           8543                    mov     A,167
264D 22             8544                    ret
264E 89A8           8545                    mov     168,R1
2650 E5A8           8546                    mov     A,168
2652 22             8547                    ret
BASIC52E                                                                                                      PAGE 150

2653 89A9           8548                    mov     169,R1
2655 E5A9           8549                    mov     A,169
2657 22             8550                    ret
2658 89AA           8551                    mov     170,R1
265A E5AA           8552                    mov     A,170
265C 22             8553                    ret
265D 89AB           8554                    mov     171,R1
265F E5AB           8555                    mov     A,171
2661 22             8556                    ret
2662 89AC           8557                    mov     172,R1
2664 E5AC           8558                    mov     A,172
2666 22             8559                    ret
2667 89AD           8560                    mov     173,R1
2669 E5AD           8561                    mov     A,173
266B 22             8562                    ret
266C 89AE           8563                    mov     174,R1
266E E5AE           8564                    mov     A,174
2670 22             8565                    ret
2671 89AF           8566                    mov     175,R1
2673 E5AF           8567                    mov     A,175
2675 22             8568                    ret
2676 89B0           8569                    mov     176,R1
2678 E5B0           8570                    mov     A,176
267A 22             8571                    ret
267B 89B1           8572                    mov     177,R1
267D E5B1           8573                    mov     A,177
267F 22             8574                    ret
2680 89B2           8575                    mov     178,R1
2682 E5B2           8576                    mov     A,178
2684 22             8577                    ret
2685 89B3           8578                    mov     179,R1
2687 E5B3           8579                    mov     A,179
2689 22             8580                    ret
268A 89B4           8581                    mov     180,R1
268C E5B4           8582                    mov     A,180
268E 22             8583                    ret
268F 89B5           8584                    mov     181,R1
2691 E5B5           8585                    mov     A,181
2693 22             8586                    ret
2694 89B6           8587                    mov     182,R1
2696 E5B6           8588                    mov     A,182
2698 22             8589                    ret
2699 89B7           8590                    mov     183,R1
269B E5B7           8591                    mov     A,183
269D 22             8592                    ret
269E 89B8           8593                    mov     184,R1
26A0 E5B8           8594                    mov     A,184
26A2 22             8595                    ret
26A3 89B9           8596                    mov     185,R1
26A5 E5B9           8597                    mov     A,185
26A7 22             8598                    ret
26A8 89BA           8599                    mov     186,R1
26AA E5BA           8600                    mov     A,186
26AC 22             8601                    ret
26AD 89BB           8602                    mov     187,R1
26AF E5BB           8603                    mov     A,187
26B1 22             8604                    ret
26B2 89BC           8605                    mov     188,R1
BASIC52E                                                                                                      PAGE 151

26B4 E5BC           8606                    mov     A,188
26B6 22             8607                    ret
26B7 89BD           8608                    mov     189,R1
26B9 E5BD           8609                    mov     A,189
26BB 22             8610                    ret
26BC 89BE           8611                    mov     190,R1
26BE E5BE           8612                    mov     A,190
26C0 22             8613                    ret
26C1 89BF           8614                    mov     191,R1
26C3 E5BF           8615                    mov     A,191
26C5 22             8616                    ret
26C6 89C0           8617                    mov     192,R1
26C8 E5C0           8618                    mov     A,192
26CA 22             8619                    ret
26CB 89C1           8620                    mov     193,R1
26CD E5C1           8621                    mov     A,193
26CF 22             8622                    ret
26D0 89C2           8623                    mov     194,R1
26D2 E5C2           8624                    mov     A,194
26D4 22             8625                    ret
26D5 89C3           8626                    mov     195,R1
26D7 E5C3           8627                    mov     A,195
26D9 22             8628                    ret
26DA 89C4           8629                    mov     196,R1
26DC E5C4           8630                    mov     A,196
26DE 22             8631                    ret
26DF 89C5           8632                    mov     197,R1
26E1 E5C5           8633                    mov     A,197
26E3 22             8634                    ret
26E4 89C6           8635                    mov     198,R1
26E6 E5C6           8636                    mov     A,198
26E8 22             8637                    ret
26E9 89C7           8638                    mov     199,R1
26EB E5C7           8639                    mov     A,199
26ED 22             8640                    ret
26EE 89C8           8641                    mov     200,R1
26F0 E5C8           8642                    mov     A,200
26F2 22             8643                    ret
26F3 89C9           8644                    mov     201,R1
26F5 E5C9           8645                    mov     A,201
26F7 22             8646                    ret
26F8 89CA           8647                    mov     202,R1
26FA E5CA           8648                    mov     A,202
26FC 22             8649                    ret
26FD 89CB           8650                    mov     203,R1
26FF E5CB           8651                    mov     A,203
2701 22             8652                    ret
2702 89CC           8653                    mov     204,R1
2704 E5CC           8654                    mov     A,204
2706 22             8655                    ret
2707 89CD           8656                    mov     205,R1
2709 E5CD           8657                    mov     A,205
270B 22             8658                    ret
270C 89CE           8659                    mov     206,R1
270E E5CE           8660                    mov     A,206
2710 22             8661                    ret
2711 89CF           8662                    mov     207,R1
2713 E5CF           8663                    mov     A,207
BASIC52E                                                                                                      PAGE 152

2715 22             8664                    ret
2716 89D0           8665                    mov     208,R1
2718 E5D0           8666                    mov     A,208
271A 22             8667                    ret
271B 89D1           8668                    mov     209,R1
271D E5D1           8669                    mov     A,209
271F 22             8670                    ret
2720 89D2           8671                    mov     210,R1
2722 E5D2           8672                    mov     A,210
2724 22             8673                    ret
2725 89D3           8674                    mov     211,R1
2727 E5D3           8675                    mov     A,211
2729 22             8676                    ret
272A 89D4           8677                    mov     212,R1
272C E5D4           8678                    mov     A,212
272E 22             8679                    ret
272F 89D5           8680                    mov     213,R1
2731 E5D5           8681                    mov     A,213
2733 22             8682                    ret
2734 89D6           8683                    mov     214,R1
2736 E5D6           8684                    mov     A,214
2738 22             8685                    ret
2739 89D7           8686                    mov     215,R1
273B E5D7           8687                    mov     A,215
273D 22             8688                    ret
273E 89D8           8689                    mov     216,R1
2740 E5D8           8690                    mov     A,216
2742 22             8691                    ret
2743 89D9           8692                    mov     217,R1
2745 E5D9           8693                    mov     A,217
2747 22             8694                    ret
2748 89DA           8695                    mov     218,R1
274A E5DA           8696                    mov     A,218
274C 22             8697                    ret
274D 89DB           8698                    mov     219,R1
274F E5DB           8699                    mov     A,219
2751 22             8700                    ret
2752 89DC           8701                    mov     220,R1
2754 E5DC           8702                    mov     A,220
2756 22             8703                    ret
2757 89DD           8704                    mov     221,R1
2759 E5DD           8705                    mov     A,221
275B 22             8706                    ret
275C 89DE           8707                    mov     222,R1
275E E5DE           8708                    mov     A,222
2760 22             8709                    ret
2761 89DF           8710                    mov     223,R1
2763 E5DF           8711                    mov     A,223
2765 22             8712                    ret
2766 89E0           8713                    mov     224,R1
2768 E5E0           8714                    mov     A,224
276A 22             8715                    ret
276B 89E1           8716                    mov     225,R1
276D E5E1           8717                    mov     A,225
276F 22             8718                    ret
2770 89E2           8719                    mov     226,R1
2772 E5E2           8720                    mov     A,226
2774 22             8721                    ret
BASIC52E                                                                                                      PAGE 153

2775 89E3           8722                    mov     227,R1
2777 E5E3           8723                    mov     A,227
2779 22             8724                    ret
277A 89E4           8725                    mov     228,R1
277C E5E4           8726                    mov     A,228
277E 22             8727                    ret
277F 89E5           8728                    mov     229,R1
2781 E5E5           8729                    mov     A,229
2783 22             8730                    ret
2784 89E6           8731                    mov     230,R1
2786 E5E6           8732                    mov     A,230
2788 22             8733                    ret
2789 89E7           8734                    mov     231,R1
278B E5E7           8735                    mov     A,231
278D 22             8736                    ret
278E 89E8           8737                    mov     232,R1
2790 E5E8           8738                    mov     A,232
2792 22             8739                    ret
2793 89E9           8740                    mov     233,R1
2795 E5E9           8741                    mov     A,233
2797 22             8742                    ret
2798 89EA           8743                    mov     234,R1
279A E5EA           8744                    mov     A,234
279C 22             8745                    ret
279D 89EB           8746                    mov     235,R1
279F E5EB           8747                    mov     A,235
27A1 22             8748                    ret
27A2 89EC           8749                    mov     236,R1
27A4 E5EC           8750                    mov     A,236
27A6 22             8751                    ret
27A7 89ED           8752                    mov     237,R1
27A9 E5ED           8753                    mov     A,237
27AB 22             8754                    ret
27AC 89EE           8755                    mov     238,R1
27AE E5EE           8756                    mov     A,238
27B0 22             8757                    ret
27B1 89EF           8758                    mov     239,R1
27B3 E5EF           8759                    mov     A,239
27B5 22             8760                    ret
27B6 89F0           8761                    mov     240,R1
27B8 E5F0           8762                    mov     A,240
27BA 22             8763                    ret
27BB 89F1           8764                    mov     241,R1
27BD E5F1           8765                    mov     A,241
27BF 22             8766                    ret
27C0 89F2           8767                    mov     242,R1
27C2 E5F2           8768                    mov     A,242
27C4 22             8769                    ret
27C5 89F3           8770                    mov     243,R1
27C7 E5F3           8771                    mov     A,243
27C9 22             8772                    ret
27CA 89F4           8773                    mov     244,R1
27CC E5F4           8774                    mov     A,244
27CE 22             8775                    ret
27CF 89F5           8776                    mov     245,R1
27D1 E5F5           8777                    mov     A,245
27D3 22             8778                    ret
27D4 89F6           8779                    mov     246,R1
BASIC52E                                                                                                      PAGE 154

27D6 E5F6           8780                    mov     A,246
27D8 22             8781                    ret
27D9 89F7           8782                    mov     247,R1
27DB E5F7           8783                    mov     A,247
27DD 22             8784                    ret
27DE 89F8           8785                    mov     248,R1
27E0 E5F8           8786                    mov     A,248
27E2 22             8787                    ret
27E3 89F9           8788                    mov     249,R1
27E5 E5F9           8789                    mov     A,249
27E7 22             8790                    ret
27E8 89FA           8791                    mov     250,R1
27EA E5FA           8792                    mov     A,250
27EC 22             8793                    ret
27ED 89FB           8794                    mov     251,R1
27EF E5FB           8795                    mov     A,251
27F1 22             8796                    ret
27F2 89FC           8797                    mov     252,R1
27F4 E5FC           8798                    mov     A,252
27F6 22             8799                    ret
27F7 89FD           8800                    mov     253,R1
27F9 E5FD           8801                    mov     A,253
27FB 22             8802                    ret
27FC 89FE           8803                    mov     254,R1
27FE E5FE           8804                    mov     A,254
2800 22             8805                    ret
2801 89FF           8806                    mov     255,R1
2803 E5FF           8807                    mov     A,255
2805 22             8808                    ret
                    8809    
                    8810    ;----------------------------------------------------------------------------
                    8811    
                    8812                    end
                    8813    

VERSION 1.2h ASSEMBLY COMPLETE, 0 ERRORS FOUND
BASIC52E                                                                                                      PAGE 155

AABS . . . . . . . . . . . . . .  C ADDR  138FH  
AADD . . . . . . . . . . . . . .  C ADDR  1741H  
AANL . . . . . . . . . . . . . .  C ADDR  1484H  
AATAN. . . . . . . . . . . . . .  C ADDR  11E0H  
AATAN1 . . . . . . . . . . . . .  C ADDR  11EEH  
AC1. . . . . . . . . . . . . . .  C ADDR  096CH  
ACBYTE . . . . . . . . . . . . .  C ADDR  13ADH  
ACC. . . . . . . . . . . . . . .  D ADDR  00E0H  PREDEFINED  
ACKOK. . . . . . . . . . . . . .  C ADDR  248FH  
ACOS . . . . . . . . . . . . . .  C ADDR  116DH  
ADBYTE . . . . . . . . . . . . .  C ADDR  13B6H  
ADCON. . . . . . . . . . . . . .    NUMB  00D8H  NOT USED  
ADDLP. . . . . . . . . . . . . .  C ADDR  19F2H  
ADDPTR . . . . . . . . . . . . .  C ADDR  05DEH  
ADDPTR1. . . . . . . . . . . . .  C ADDR  05E6H  
ADD_IN . . . . . . . . . . . . .  B ADDR  0023H  
ADD_R. . . . . . . . . . . . . .  C ADDR  19F0H  
ADIV . . . . . . . . . . . . . .  C ADDR  140AH  
AEL1 . . . . . . . . . . . . . .  C ADDR  1282H  
AELP . . . . . . . . . . . . . .  C ADDR  1270H  
AEQ. . . . . . . . . . . . . . .  C ADDR  13DBH  
AEQ1 . . . . . . . . . . . . . .  C ADDR  13DDH  
AETOX. . . . . . . . . . . . . .  C ADDR  1327H  
AEXL . . . . . . . . . . . . . .  C ADDR  134EH  
AEXP . . . . . . . . . . . . . .  C ADDR  132BH  
AEXP1. . . . . . . . . . . . . .  C ADDR  133DH  
AFREE. . . . . . . . . . . . . .  C ADDR  1711H  
AGE. . . . . . . . . . . . . . .  C ADDR  13E7H  
AGET . . . . . . . . . . . . . .  C ADDR  14A9H  
AGT. . . . . . . . . . . . . . .  C ADDR  13C5H  
AGT1 . . . . . . . . . . . . . .  C ADDR  13C9H  
AI1. . . . . . . . . . . . . . .  C ADDR  137AH  
AI11 . . . . . . . . . . . . . .  C ADDR  1381H  
AI2. . . . . . . . . . . . . . .  C ADDR  1382H  
AI21 . . . . . . . . . . . . . .  C ADDR  138AH  
AI3. . . . . . . . . . . . . . .  C ADDR  138EH  
AINT . . . . . . . . . . . . . .  C ADDR  136DH  
AL . . . . . . . . . . . . . . .  C ADDR  0D4FH  
AL1. . . . . . . . . . . . . . .  C ADDR  0D52H  
AL2. . . . . . . . . . . . . . .  C ADDR  0D57H  
AL3. . . . . . . . . . . . . . .  C ADDR  0D58H  
ALE. . . . . . . . . . . . . . .  C ADDR  13EBH  
ALEN . . . . . . . . . . . . . .  C ADDR  1721H  
ALN. . . . . . . . . . . . . . .  C ADDR  12C0H  
ALN1 . . . . . . . . . . . . . .  C ADDR  12CDH  
ALN11. . . . . . . . . . . . . .  C ADDR  12EFH  
ALNE . . . . . . . . . . . . . .  C ADDR  12E5H  
ALNL . . . . . . . . . . . . . .  C ADDR  12D3H  
ALNO . . . . . . . . . . . . . .  C ADDR  12F8H  
ALPAR. . . . . . . . . . . . . .  C ADDR  13ACH  
ALT. . . . . . . . . . . . . . .  C ADDR  13D6H  
ALT1 . . . . . . . . . . . . . .  C ADDR  13D8H  
AMUL . . . . . . . . . . . . . .  C ADDR  11B0H  
ANE. . . . . . . . . . . . . . .  C ADDR  13E1H  
ANEG . . . . . . . . . . . . . .  C ADDR  13A1H  
ANOT . . . . . . . . . . . . . .  C ADDR  1496H  
ANU. . . . . . . . . . . . . . .  C ADDR  0D44H  
AORL . . . . . . . . . . . . . .  C ADDR  148DH  
BASIC52E                                                                                                      PAGE 156

AP1. . . . . . . . . . . . . . .  C ADDR  14E5H  
APCON. . . . . . . . . . . . . .  C ADDR  14E9H  
ARCAP2 . . . . . . . . . . . . .  C ADDR  14DFH  
ARG1_EXP_IS_LARGER . . . . . . .  C ADDR  1A56H  
ARG1_EXP_IS_LARGER1. . . . . . .  C ADDR  1A57H  
ARG1_EXP_IS_LARGER2. . . . . . .  C ADDR  1A5AH  
ARGF . . . . . . . . . . . . . .  B ADDR  0024H  
ARG_STACK. . . . . . . . . . . .    NUMB  0009H  
ARG_STACK_PAGE . . . . . . . . .    NUMB  0001H  
ARND . . . . . . . . . . . . . .  C ADDR  13F1H  
ASGN . . . . . . . . . . . . . .  C ADDR  1395H  
ASIN . . . . . . . . . . . . . .  C ADDR  1171H  
ASIN1. . . . . . . . . . . . . .  C ADDR  1187H  
ASQR . . . . . . . . . . . . . .  C ADDR  128DH  
ASTKA. . . . . . . . . . . . . .    NUMB  0009H  
ASTKAH . . . . . . . . . . . . .    NUMB  0001H  
ASUB . . . . . . . . . . . . . .  C ADDR  171CH  
AT2CON . . . . . . . . . . . . .  C ADDR  14D3H  
ATAN . . . . . . . . . . . . . .  C ADDR  11D0H  
ATCON. . . . . . . . . . . . . .  C ADDR  14D7H  
ATIM0. . . . . . . . . . . . . .  C ADDR  14C1H  
ATIM1. . . . . . . . . . . . . .  C ADDR  14C7H  
ATIM2. . . . . . . . . . . . . .  C ADDR  14CDH  
ATIME. . . . . . . . . . . . . .  C ADDR  1729H  
ATMOD. . . . . . . . . . . . . .  C ADDR  14DBH  
ATTAB. . . . . . . . . . . . . .  C ADDR  112AH  
AXBYTE . . . . . . . . . . . . .  C ADDR  13BEH  
AXBYTE1. . . . . . . . . . . . .  C ADDR  13C0H  
AXRL . . . . . . . . . . . . . .  C ADDR  1498H  
AXTAL. . . . . . . . . . . . . .  C ADDR  0FD9H  
AXTAL0 . . . . . . . . . . . . .  C ADDR  1657H  
AXTAL1 . . . . . . . . . . . . .  C ADDR  165CH  
AXTAL2 . . . . . . . . . . . . .  C ADDR  1679H  
AXTAL3 . . . . . . . . . . . . .  C ADDR  121FH  
A_D. . . . . . . . . . . . . . .  C ADDR  1260H  
A_IE . . . . . . . . . . . . . .  C ADDR  14B9H  
A_IP . . . . . . . . . . . . . .  C ADDR  14BDH  
B. . . . . . . . . . . . . . . .  D ADDR  00F0H  PREDEFINED  
B4800. . . . . . . . . . . . . .    NUMB  00B2H  NOT USED  
B9600. . . . . . . . . . . . . .    NUMB  00D9H  NOT USED  
BABC . . . . . . . . . . . . . .    NUMB  0027H  NOT USED  
BAUD19K. . . . . . . . . . . . .    NUMB  00B2H  
BCHR . . . . . . . . . . . . . .  C ADDR  082FH  
BCHR1. . . . . . . . . . . . . .  C ADDR  0835H  
BCK. . . . . . . . . . . . . . .  C ADDR  078DH  
BD . . . . . . . . . . . . . . .  B ADDR  00DFH  NOT USED  
BELL . . . . . . . . . . . . . .    NUMB  0007H  
BG1. . . . . . . . . . . . . . .  C ADDR  0428H  
BG3. . . . . . . . . . . . . . .  C ADDR  0467H  
BI . . . . . . . . . . . . . . .  B ADDR  0032H  
BO . . . . . . . . . . . . . . .  B ADDR  002CH  
BOFAH. . . . . . . . . . . . . .    NUMB  0013H  
BOFAL. . . . . . . . . . . . . .    NUMB  0014H  
BOTH_PLUS. . . . . . . . . . . .  C ADDR  1A5EH  NOT USED  
BR0. . . . . . . . . . . . . . .  C ADDR  07F1H  
BR2. . . . . . . . . . . . . . .  C ADDR  083EH  
BS . . . . . . . . . . . . . . .    NUMB  0008H  
BUSY . . . . . . . . . . . . . .    NUMB  0004H  
BASIC52E                                                                                                      PAGE 157

B_C. . . . . . . . . . . . . . .  C ADDR  0AA4H  
B_TXA. . . . . . . . . . . . . .  C ADDR  0F23H  
B_TXA1 . . . . . . . . . . . . .  C ADDR  0F2DH  
C0 . . . . . . . . . . . . . . .  C ADDR  0CF6H  
C0C. . . . . . . . . . . . . . .  C ADDR  1025H  
C0ORX1 . . . . . . . . . . . . .  B ADDR  0034H  
C1 . . . . . . . . . . . . . . .  C ADDR  0CFDH  
C1C. . . . . . . . . . . . . . .  C ADDR  1030H  
C2 . . . . . . . . . . . . . . .  C ADDR  0D06H  
C2C. . . . . . . . . . . . . . .  C ADDR  102FH  
C2_T2. . . . . . . . . . . . . .  C ADDR  146CH  
C3C. . . . . . . . . . . . . . .  C ADDR  1035H  
CASB . . . . . . . . . . . . . .  C ADDR  1E9EH  NOT USED  
CASB2. . . . . . . . . . . . . .  C ADDR  1EADH  
CASB4. . . . . . . . . . . . . .  C ADDR  1EC0H  
CASB5. . . . . . . . . . . . . .  C ADDR  1EC2H  
CASB6. . . . . . . . . . . . . .  C ADDR  1ECBH  
CBIAS. . . . . . . . . . . . . .  C ADDR  167BH  
CC1. . . . . . . . . . . . . . .  C ADDR  1844H  
CCAL . . . . . . . . . . . . . .  C ADDR  051CH  
CCAL1. . . . . . . . . . . . . .  C ADDR  052CH  
CCLR3. . . . . . . . . . . . . .  C ADDR  068CH  
CCONT. . . . . . . . . . . . . .  C ADDR  183EH  
CERASE . . . . . . . . . . . . .  C ADDR  0500H  
CILOOP . . . . . . . . . . . . .  C ADDR  080FH  
CILOOP1. . . . . . . . . . . . .  C ADDR  0811H  
CIUB . . . . . . . . . . . . . .  B ADDR  001EH  
CI_RET . . . . . . . . . . . . .  C ADDR  07BEH  
CI_RET1. . . . . . . . . . . . .  C ADDR  07BFH  
CKS_B. . . . . . . . . . . . . .  B ADDR  001AH  
CKS_I. . . . . . . . . . . . . .  C ADDR  1F78H  
CL1. . . . . . . . . . . . . . .  C ADDR  106FH  
CL2. . . . . . . . . . . . . . .  C ADDR  1074H  
CL3. . . . . . . . . . . . . . .  C ADDR  1092H  
CL6. . . . . . . . . . . . . . .  C ADDR  1094H  
CL7. . . . . . . . . . . . . . .  C ADDR  109DH  
CLIST. . . . . . . . . . . . . .  C ADDR  104EH  
CLIST1 . . . . . . . . . . . . .  C ADDR  106BH  
CLN_UP . . . . . . . . . . . . .  C ADDR  0F17H  
CLOCK_CFG. . . . . . . . . . . .    NUMB  00B9H  
CLOOP. . . . . . . . . . . . . .  C ADDR  1A66H  
CL_1 . . . . . . . . . . . . . .  C ADDR  067DH  
CL_2 . . . . . . . . . . . . . .  C ADDR  068BH  NOT USED  
CMND1. . . . . . . . . . . . . .  C ADDR  1787H  
CMND11 . . . . . . . . . . . . .  C ADDR  17EBH  
CMND3. . . . . . . . . . . . . .  C ADDR  17C4H  
CMND31 . . . . . . . . . . . . .  C ADDR  17D1H  
CMND5. . . . . . . . . . . . . .  C ADDR  17DDH  
CMNDD. . . . . . . . . . . . . .  C ADDR  010FH  
CMNDLK . . . . . . . . . . . . .  C ADDR  0855H  
CMNDR. . . . . . . . . . . . . .  C ADDR  1794H  
CMNDSP . . . . . . . . . . . . .    NUMB  004DH  
CMNX . . . . . . . . . . . . . .  C ADDR  179BH  
CMNX1. . . . . . . . . . . . . .  C ADDR  17A8H  
CMPLK. . . . . . . . . . . . . .  C ADDR  1208H  
CN0. . . . . . . . . . . . . . .  C ADDR  0FFEH  
CN0T . . . . . . . . . . . . . .  C ADDR  101CH  
CN0T1. . . . . . . . . . . . . .  C ADDR  1005H  
BASIC52E                                                                                                      PAGE 158

CN0T2. . . . . . . . . . . . . .  C ADDR  1010H  
CN0T3. . . . . . . . . . . . . .  C ADDR  1012H  
CN0T4. . . . . . . . . . . . . .  C ADDR  101BH  
CNEW . . . . . . . . . . . . . .  C ADDR  065CH  
CNEW1. . . . . . . . . . . . . .  C ADDR  0662H  
CNTRLC . . . . . . . . . . . . .    NUMB  0003H  
CNTRLD . . . . . . . . . . . . .    NUMB  0004H  
CNT_S. . . . . . . . . . . . . .  B ADDR  0035H  
CNULL. . . . . . . . . . . . . .  C ADDR  0B08H  
CNX. . . . . . . . . . . . . . .  C ADDR  0FF9H  
COB. . . . . . . . . . . . . . .  B ADDR  001BH  
CONB . . . . . . . . . . . . . .  B ADDR  0017H  
CONST. . . . . . . . . . . . . .  C ADDR  0FEFH  
CONVERT. . . . . . . . . . . . .    NUMB  0058H  
CONVERT_ASCII_STRING_TO_BINARY .  C ADDR  1E9EH  
CONVERT_BINARY_TO_ASCII_STRING .  C ADDR  1EF7H  
CONVT. . . . . . . . . . . . . .  X ADDR  0050H  
COUB . . . . . . . . . . . . . .  B ADDR  001CH  
CPROG. . . . . . . . . . . . . .  C ADDR  048AH  
CPROG1 . . . . . . . . . . . . .  C ADDR  048DH  NOT USED  
CPROG2 . . . . . . . . . . . . .  C ADDR  04B1H  NOT USED  
CPS. . . . . . . . . . . . . . .  C ADDR  0EA9H  
CR . . . . . . . . . . . . . . .    NUMB  000DH  
CR0. . . . . . . . . . . . . . .  C ADDR  03ECH  
CR1. . . . . . . . . . . . . . .  C ADDR  0400H  
CR11 . . . . . . . . . . . . . .  C ADDR  0403H  
CR2. . . . . . . . . . . . . . .  C ADDR  040CH  
CR20 . . . . . . . . . . . . . .  C ADDR  0419H  
CRAM . . . . . . . . . . . . . .  C ADDR  177FH  
CRLF . . . . . . . . . . . . . .  C ADDR  06A5H  
CRLF2. . . . . . . . . . . . . .  C ADDR  06A3H  
CROM . . . . . . . . . . . . . .  C ADDR  053CH  
CRP. . . . . . . . . . . . . . .  C ADDR  06ADH  
CRS. . . . . . . . . . . . . . .  C ADDR  03E0H  
CRS1 . . . . . . . . . . . . . .  C ADDR  03E5H  
CRS2 . . . . . . . . . . . . . .  C ADDR  03E8H  
CRST . . . . . . . . . . . . . .  C ADDR  038BH  
CRST1. . . . . . . . . . . . . .  C ADDR  03A4H  
CRST2. . . . . . . . . . . . . .  C ADDR  03A7H  
CRUN . . . . . . . . . . . . . .  C ADDR  0802H  
CS1. . . . . . . . . . . . . . .  C ADDR  0B47H  
CSC. . . . . . . . . . . . . . .  C ADDR  0BBDH  
CSETUP . . . . . . . . . . . . .  C ADDR  0B4BH  
CSETUP1. . . . . . . . . . . . .  C ADDR  0B56H  
CSTAKA . . . . . . . . . . . . .  C ADDR  142CH  
CSTAKA2. . . . . . . . . . . . .  C ADDR  142AH  
CSTKA. . . . . . . . . . . . . .    NUMB  0011H  
CSTKAH . . . . . . . . . . . . .    NUMB  0000H  
CSTS . . . . . . . . . . . . . .  C ADDR  07C8H  
CSTS1. . . . . . . . . . . . . .  C ADDR  07CEH  
CSTS2. . . . . . . . . . . . . .  C ADDR  07D4H  
CSY. . . . . . . . . . . . . . .  C ADDR  0A1EH  
CSY1 . . . . . . . . . . . . . .  C ADDR  0A2EH  
CSY2 . . . . . . . . . . . . . .  C ADDR  0A3AH  
CS_I . . . . . . . . . . . . . .  C ADDR  1F7EH  
CXFER. . . . . . . . . . . . . .  C ADDR  1773H  
CXTAL. . . . . . . . . . . . . .  X ADDR  0113H  
CY . . . . . . . . . . . . . . .  B ADDR  00D7H  PREDEFINED  
BASIC52E                                                                                                      PAGE 159

C_1. . . . . . . . . . . . . . .  C ADDR  0F12H  
C_2. . . . . . . . . . . . . . .  C ADDR  0F0DH  
C_BIT. . . . . . . . . . . . . .  B ADDR  002EH  
C_EX . . . . . . . . . . . . . .  C ADDR  07D7H  
C_K. . . . . . . . . . . . . . .  C ADDR  0540H  
C_TST. . . . . . . . . . . . . .  C ADDR  0EC6H  
D1 . . . . . . . . . . . . . . .  C ADDR  05DCH  
DACK . . . . . . . . . . . . . .  B ADDR  0096H  
DAPR . . . . . . . . . . . . . .    NUMB  00DAH  NOT USED  
DBTWO. . . . . . . . . . . . . .  C ADDR  1194H  
DC1. . . . . . . . . . . . . . .  C ADDR  1FF3H  
DC10 . . . . . . . . . . . . . .  C ADDR  1FF0H  
DC11 . . . . . . . . . . . . . .  C ADDR  1FF6H  
DCMPX. . . . . . . . . . . . . .  C ADDR  05CCH  
DEC3210. . . . . . . . . . . . .  C ADDR  158BH  
DEC3211. . . . . . . . . . . . .  C ADDR  158FH  NOT USED  
DEC3212. . . . . . . . . . . . .  C ADDR  1590H  
DEC76. . . . . . . . . . . . . .  C ADDR  1647H  
DEC77. . . . . . . . . . . . . .  C ADDR  164CH  
DECDP. . . . . . . . . . . . . .  C ADDR  05C2H  
DECDP1 . . . . . . . . . . . . .  C ADDR  05C8H  
DECDP2 . . . . . . . . . . . . .  C ADDR  05C0H  
DECX . . . . . . . . . . . . . .  C ADDR  1D42H  
DEC_ASTKA. . . . . . . . . . . .  C ADDR  120BH  
DEC_ASTKA1 . . . . . . . . . . .  C ADDR  1212H  
DEC_R. . . . . . . . . . . . . .  C ADDR  1589H  
DELAY. . . . . . . . . . . . . .  C ADDR  24B9H  
DELTST . . . . . . . . . . . . .  C ADDR  0EE1H  
DELTST1. . . . . . . . . . . . .  C ADDR  0EE3H  
DIGIT. . . . . . . . . . . . . .    NUMB  0004H  
DIGIT_CHECK. . . . . . . . . . .  C ADDR  1FEDH  
DIRF . . . . . . . . . . . . . .  B ADDR  002FH  
DIV0 . . . . . . . . . . . . . .  C ADDR  1ABDH  
DIV3 . . . . . . . . . . . . . .  C ADDR  1ACAH  
DIV4 . . . . . . . . . . . . . .  C ADDR  1AD7H  
DIV5 . . . . . . . . . . . . . .  C ADDR  1ADAH  
DIV6 . . . . . . . . . . . . . .  C ADDR  1AE2H  
DIV7 . . . . . . . . . . . . . .  C ADDR  1AF9H  
DIV8 . . . . . . . . . . . . . .  C ADDR  1B0EH  
DLD. . . . . . . . . . . . . . .  C ADDR  062BH  
DONE_LOAD. . . . . . . . . . . .  B ADDR  0053H  
DO_SFR . . . . . . . . . . . . .  C ADDR  2569H  
DPH. . . . . . . . . . . . . . .  D ADDR  0083H  PREDEFINED  
DPL. . . . . . . . . . . . . . .  D ADDR  0082H  PREDEFINED  
DP_B . . . . . . . . . . . . . .  C ADDR  0E9BH  
DP_T . . . . . . . . . . . . . .  C ADDR  0EA2H  
DRQ. . . . . . . . . . . . . . .  B ADDR  0031H  
DT1. . . . . . . . . . . . . . .  C ADDR  0EE8H  
DTEMP. . . . . . . . . . . . . .  C ADDR  184DH  
DTYPE. . . . . . . . . . . . . .    NUMB  0003H  
DUBSUB . . . . . . . . . . . . .  C ADDR  0A02H  
D_CHK. . . . . . . . . . . . . .  C ADDR  0DCCH  
D_L1 . . . . . . . . . . . . . .  C ADDR  0AF8H  
D_UNDER. . . . . . . . . . . . .  C ADDR  1AC8H  
E10X . . . . . . . . . . . . . .  C ADDR  1FB5H  
E11X . . . . . . . . . . . . . .  C ADDR  1F89H  
E14X . . . . . . . . . . . . . .  C ADDR  1F81H  
E15X . . . . . . . . . . . . . .  C ADDR  1FA6H  
BASIC52E                                                                                                      PAGE 160

E16X . . . . . . . . . . . . . .  C ADDR  1F9AH  
E1X. . . . . . . . . . . . . . .  C ADDR  1746H  
E1XX . . . . . . . . . . . . . .  C ADDR  1885H  
E1XX1. . . . . . . . . . . . . .  C ADDR  1887H  
E1XX2. . . . . . . . . . . . . .  C ADDR  188CH  
E2X. . . . . . . . . . . . . . .  C ADDR  1751H  
E3X. . . . . . . . . . . . . . .  C ADDR  1828H  
E3XX . . . . . . . . . . . . . .  C ADDR  09BDH  
E4XX . . . . . . . . . . . . . .  C ADDR  0BC1H  
E4YY . . . . . . . . . . . . . .  C ADDR  121AH  
E5X. . . . . . . . . . . . . . .  C ADDR  1816H  
E6X. . . . . . . . . . . . . . .  C ADDR  1761H  
E7X. . . . . . . . . . . . . . .  C ADDR  1804H  
EA . . . . . . . . . . . . . . .  B ADDR  00AFH  PREDEFINED  
EATC . . . . . . . . . . . . . .  C ADDR  0CE5H  
EBIAS. . . . . . . . . . . . . .  C ADDR  1261H  
EIG. . . . . . . . . . . . . . .  C ADDR  036DH  
EIGP . . . . . . . . . . . . . .  C ADDR  0E4EH  
EK . . . . . . . . . . . . . . .  C ADDR  0C0EH  
ENDBIT . . . . . . . . . . . . .  B ADDR  0029H  
EOF. . . . . . . . . . . . . . .    NUMB  0001H  
EP1. . . . . . . . . . . . . . .  C ADDR  0F45H  
EP2. . . . . . . . . . . . . . .  C ADDR  0F49H  
EP21 . . . . . . . . . . . . . .  C ADDR  0F52H  
EP22 . . . . . . . . . . . . . .  C ADDR  0F5BH  
EP3. . . . . . . . . . . . . . .  C ADDR  0F6FH  
EP4. . . . . . . . . . . . . . .  C ADDR  0F71H  
EP41 . . . . . . . . . . . . . .  C ADDR  0F76H  
EP42 . . . . . . . . . . . . . .  C ADDR  0F7BH  
EP5. . . . . . . . . . . . . . .  C ADDR  0F82H  
ER0. . . . . . . . . . . . . . .  C ADDR  1874H  
ER1. . . . . . . . . . . . . . .  C ADDR  18B8H  
ER2. . . . . . . . . . . . . . .  C ADDR  18C2H  
ER3. . . . . . . . . . . . . . .  C ADDR  18D1H  
ER31 . . . . . . . . . . . . . .  C ADDR  18EEH  
ER4. . . . . . . . . . . . . . .  C ADDR  18FBH  
ERA1 . . . . . . . . . . . . . .  C ADDR  050DH  
ERAMEND. . . . . . . . . . . . .    NUMB  03FFH  
ERL4 . . . . . . . . . . . . . .  C ADDR  0844H  
ERPAR. . . . . . . . . . . . . .  C ADDR  0CE3H  
ERRLK. . . . . . . . . . . . . .  C ADDR  04D6H  
ERRLOC . . . . . . . . . . . . .  X ADDR  0101H  
ERRNUM . . . . . . . . . . . . .  X ADDR  0102H  
ERROR. . . . . . . . . . . . . .  C ADDR  188FH  
ERROR0 . . . . . . . . . . . . .  C ADDR  189BH  
ERROR01. . . . . . . . . . . . .  C ADDR  18A2H  
ERROR1 . . . . . . . . . . . . .  C ADDR  1890H  
ERROR9 . . . . . . . . . . . . .  C ADDR  24D0H  
ERRS . . . . . . . . . . . . . .  C ADDR  18ADH  
ERS. . . . . . . . . . . . . . .  C ADDR  1FF8H  
ET0. . . . . . . . . . . . . . .  B ADDR  00A9H  PREDEFINED  
EX1. . . . . . . . . . . . . . .  B ADDR  00AAH  PREDEFINED  
EXA. . . . . . . . . . . . . . .  C ADDR  037BH  
EXC. . . . . . . . . . . . . . .  C ADDR  0383H  
EXI. . . . . . . . . . . . . . .  C ADDR  1836H  
EXP1 . . . . . . . . . . . . . .  C ADDR  17F8H  
EXP11. . . . . . . . . . . . . .  C ADDR  17F2H  
EXPONENTS_EQUAL. . . . . . . . .  C ADDR  1A5BH  
BASIC52E                                                                                                      PAGE 161

EXPOT4 . . . . . . . . . . . . .  C ADDR  1E16H  
EXPOT5 . . . . . . . . . . . . .  C ADDR  1E41H  
EXPOTX . . . . . . . . . . . . .  C ADDR  1E14H  
EXPOUT . . . . . . . . . . . . .  C ADDR  1E01H  
EXPRB. . . . . . . . . . . . . .  C ADDR  0F43H  
E_FIND . . . . . . . . . . . . .  C ADDR  0A93H  
F0 . . . . . . . . . . . . . . .  B ADDR  00D5H  PREDEFINED  
FCMP . . . . . . . . . . . . . .  C ADDR  1202H  
FDT1 . . . . . . . . . . . . . .  C ADDR  1D53H  
FDT2 . . . . . . . . . . . . . .  C ADDR  1D5BH  
FDTEST . . . . . . . . . . . . .  C ADDR  1D4FH  NOT USED  
FINDC. . . . . . . . . . . . . .  C ADDR  0EEEH  
FINDCR . . . . . . . . . . . . .  C ADDR  0EECH  
FINISH1. . . . . . . . . . . . .  C ADDR  1D14H  
FINISH2. . . . . . . . . . . . .  C ADDR  1D27H  
FINISH_UP. . . . . . . . . . . .  C ADDR  1D28H  
FINISH_UP1 . . . . . . . . . . .  C ADDR  1D2FH  
FIRST_RADIX. . . . . . . . . . .  B ADDR  0052H  
FL1. . . . . . . . . . . . . . .  C ADDR  0AD3H  
FL11 . . . . . . . . . . . . . .  C ADDR  0AD7H  
FL2. . . . . . . . . . . . . . .  C ADDR  0AECH  
FL3. . . . . . . . . . . . . . .  C ADDR  0ADCH  
FLOATING_ADD . . . . . . . . . .  C ADDR  1993H  
FLOATING_COMP. . . . . . . . . .  C ADDR  1A43H  
FLOATING_DIV . . . . . . . . . .  C ADDR  1AB0H  
FLOATING_MUL . . . . . . . . . .  C ADDR  1A73H  
FLOATING_POINT_INPUT . . . . . .  C ADDR  1CC2H  
FLOATING_POINT_OUTPUT. . . . . .  C ADDR  1D7AH  
FLOATING_SUB . . . . . . . . . .  C ADDR  1989H  
FMUL0. . . . . . . . . . . . . .  C ADDR  1A78H  
FMUL1. . . . . . . . . . . . . .  C ADDR  1A7AH  
FMUL2. . . . . . . . . . . . . .  C ADDR  1A8CH  
FMUL21 . . . . . . . . . . . . .  C ADDR  1A8EH  
FMUL3. . . . . . . . . . . . . .  C ADDR  1A9DH  
FMUL_OVER. . . . . . . . . . . .  C ADDR  1A88H  
FNDCL2 . . . . . . . . . . . . .  C ADDR  0EF6H  
FNDCL3 . . . . . . . . . . . . .  C ADDR  0EFAH  
FORMAT . . . . . . . . . . . . .    NUMB  0017H  
FOUND_RADIX. . . . . . . . . . .  B ADDR  0051H  
FOV. . . . . . . . . . . . . . .  C ADDR  1A8AH  
FPC1 . . . . . . . . . . . . . .  C ADDR  1BB5H  
FPO1 . . . . . . . . . . . . . .  C ADDR  1D8CH  
FPO2 . . . . . . . . . . . . . .  C ADDR  1D93H  
FPO3 . . . . . . . . . . . . . .  C ADDR  1DA6H  
FPONE. . . . . . . . . . . . . .  C ADDR  16F2H  
FPSIZ. . . . . . . . . . . . . .    NUMB  0006H  
FPT1 . . . . . . . . . . . . . .  X ADDR  0119H  
FPT2 . . . . . . . . . . . . . .  X ADDR  011FH  
FPTS . . . . . . . . . . . . . .  C ADDR  104BH  
FPTST. . . . . . . . . . . . . .  C ADDR  1038H  
FPTST1 . . . . . . . . . . . . .  C ADDR  1045H  
FP_ACC1. . . . . . . . . . . . .    NUMB  0035H  NOT USED  
FP_ACC2. . . . . . . . . . . . .    NUMB  0036H  NOT USED  
FP_ACC3. . . . . . . . . . . . .    NUMB  0037H  NOT USED  
FP_ACC4. . . . . . . . . . . . .    NUMB  0038H  NOT USED  
FP_ACC5. . . . . . . . . . . . .    NUMB  0039H  NOT USED  
FP_ACC6. . . . . . . . . . . . .    NUMB  003AH  NOT USED  
FP_ACC7. . . . . . . . . . . . .    NUMB  003BH  NOT USED  
BASIC52E                                                                                                      PAGE 162

FP_ACC8. . . . . . . . . . . . .    NUMB  003CH  
FP_ACCC. . . . . . . . . . . . .    NUMB  0034H  
FP_ACCS. . . . . . . . . . . . .    NUMB  003DH  NOT USED  
FP_ACCX. . . . . . . . . . . . .    NUMB  0033H  
FP_BASE. . . . . . . . . . . . .  C ADDR  196FH  
FP_BASE1 . . . . . . . . . . . .  C ADDR  1971H  
FP_BASE10. . . . . . . . . . . .  C ADDR  1983H  
FP_BASE11. . . . . . . . . . . .  C ADDR  1985H  
FP_BASE12. . . . . . . . . . . .  C ADDR  1987H  
FP_BASE2 . . . . . . . . . . . .  C ADDR  1973H  
FP_BASE3 . . . . . . . . . . . .  C ADDR  1975H  
FP_BASE4 . . . . . . . . . . . .  C ADDR  1977H  
FP_BASE5 . . . . . . . . . . . .  C ADDR  1979H  
FP_BASE6 . . . . . . . . . . . .  C ADDR  197BH  
FP_BASE7 . . . . . . . . . . . .  C ADDR  197DH  
FP_BASE8 . . . . . . . . . . . .  C ADDR  197FH  
FP_BASE9 . . . . . . . . . . . .  C ADDR  1981H  
FP_CARRY . . . . . . . . . . . .    NUMB  002AH  
FP_CLEAR . . . . . . . . . . . .  C ADDR  1BB2H  
FP_DIG12 . . . . . . . . . . . .    NUMB  002BH  
FP_DIG34 . . . . . . . . . . . .    NUMB  002CH  
FP_DIG56 . . . . . . . . . . . .    NUMB  002DH  
FP_DIG78 . . . . . . . . . . . .    NUMB  002EH  
FP_EXP . . . . . . . . . . . . .    NUMB  0030H  
FP_NIB1. . . . . . . . . . . . .    NUMB  002BH  
FP_NIB2. . . . . . . . . . . . .    NUMB  002CH  NOT USED  
FP_NIB3. . . . . . . . . . . . .    NUMB  002DH  NOT USED  
FP_NIB4. . . . . . . . . . . . .    NUMB  002EH  NOT USED  
FP_NIB5. . . . . . . . . . . . .    NUMB  002FH  NOT USED  
FP_NIB6. . . . . . . . . . . . .    NUMB  0030H  NOT USED  
FP_NIB7. . . . . . . . . . . . .    NUMB  0031H  NOT USED  
FP_NIB8. . . . . . . . . . . . .    NUMB  0032H  
FP_NUMBER_SIZE . . . . . . . . .    NUMB  0006H  
FP_SIGN. . . . . . . . . . . . .    NUMB  002FH  
FP_STATUS. . . . . . . . . . . .    NUMB  0028H  
FP_TEMP. . . . . . . . . . . . .    NUMB  0029H  
FREE . . . . . . . . . . . . . .  C ADDR  1DD2H  
FREE1. . . . . . . . . . . . . .  C ADDR  1DD9H  
FREE2. . . . . . . . . . . . . .  C ADDR  1DF5H  
FREE4. . . . . . . . . . . . . .  C ADDR  1DEDH  
FRTEST . . . . . . . . . . . . .  C ADDR  1D4CH  
FS . . . . . . . . . . . . . . .  C ADDR  13D0H  
FSIZE. . . . . . . . . . . . . .    NUMB  0011H  
FSTK . . . . . . . . . . . . . .  C ADDR  13CBH  
FSUB10 . . . . . . . . . . . . .  C ADDR  1A41H  
FSUB5. . . . . . . . . . . . . .  C ADDR  1A10H  
FSUB6. . . . . . . . . . . . . .  C ADDR  1A1BH  
FSUB7. . . . . . . . . . . . . .  C ADDR  1A1FH  
FSUB8. . . . . . . . . . . . . .  C ADDR  1A2AH  
FSUB81 . . . . . . . . . . . . .  C ADDR  1A2DH  
FSUB9. . . . . . . . . . . . . .  C ADDR  1A30H  
FTYPE. . . . . . . . . . . . . .    NUMB  0001H  
FUL1 . . . . . . . . . . . . . .  C ADDR  15B0H  
FULL . . . . . . . . . . . . . .  C ADDR  15A8H  
F_VAR. . . . . . . . . . . . . .  C ADDR  0619H  
F_VAR0 . . . . . . . . . . . . .  C ADDR  0620H  
F_VAR1 . . . . . . . . . . . . .  C ADDR  0636H  
F_VAR2 . . . . . . . . . . . . .  C ADDR  0643H  
BASIC52E                                                                                                      PAGE 163

G1 . . . . . . . . . . . . . . .  C ADDR  058FH  
G2 . . . . . . . . . . . . . . .  C ADDR  05A2H  
G3 . . . . . . . . . . . . . . .  C ADDR  05A6H  
G4 . . . . . . . . . . . . . . .  C ADDR  05A9H  
G5 . . . . . . . . . . . . . . .  C ADDR  05ACH  
GC . . . . . . . . . . . . . . .  C ADDR  0ECDH  
GCI. . . . . . . . . . . . . . .  C ADDR  0ED5H  
GCI1 . . . . . . . . . . . . . .  C ADDR  0ED7H  
GCI11. . . . . . . . . . . . . .  C ADDR  0EDEH  
GETEND . . . . . . . . . . . . .  C ADDR  058AH  
GETLIN . . . . . . . . . . . . .  C ADDR  058CH  
GET_DIGIT_CHECK. . . . . . . . .  C ADDR  1FEBH  
GET_DPTR_CHARACTER . . . . . . .  C ADDR  1D5FH  
GET_NUM. . . . . . . . . . . . .  C ADDR  1957H  
GLN. . . . . . . . . . . . . . .  C ADDR  0AD1H  
GT1. . . . . . . . . . . . . . .  C ADDR  1CEAH  
GT11 . . . . . . . . . . . . . .  C ADDR  1CF2H  
GT12 . . . . . . . . . . . . . .  C ADDR  1CF5H  
GT2. . . . . . . . . . . . . . .  C ADDR  1D02H  
GTB. . . . . . . . . . . . . . .  X ADDR  0100H  
GTEST. . . . . . . . . . . . . .  C ADDR  1CDBH  
GTRD . . . . . . . . . . . . . .  B ADDR  0018H  
GTX. . . . . . . . . . . . . . .  C ADDR  1547H  
GTX1 . . . . . . . . . . . . . .  C ADDR  155AH  
GTYPE. . . . . . . . . . . . . .    NUMB  0002H  
HC1. . . . . . . . . . . . . . .  C ADDR  1CB1H  
HC11 . . . . . . . . . . . . . .  C ADDR  1CB4H  
HEX2X. . . . . . . . . . . . . .  C ADDR  1F3CH  NOT USED  
HEXDO1 . . . . . . . . . . . . .  C ADDR  1CA1H  
HEXDON . . . . . . . . . . . . .  C ADDR  1CA0H  
HEXOUT . . . . . . . . . . . . .  C ADDR  1F30H  
HEXSC1 . . . . . . . . . . . . .  C ADDR  1C8FH  
HEXSCAN. . . . . . . . . . . . .  C ADDR  1C89H  
HEX_CHECK. . . . . . . . . . . .  C ADDR  1CA9H  
HEX_CHECK1 . . . . . . . . . . .  C ADDR  1CAEH  
HMODE. . . . . . . . . . . . . .  B ADDR  0037H  
HOUT1. . . . . . . . . . . . . .  C ADDR  1F48H  
HOUTHI . . . . . . . . . . . . .  C ADDR  1F53H  
HOUTLO . . . . . . . . . . . . .  C ADDR  1F54H  
HS1. . . . . . . . . . . . . . .  C ADDR  1CA6H  
H_RET. . . . . . . . . . . . . .  C ADDR  196BH  
I2 . . . . . . . . . . . . . . .  C ADDR  123BH  
I21. . . . . . . . . . . . . . .  C ADDR  1247H  
I2CERRMSG. . . . . . . . . . . .  C ADDR  24DBH  
I2CERROR . . . . . . . . . . . .  C ADDR  24C7H  
I2CGET . . . . . . . . . . . . .  C ADDR  2492H  
I2CPUT . . . . . . . . . . . . .  C ADDR  2462H  
I2CSTART . . . . . . . . . . . .  C ADDR  2440H  
I2CSTOP. . . . . . . . . . . . .  C ADDR  2456H  
IAN. . . . . . . . . . . . . . .  C ADDR  00F3H  
IAT. . . . . . . . . . . . . . .  C ADDR  090BH  
IAT1 . . . . . . . . . . . . . .  C ADDR  090EH  
IBCNT. . . . . . . . . . . . . .  X ADDR  0004H  
IBLK . . . . . . . . . . . . . .  C ADDR  193FH  
IBLK1. . . . . . . . . . . . . .  C ADDR  194EH  
IBLN . . . . . . . . . . . . . .  X ADDR  0005H  
IBUF . . . . . . . . . . . . . .  X ADDR  0007H  
ICLR . . . . . . . . . . . . . .  C ADDR  069AH  
BASIC52E                                                                                                      PAGE 164

ICLR1. . . . . . . . . . . . . .  C ADDR  069FH  
IE . . . . . . . . . . . . . . .  D ADDR  00A8H  PREDEFINED  
IFIX . . . . . . . . . . . . . .  C ADDR  1223H  
IFIXL. . . . . . . . . . . . . .  C ADDR  0E90H  
IGC. . . . . . . . . . . . . . .  C ADDR  0ECBH  
ILOOP. . . . . . . . . . . . . .  C ADDR  0813H  
ILOOP1 . . . . . . . . . . . . .  C ADDR  081FH  
IMOV . . . . . . . . . . . . . .  C ADDR  1566H  
IN2. . . . . . . . . . . . . . .  C ADDR  0DFDH  
IN2A . . . . . . . . . . . . . .  C ADDR  0E02H  
IN3. . . . . . . . . . . . . . .  C ADDR  0E0FH  
IN3A . . . . . . . . . . . . . .  C ADDR  0E20H  
IN5. . . . . . . . . . . . . . .  C ADDR  0E40H  
IN6. . . . . . . . . . . . . . .  C ADDR  0E49H  
INBIT. . . . . . . . . . . . . .  B ADDR  001DH  
INC3210. . . . . . . . . . . . .  C ADDR  1576H  
INC3211. . . . . . . . . . . . .  C ADDR  157BH  
INC3212. . . . . . . . . . . . .  C ADDR  1580H  
INCH1. . . . . . . . . . . . . .  C ADDR  07AAH  
INCH11 . . . . . . . . . . . . .  C ADDR  07AFH  
INCH12 . . . . . . . . . . . . .  C ADDR  07B4H  
INCH13 . . . . . . . . . . . . .  C ADDR  07BBH  
INCHAR . . . . . . . . . . . . .  C ADDR  0791H  
INCHAR1. . . . . . . . . . . . .  C ADDR  0799H  
INCHAR2. . . . . . . . . . . . .  C ADDR  07A1H  
INC_AND_GET_DPTR_CHARACTER . . .  C ADDR  1D5EH  
INC_ASTKA. . . . . . . . . . . .  C ADDR  124FH  
INC_FP_EXP . . . . . . . . . . .  C ADDR  1B72H  
INERR. . . . . . . . . . . . . .  C ADDR  1D44H  
INL0 . . . . . . . . . . . . . .  C ADDR  06D6H  NOT USED  
INL1 . . . . . . . . . . . . . .  C ADDR  06DDH  
INL11. . . . . . . . . . . . . .  C ADDR  06E6H  
INL2 . . . . . . . . . . . . . .  C ADDR  06D3H  
INL2B. . . . . . . . . . . . . .  C ADDR  06ECH  
INL2B1 . . . . . . . . . . . . .  C ADDR  06F2H  
INL2B2 . . . . . . . . . . . . .  C ADDR  06F5H  
INL6 . . . . . . . . . . . . . .  C ADDR  06FEH  
INLINE . . . . . . . . . . . . .  C ADDR  06D8H  
INLOOP . . . . . . . . . . . . .  C ADDR  1CD0H  
INLPIK . . . . . . . . . . . . .  C ADDR  1CD8H  
INLX . . . . . . . . . . . . . .  C ADDR  06E8H  
INPROG . . . . . . . . . . . . .  B ADDR  0011H  
INP_B. . . . . . . . . . . . . .  B ADDR  0022H  
INS. . . . . . . . . . . . . . .  C ADDR  0103H  
INSR . . . . . . . . . . . . . .  C ADDR  1517H  
INSR1. . . . . . . . . . . . . .  C ADDR  1523H  
INTBIT . . . . . . . . . . . . .  B ADDR  0012H  
INTERR . . . . . . . . . . . . .  C ADDR  0F30H  
INTERR1. . . . . . . . . . . . .  C ADDR  0F32H  
INTERX . . . . . . . . . . . . .  C ADDR  0938H  
INTERX1. . . . . . . . . . . . .  C ADDR  093BH  
INTERX2. . . . . . . . . . . . .  C ADDR  0941H  
INTERX3. . . . . . . . . . . . .  C ADDR  0948H  
INTERX4. . . . . . . . . . . . .  C ADDR  094DH  
INTGER . . . . . . . . . . . . .  C ADDR  0F35H  
INTGRC . . . . . . . . . . . . .  B ADDR  0019H  NOT USED  
INTLOC . . . . . . . . . . . . .  X ADDR  0120H  
INTPEN . . . . . . . . . . . . .  B ADDR  0016H  
BASIC52E                                                                                                      PAGE 165

INTXAH . . . . . . . . . . . . .    NUMB  0042H  
INTXAL . . . . . . . . . . . . .    NUMB  0043H  
IP . . . . . . . . . . . . . . .  D ADDR  00B8H  PREDEFINED  
IPROGS . . . . . . . . . . . . .  X ADDR  012AH  NOT USED  
IRAMTOP. . . . . . . . . . . . .    NUMB  00FFH  
ISAV . . . . . . . . . . . . . .  B ADDR  002BH  
ISHIGH . . . . . . . . . . . . .  C ADDR  2450H  
ISTA0. . . . . . . . . . . . . .  C ADDR  0950H  
ISTA01 . . . . . . . . . . . . .  C ADDR  095AH  
ISTA1. . . . . . . . . . . . . .  C ADDR  095CH  
ISTAT. . . . . . . . . . . . . .  C ADDR  08F8H  
ISTAT1 . . . . . . . . . . . . .  C ADDR  0900H  
ISTAX. . . . . . . . . . . . . .  C ADDR  091CH  
ISTAX1 . . . . . . . . . . . . .  C ADDR  0921H  
ISTAY. . . . . . . . . . . . . .  C ADDR  0925H  
ISTAY1 . . . . . . . . . . . . .  C ADDR  0928H  
ISTAY2 . . . . . . . . . . . . .  C ADDR  092DH  
IST_CAL. . . . . . . . . . . . .  C ADDR  09E7H  
ITRAP. . . . . . . . . . . . . .  C ADDR  086AH  
ITRAP1 . . . . . . . . . . . . .  C ADDR  0872H  
ITRAP2 . . . . . . . . . . . . .  C ADDR  087AH  
ITRAP21. . . . . . . . . . . . .  C ADDR  087DH  NOT USED  
ITRAP3 . . . . . . . . . . . . .  C ADDR  0882H  
ITRET. . . . . . . . . . . . . .  C ADDR  0F40H  
I_DL . . . . . . . . . . . . . .  C ADDR  185BH  
I_DR . . . . . . . . . . . . . .  C ADDR  1902H  
I_L. . . . . . . . . . . . . . .  C ADDR  0849H  
I_PI . . . . . . . . . . . . . .  C ADDR  0E95H  
I_RET. . . . . . . . . . . . . .  C ADDR  1871H  
I_S. . . . . . . . . . . . . . .  C ADDR  0933H  
I_S1 . . . . . . . . . . . . . .  C ADDR  0936H  
I_T0 . . . . . . . . . . . . . .  B ADDR  0026H  
L20DPI . . . . . . . . . . . . .  C ADDR  0573H  
L31DPI . . . . . . . . . . . . .  C ADDR  05BAH  
LCLR . . . . . . . . . . . . . .  C ADDR  05E7H  
LDPTRI . . . . . . . . . . . . .  C ADDR  05B0H  
LD_A . . . . . . . . . . . . . .  C ADDR  0FE9H  
LD_T . . . . . . . . . . . . . .  C ADDR  0582H  
LEFT . . . . . . . . . . . . . .  C ADDR  1BF3H  
LEFT1. . . . . . . . . . . . . .  C ADDR  1BF5H  
LEFT2. . . . . . . . . . . . . .  C ADDR  1BF6H  
LEFT3. . . . . . . . . . . . . .  C ADDR  1BFDH  NOT USED  
LEFT5. . . . . . . . . . . . . .  C ADDR  1C1CH  
LEFTL. . . . . . . . . . . . . .  C ADDR  1C08H  
LEFTL1 . . . . . . . . . . . . .  C ADDR  1C1BH  
LF . . . . . . . . . . . . . . .    NUMB  000AH  
LIN1 . . . . . . . . . . . . . .  C ADDR  155CH  
LINE . . . . . . . . . . . . . .  C ADDR  14F0H  
LINE0. . . . . . . . . . . . . .  C ADDR  14EDH  
LINE1. . . . . . . . . . . . . .  C ADDR  150BH  
LINEB. . . . . . . . . . . . . .  B ADDR  0015H  
LINLEN . . . . . . . . . . . . .    NUMB  0049H  
LMOV . . . . . . . . . . . . . .  C ADDR  156DH  
LNTAB. . . . . . . . . . . . . .  C ADDR  16A9H  
LN_D . . . . . . . . . . . . . .  C ADDR  131BH  
LOAD1. . . . . . . . . . . . . .  C ADDR  19ADH  
LOAD2. . . . . . . . . . . . . .  C ADDR  19BDH  
LOAD21 . . . . . . . . . . . . .  C ADDR  19C5H  
BASIC52E                                                                                                      PAGE 166

LOAD22 . . . . . . . . . . . . .  C ADDR  19CAH  
LOAD23 . . . . . . . . . . . . .  C ADDR  19CEH  
LOAD25 . . . . . . . . . . . . .  C ADDR  19E3H  
LOAD7. . . . . . . . . . . . . .  C ADDR  1B93H  NOT USED  
LOADR1 . . . . . . . . . . . . .  C ADDR  1C7FH  
LOADR1_MANTISSA. . . . . . . . .  C ADDR  1C7BH  
LOAD_POINTERS. . . . . . . . . .  C ADDR  1C5EH  
LP . . . . . . . . . . . . . . .  B ADDR  0097H  
LPB. . . . . . . . . . . . . . .  B ADDR  0019H  
LTOUT1 . . . . . . . . . . . . .  C ADDR  074AH  
LTX. . . . . . . . . . . . . . .  C ADDR  1528H  
LTX1 . . . . . . . . . . . . . .  C ADDR  152FH  
LTX2 . . . . . . . . . . . . . .  C ADDR  1543H  
L_RET. . . . . . . . . . . . . .  C ADDR  0EEBH  
MDES1. . . . . . . . . . . . . .  C ADDR  1C6AH  
MEMTOP . . . . . . . . . . . . .  X ADDR  010AH  
MILLIV . . . . . . . . . . . . .    NUMB  0047H  
MNL0 . . . . . . . . . . . . . .  C ADDR  1C3EH  
MNL1 . . . . . . . . . . . . . .  C ADDR  1C50H  
MNLOOP . . . . . . . . . . . . .  C ADDR  1C35H  
MOUT . . . . . . . . . . . . . .  C ADDR  1E8EH  
MSIGN. . . . . . . . . . . . . .  B ADDR  0078H  
MT1. . . . . . . . . . . . . . .    NUMB  0045H  
MT2. . . . . . . . . . . . . . .    NUMB  0046H  
MT_ALL . . . . . . . . . . . . .  X ADDR  0108H  
MU1. . . . . . . . . . . . . . .  C ADDR  136BH  NOT USED  
MUL11. . . . . . . . . . . . . .  C ADDR  1EEFH  NOT USED  
MULNUM . . . . . . . . . . . . .  C ADDR  1ED6H  
MULNUM10 . . . . . . . . . . . .  C ADDR  1ED3H  
MULX . . . . . . . . . . . . . .  C ADDR  1EF6H  
MUL_DIV_EXP_AND_SIGN . . . . . .  C ADDR  1C68H  
MUL_NIBBLE . . . . . . . . . . .  C ADDR  1C2BH  
MUL_UNDERFLOW. . . . . . . . . .  B ADDR  0028H  
N4 . . . . . . . . . . . . . . .  C ADDR  0BC6H  
NACK . . . . . . . . . . . . . .    NUMB  0008H  
NL1. . . . . . . . . . . . . . .  C ADDR  1E6EH  
NLC. . . . . . . . . . . . . . .  C ADDR  077AH  
NLC1 . . . . . . . . . . . . . .  C ADDR  077FH  
NLC2 . . . . . . . . . . . . . .  C ADDR  0782H  
NLC3 . . . . . . . . . . . . . .  C ADDR  0786H  
NMARK_L. . . . . . . . . . . . .  C ADDR  1A96H  
NMOV . . . . . . . . . . . . . .  C ADDR  159DH  
NMOV1. . . . . . . . . . . . . .  C ADDR  15A7H  
NOGO . . . . . . . . . . . . . .  C ADDR  056EH  
NOPASS . . . . . . . . . . . . .  C ADDR  0F21H  
NOROM. . . . . . . . . . . . . .  C ADDR  1FC9H  
NO_C . . . . . . . . . . . . . .  B ADDR  0030H  
NR1. . . . . . . . . . . . . . .  C ADDR  1E77H  
NTWO . . . . . . . . . . . . . .  C ADDR  1161H  
NULL . . . . . . . . . . . . . .    NUMB  0000H  
NULLCT . . . . . . . . . . . . .    NUMB  0015H  
NUMC . . . . . . . . . . . . . .  C ADDR  0C19H  
NUMC1. . . . . . . . . . . . . .  C ADDR  0C22H  
NUM_LT . . . . . . . . . . . . .  C ADDR  1E67H  
NUM_RT . . . . . . . . . . . . .  C ADDR  1E70H  
ONE. . . . . . . . . . . . . . .  C ADDR  0E8EH  
ON_ERR . . . . . . . . . . . . .  B ADDR  0013H  
OOPS . . . . . . . . . . . . . .  C ADDR  0D3AH  
BASIC52E                                                                                                      PAGE 167

OPBOL. . . . . . . . . . . . . .  C ADDR  00CFH  
OPTAB. . . . . . . . . . . . . .  C ADDR  0057H  
OTI. . . . . . . . . . . . . . .  B ADDR  0014H  
OTS. . . . . . . . . . . . . . .  B ADDR  0010H  
OTST . . . . . . . . . . . . . .  C ADDR  1938H  
OTST1. . . . . . . . . . . . . .  C ADDR  193EH  
OUTPUT . . . . . . . . . . . . .  C ADDR  196CH  
OUTR . . . . . . . . . . . . . .  C ADDR  1E5CH  
OUTR0. . . . . . . . . . . . . .  C ADDR  1E4BH  
OV . . . . . . . . . . . . . . .  B ADDR  00D2H  PREDEFINED  
OVE1 . . . . . . . . . . . . . .  C ADDR  1B98H  
OVERFLOW . . . . . . . . . . . .    NUMB  0001H  
OVERFLOW_AND_EXIT. . . . . . . .  C ADDR  1B94H  
P1 . . . . . . . . . . . . . . .  D ADDR  0090H  PREDEFINED  
P2 . . . . . . . . . . . . . . .  D ADDR  00A0H  PREDEFINED  
P3 . . . . . . . . . . . . . . .  D ADDR  00B0H  PREDEFINED  
PACK . . . . . . . . . . . . . .  C ADDR  1B11H  
PACK0. . . . . . . . . . . . . .  C ADDR  1B1AH  
PACK1. . . . . . . . . . . . . .  C ADDR  1B1BH  NOT USED  
PACK11 . . . . . . . . . . . . .  C ADDR  1B23H  
PACK2. . . . . . . . . . . . . .  C ADDR  1B25H  
PACK3. . . . . . . . . . . . . .  C ADDR  1B37H  
PACK31 . . . . . . . . . . . . .  C ADDR  1B38H  
PACK4. . . . . . . . . . . . . .  C ADDR  1B4FH  
PAREN_INT. . . . . . . . . . . .  C ADDR  0E97H  
PCL. . . . . . . . . . . . . . .  C ADDR  1439H  
PCON . . . . . . . . . . . . . .  D ADDR  0087H  PREDEFINED  
PCON0. . . . . . . . . . . . . .    NUMB  0087H  NOT USED  
PG1. . . . . . . . . . . . . . .  C ADDR  04BDH  
PG10 . . . . . . . . . . . . . .  C ADDR  04BCH  
PG101. . . . . . . . . . . . . .  C ADDR  04B5H  
PG2. . . . . . . . . . . . . . .  C ADDR  04C3H  
PG31 . . . . . . . . . . . . . .  C ADDR  04F7H  
PG4. . . . . . . . . . . . . . .  C ADDR  04C0H  
PG5. . . . . . . . . . . . . . .  C ADDR  04CBH  
PG6. . . . . . . . . . . . . . .  C ADDR  04D0H  
PG7. . . . . . . . . . . . . . .  C ADDR  04D9H  
PG8. . . . . . . . . . . . . . .  C ADDR  046FH  
PGR. . . . . . . . . . . . . . .  C ADDR  04B3H  
PGU. . . . . . . . . . . . . . .  C ADDR  04F8H  
PHEAD. . . . . . . . . . . . . .    NUMB  0016H  
PIE. . . . . . . . . . . . . . .  C ADDR  17FEH  
PIPI . . . . . . . . . . . . . .  C ADDR  147FH  
PLNEXP . . . . . . . . . . . . .  C ADDR  1430H  
PLOOP. . . . . . . . . . . . . .  C ADDR  1B51H  
PLUS_MINUS_TEST. . . . . . . . .  C ADDR  1D65H  
PMT1 . . . . . . . . . . . . . .  C ADDR  1D79H  
PMT11. . . . . . . . . . . . . .  C ADDR  1D6AH  
PMT12. . . . . . . . . . . . . .  C ADDR  1D6FH  
PMT13. . . . . . . . . . . . . .  C ADDR  1D74H  
PMT2 . . . . . . . . . . . . . .  C ADDR  1D77H  
PMT3 . . . . . . . . . . . . . .  C ADDR  1D78H  
PMTOP. . . . . . . . . . . . . .  C ADDR  164FH  
PMTOP1 . . . . . . . . . . . . .  C ADDR  1652H  
PN0. . . . . . . . . . . . . . .  C ADDR  06C3H  
PN01 . . . . . . . . . . . . . .  C ADDR  06CCH  
PN02 . . . . . . . . . . . . . .  C ADDR  06CDH  
PN1. . . . . . . . . . . . . . .  C ADDR  06B9H  
BASIC52E                                                                                                      PAGE 168

POLY1. . . . . . . . . . . . . .  C ADDR  11A3H  
POLYC. . . . . . . . . . . . . .  C ADDR  119BH  
POPAS. . . . . . . . . . . . . .  C ADDR  0FD3H  
POP_AND_EXIT . . . . . . . . . .  C ADDR  19A5H  
POP_T1 . . . . . . . . . . . . .  C ADDR  1448H  
POSNM1 . . . . . . . . . . . . .  C ADDR  1D24H  NOT USED  
POSNUM . . . . . . . . . . . . .  C ADDR  1D21H  
POTWO. . . . . . . . . . . . . .  C ADDR  1192H  
PP . . . . . . . . . . . . . . .  C ADDR  15BAH  
PPL. . . . . . . . . . . . . . .  C ADDR  15CDH  
PPL1 . . . . . . . . . . . . . .  C ADDR  15D2H  
PPL2 . . . . . . . . . . . . . .  C ADDR  15D7H  
PPL21. . . . . . . . . . . . . .  C ADDR  15DCH  
PPL22. . . . . . . . . . . . . .  C ADDR  15E1H  
PPL3 . . . . . . . . . . . . . .  C ADDR  15F0H  
PPL4 . . . . . . . . . . . . . .  C ADDR  15F5H  
PPL41. . . . . . . . . . . . . .  C ADDR  15FEH  
PPL6 . . . . . . . . . . . . . .  C ADDR  1622H  
PPL61. . . . . . . . . . . . . .  C ADDR  162BH  
PPL7 . . . . . . . . . . . . . .  C ADDR  162FH  
PPL71. . . . . . . . . . . . . .  C ADDR  1630H  
PPL9 . . . . . . . . . . . . . .  C ADDR  1643H  
PPL91. . . . . . . . . . . . . .  C ADDR  1644H  
PPLX . . . . . . . . . . . . . .  C ADDR  1609H  
PPLY . . . . . . . . . . . . . .  C ADDR  1616H  
PPLY1. . . . . . . . . . . . . .  C ADDR  161BH  
PPX. . . . . . . . . . . . . . .  C ADDR  15E5H  
PRET . . . . . . . . . . . . . .  C ADDR  1B71H  
PRNTCR . . . . . . . . . . . . .  C ADDR  06C1H  
PROGS. . . . . . . . . . . . . .  X ADDR  0128H  
PSTART . . . . . . . . . . . . .    NUMB  0200H  
PSW. . . . . . . . . . . . . . .  D ADDR  00D0H  PREDEFINED  
PTIME. . . . . . . . . . . . . .  C ADDR  0709H  
PUSHAS . . . . . . . . . . . . .  C ADDR  0FDDH  
PUSHC. . . . . . . . . . . . . .  C ADDR  1433H  
PUSHCS . . . . . . . . . . . . .  C ADDR  0BB1H  
PUSHCS1. . . . . . . . . . . . .  C ADDR  0BB6H  
PUSHCS2. . . . . . . . . . . . .  C ADDR  0BBCH  
PUSHR2R0 . . . . . . . . . . . .  C ADDR  1CB6H  
PUSH_ONE . . . . . . . . . . . .  C ADDR  1443H  
PUSH_T1. . . . . . . . . . . . .  C ADDR  144FH  
PUSH_T11 . . . . . . . . . . . .  C ADDR  1451H  
PUSH_T12 . . . . . . . . . . . .  C ADDR  1453H  
P_E. . . . . . . . . . . . . . .  C ADDR  0CDFH  
P_T2 . . . . . . . . . . . . . .  C ADDR  1456H  
P_Z. . . . . . . . . . . . . . .  C ADDR  1375H  
QUIT . . . . . . . . . . . . . .  C ADDR  24C6H  
R0B0 . . . . . . . . . . . . . .    NUMB  0000H  
R1B0 . . . . . . . . . . . . . .    NUMB  0001H  
R2B0 . . . . . . . . . . . . . .    NUMB  0002H  
R3B0 . . . . . . . . . . . . . .    NUMB  0003H  
R3CK . . . . . . . . . . . . . .  C ADDR  09D5H  
R4B0 . . . . . . . . . . . . . .    NUMB  0004H  
R5B0 . . . . . . . . . . . . . .    NUMB  0005H  
R6B0 . . . . . . . . . . . . . .    NUMB  0006H  
R76S . . . . . . . . . . . . . .  C ADDR  0DEFH  
R7B0 . . . . . . . . . . . . . .    NUMB  0007H  
RC1. . . . . . . . . . . . . . .  C ADDR  066FH  
BASIC52E                                                                                                      PAGE 169

RC2. . . . . . . . . . . . . . .  C ADDR  0673H  
RCAPH2 . . . . . . . . . . . . .    NUMB  00CBH  
RCAPL2 . . . . . . . . . . . . .    NUMB  00CAH  
RCASB. . . . . . . . . . . . . .  C ADDR  1ECFH  
RCELL. . . . . . . . . . . . . .  X ADDR  010CH  
RCL. . . . . . . . . . . . . . .  C ADDR  0885H  
RCL1 . . . . . . . . . . . . . .  C ADDR  088AH  
RCL2 . . . . . . . . . . . . . .  C ADDR  0892H  
RCL3 . . . . . . . . . . . . . .  C ADDR  0898H  
RCL4 . . . . . . . . . . . . . .  C ADDR  089EH  
RCL5 . . . . . . . . . . . . . .  C ADDR  08A4H  
RCL6 . . . . . . . . . . . . . .  C ADDR  08AAH  
RCLEAR . . . . . . . . . . . . .  C ADDR  0664H  
RDSFR. . . . . . . . . . . . . .  C ADDR  2519H  
RDYS . . . . . . . . . . . . . .  C ADDR  00FDH  
READ . . . . . . . . . . . . . .  C ADDR  2494H  
RECIP. . . . . . . . . . . . . .  C ADDR  127CH  
RETBIT . . . . . . . . . . . . .  B ADDR  0025H  
RET_X. . . . . . . . . . . . . .  C ADDR  1D46H  
RF1. . . . . . . . . . . . . . .  C ADDR  055EH  
RF2. . . . . . . . . . . . . . .  C ADDR  0565H  
RF3. . . . . . . . . . . . . . .  C ADDR  056BH  
RFX. . . . . . . . . . . . . . .  C ADDR  0564H  
RIGHT. . . . . . . . . . . . . .  C ADDR  1BBBH  
RIGHT1 . . . . . . . . . . . . .  C ADDR  1BBDH  NOT USED  
RIGHT2 . . . . . . . . . . . . .  C ADDR  1BBEH  
RIGHT3 . . . . . . . . . . . . .  C ADDR  1BC5H  NOT USED  
RIGHT5 . . . . . . . . . . . . .  C ADDR  1BE4H  
RIGHTL . . . . . . . . . . . . .  C ADDR  1BD1H  
RIGHTL1. . . . . . . . . . . . .  C ADDR  1BE3H  
RL1. . . . . . . . . . . . . . .  C ADDR  0AF4H  
RLINE. . . . . . . . . . . . . .  C ADDR  0AF2H  
RMOV . . . . . . . . . . . . . .  C ADDR  1581H  
RO1. . . . . . . . . . . . . . .  C ADDR  0543H  
RO11 . . . . . . . . . . . . . .  C ADDR  054EH  
ROMADR . . . . . . . . . . . . .    NUMB  8000H  
ROMFD. . . . . . . . . . . . . .  C ADDR  055BH  
ROM_P. . . . . . . . . . . . . .  C ADDR  06AFH  
ROM_P1 . . . . . . . . . . . . .  C ADDR  06B7H  
ROUT . . . . . . . . . . . . . .  C ADDR  1E92H  
RROM . . . . . . . . . . . . . .  C ADDR  07C0H  
RS0. . . . . . . . . . . . . . .  B ADDR  00D3H  PREDEFINED  
RSUB1. . . . . . . . . . . . . .  C ADDR  1EF9H  
RSUB2. . . . . . . . . . . . . .  C ADDR  1F23H  
RSUB3. . . . . . . . . . . . . .  C ADDR  1F2DH  
RTST . . . . . . . . . . . . . .  C ADDR  0AC7H  
RTST1. . . . . . . . . . . . . .  C ADDR  0AD0H  
RTXAH. . . . . . . . . . . . . .    NUMB  0012H  
RTXAL. . . . . . . . . . . . . .    NUMB  0010H  
RV . . . . . . . . . . . . . . .  C ADDR  11B5H  
S0RELH . . . . . . . . . . . . .    NUMB  00BAH  NOT USED  
S0RELL . . . . . . . . . . . . .    NUMB  00AAH  NOT USED  
S13. . . . . . . . . . . . . . .  C ADDR  0D3DH  
S20DP. . . . . . . . . . . . . .  C ADDR  1424H  
S31DP. . . . . . . . . . . . . .  C ADDR  0605H  
S31DP2 . . . . . . . . . . . . .  C ADDR  0603H  
S31L . . . . . . . . . . . . . .  C ADDR  170EH  
SA . . . . . . . . . . . . . . .  C ADDR  0D1BH  
BASIC52E                                                                                                      PAGE 170

SA1. . . . . . . . . . . . . . .  C ADDR  0D22H  
SA2. . . . . . . . . . . . . . .  C ADDR  0D26H  
SAFE_MOD . . . . . . . . . . . .    NUMB  00A1H  
SAVE_T . . . . . . . . . . . . .    NUMB  004AH  
SBAUD. . . . . . . . . . . . . .  C ADDR  16F9H  
SBAUD1 . . . . . . . . . . . . .    NUMB  00C2H  
SBUF1. . . . . . . . . . . . . .    NUMB  00C1H  
SCALL. . . . . . . . . . . . . .  C ADDR  0E63H  
SCL. . . . . . . . . . . . . . .  B ADDR  0095H  
SCLHIGH. . . . . . . . . . . . .  C ADDR  24BAH  
SCLOCK . . . . . . . . . . . . .  C ADDR  1918H  
SCLR . . . . . . . . . . . . . .  C ADDR  068FH  
SCON . . . . . . . . . . . . . .  D ADDR  0098H  PREDEFINED  
SCON1. . . . . . . . . . . . . .    NUMB  00C0H  
SC_R . . . . . . . . . . . . . .  C ADDR  192DH  
SD0. . . . . . . . . . . . . . .  C ADDR  0D5CH  
SD01 . . . . . . . . . . . . . .  C ADDR  0D59H  
SDA. . . . . . . . . . . . . . .  B ADDR  0096H  
SDI. . . . . . . . . . . . . . .  C ADDR  0DBCH  
SDIMX. . . . . . . . . . . . . .  C ADDR  0D61H  
SE0. . . . . . . . . . . . . . .  C ADDR  0CBEH  
SE1. . . . . . . . . . . . . . .  C ADDR  199FH  
SEND . . . . . . . . . . . . . .  C ADDR  2472H  
SERR1. . . . . . . . . . . . . .  C ADDR  18B3H  
SETFSYS. . . . . . . . . . . . .  C ADDR  0436H  
SETREG . . . . . . . . . . . . .  C ADDR  1253H  
SETREG1. . . . . . . . . . . . .  C ADDR  1254H  
SETSCL . . . . . . . . . . . . .  C ADDR  24BCH  
SETSDA . . . . . . . . . . . . .  C ADDR  2445H  
SF2. . . . . . . . . . . . . . .  C ADDR  0A53H  
SF21 . . . . . . . . . . . . . .  C ADDR  0A56H  
SF3. . . . . . . . . . . . . . .  C ADDR  0A72H  
SFOR . . . . . . . . . . . . . .  C ADDR  0A3CH  
SFRERRMSG. . . . . . . . . . . .  C ADDR  24F6H  
SFRERROR . . . . . . . . . . . .  C ADDR  250EH  
SFRGETTAB. . . . . . . . . . . .  C ADDR  2588H  
SFRPUTTAB. . . . . . . . . . . .  C ADDR  2586H  
SGOSUB . . . . . . . . . . . . .  C ADDR  0B2DH  
SGOTO. . . . . . . . . . . . . .  C ADDR  0AAAH  
SGS0 . . . . . . . . . . . . . .  C ADDR  0B2FH  
SGS1 . . . . . . . . . . . . . .  C ADDR  0B35H  
SGT1 . . . . . . . . . . . . . .  C ADDR  0AACH  
SGT11. . . . . . . . . . . . . .  C ADDR  0AB7H  
SGT2 . . . . . . . . . . . . . .  C ADDR  0AB9H  
SGT21. . . . . . . . . . . . . .  C ADDR  0AC1H  
SIF. . . . . . . . . . . . . . .  C ADDR  0A86H  
SIF1 . . . . . . . . . . . . . .  C ADDR  0A90H  
SIGNS_DIFFERENT. . . . . . . . .  C ADDR  1A53H  
SIN0 . . . . . . . . . . . . . .  C ADDR  11FCH  
SINOUT . . . . . . . . . . . . .  C ADDR  1E8BH  
SINPUT . . . . . . . . . . . . .  C ADDR  0DF5H  
SINTAB . . . . . . . . . . . . .  C ADDR  16CEH  
SLET . . . . . . . . . . . . . .  C ADDR  096EH  
SLET0. . . . . . . . . . . . . .  C ADDR  09C2H  
SLET1. . . . . . . . . . . . . .  C ADDR  09C6H  
SLET2. . . . . . . . . . . . . .  C ADDR  09C8H  
SM . . . . . . . . . . . . . . .  C ADDR  0C5FH  
SM01 . . . . . . . . . . . . . .  C ADDR  0C6DH  
BASIC52E                                                                                                      PAGE 171

SM02 . . . . . . . . . . . . . .  C ADDR  0C71H  
SNEXT. . . . . . . . . . . . . .  C ADDR  0B5FH  
SONERR . . . . . . . . . . . . .  C ADDR  140FH  
SONEXT . . . . . . . . . . . . .  C ADDR  1419H  
SOT. . . . . . . . . . . . . . .  C ADDR  0E56H  
SOUT . . . . . . . . . . . . . .  C ADDR  1E9AH  
SOUT1. . . . . . . . . . . . . .  C ADDR  1E9CH  
SOUT_1 . . . . . . . . . . . . .  C ADDR  1F46H  
SP . . . . . . . . . . . . . . .  D ADDR  0081H  PREDEFINED  
SP0. . . . . . . . . . . . . . .  C ADDR  0C3CH  
SP1. . . . . . . . . . . . . . .  C ADDR  0C43H  
SP2. . . . . . . . . . . . . . .  C ADDR  0C3FH  
SP4. . . . . . . . . . . . . . .  C ADDR  0C47H  NOT USED  
SP6. . . . . . . . . . . . . . .  C ADDR  0C52H  
SP7. . . . . . . . . . . . . . .  C ADDR  0C57H  
SP8. . . . . . . . . . . . . . .  C ADDR  0C75H  
SP9. . . . . . . . . . . . . . .  C ADDR  0CD7H  
SP9A . . . . . . . . . . . . . .  C ADDR  0CDEH  
SPACE7 . . . . . . . . . . . . .  C ADDR  1E78H  
SPEOP. . . . . . . . . . . . . .  C ADDR  09D9H  
SPEOP1 . . . . . . . . . . . . .  C ADDR  09DDH  
SPH0 . . . . . . . . . . . . . .  C ADDR  0C29H  
SPH1 . . . . . . . . . . . . . .  C ADDR  0C2BH  
SPINT. . . . . . . . . . . . . .  B ADDR  001FH  
SPOP . . . . . . . . . . . . . .  C ADDR  0A7DH  
SPOP1. . . . . . . . . . . . . .  C ADDR  0A85H  
SPRINT . . . . . . . . . . . . .  C ADDR  0C2DH  
SPRINT1. . . . . . . . . . . . .  C ADDR  0C31H  
SPRINT2. . . . . . . . . . . . .  C ADDR  0C38H  
SPSAV. . . . . . . . . . . . . .    NUMB  003EH  
SPUSH. . . . . . . . . . . . . .  C ADDR  0A76H  
SPV. . . . . . . . . . . . . . .  X ADDR  0124H  
SP_H . . . . . . . . . . . . . .    NUMB  004BH  
SP_L . . . . . . . . . . . . . .    NUMB  004CH  
SQ . . . . . . . . . . . . . . .  C ADDR  0C7CH  
SQR1 . . . . . . . . . . . . . .  C ADDR  12A3H  
SQR2 . . . . . . . . . . . . . .  C ADDR  12AAH  
SQR4 . . . . . . . . . . . . . .  C ADDR  12ADH  
SQR41. . . . . . . . . . . . . .  C ADDR  12BEH  
SQ_ERR . . . . . . . . . . . . .  C ADDR  128AH  
SR0. . . . . . . . . . . . . . .  C ADDR  0B14H  
SR01 . . . . . . . . . . . . . .  C ADDR  0B24H  
SRD. . . . . . . . . . . . . . .  C ADDR  0BE9H  
SRD0 . . . . . . . . . . . . . .  C ADDR  0BE5H  
SRD1 . . . . . . . . . . . . . .  C ADDR  0BF2H  
SRD2 . . . . . . . . . . . . . .  C ADDR  0BF4H  
SRD21. . . . . . . . . . . . . .  C ADDR  0BFEH  
SRD4 . . . . . . . . . . . . . .  C ADDR  0BFFH  
SRD5 . . . . . . . . . . . . . .  C ADDR  0C06H  
SRD51. . . . . . . . . . . . . .  C ADDR  0C09H  
SRD6 . . . . . . . . . . . . . .  C ADDR  0C11H  
SREAD. . . . . . . . . . . . . .  C ADDR  0BE3H  
SRESTR . . . . . . . . . . . . .  C ADDR  0BCEH  
SRESTR1. . . . . . . . . . . . .  C ADDR  0BD0H  
SRETI. . . . . . . . . . . . . .  C ADDR  0B0EH  
SRETRN . . . . . . . . . . . . .  C ADDR  0B10H  
SRT. . . . . . . . . . . . . . .  C ADDR  1219H  
SS . . . . . . . . . . . . . . .  C ADDR  0D12H  
BASIC52E                                                                                                      PAGE 172

SS7. . . . . . . . . . . . . . .  C ADDR  1E89H  
SSOOP. . . . . . . . . . . . . .  C ADDR  099DH  
SSTOP. . . . . . . . . . . . . .  C ADDR  0858H  
SSTOP0 . . . . . . . . . . . . .  C ADDR  0860H  
STACKTP. . . . . . . . . . . . .    NUMB  00FEH  
STATD. . . . . . . . . . . . . .  C ADDR  0123H  
STATUS . . . . . . . . . . . . .    NUMB  0018H  
STDIG. . . . . . . . . . . . . .  C ADDR  1D38H  
STDIG1 . . . . . . . . . . . . .  C ADDR  1D47H  
STEROT . . . . . . . . . . . . .  C ADDR  070FH  
STESIZ . . . . . . . . . . . . .    NUMB  0009H  
STJ. . . . . . . . . . . . . . .  C ADDR  0020H  
STK. . . . . . . . . . . . . . .  C ADDR  0041H  
STONE. . . . . . . . . . . . . .  C ADDR  1686H  
STONE1 . . . . . . . . . . . . .  C ADDR  168BH  
STOPBIT. . . . . . . . . . . . .  B ADDR  0020H  
STORE2 . . . . . . . . . . . . .  C ADDR  1B69H  
STORE_ALIGN_TEST_AND_EXIT. . . .  C ADDR  1B63H  
STP. . . . . . . . . . . . . . .  C ADDR  00EEH  
STQ. . . . . . . . . . . . . . .  C ADDR  0033H  
STRING . . . . . . . . . . . . .  C ADDR  060CH  
STRIP. . . . . . . . . . . . . .  C ADDR  11DAH  
STR_AL . . . . . . . . . . . . .  X ADDR  0122H  
STS. . . . . . . . . . . . . . .  C ADDR  003EH  
STU. . . . . . . . . . . . . . .  C ADDR  0044H  
ST_A . . . . . . . . . . . . . .  C ADDR  0FE5H  
ST_ALL . . . . . . . . . . . . .  X ADDR  0106H  
SUBLP. . . . . . . . . . . . . .  C ADDR  19FBH  
SUI. . . . . . . . . . . . . . .  C ADDR  192EH  
SUNTIL . . . . . . . . . . . . .  C ADDR  0B01H  
SUO. . . . . . . . . . . . . . .  C ADDR  1933H  
SWAP_AND_EXIT. . . . . . . . . .  C ADDR  199BH  NOT USED  
SWAP_ASTKA . . . . . . . . . . .  C ADDR  145AH  
SWHILE . . . . . . . . . . . . .  C ADDR  0AFCH  
SX . . . . . . . . . . . . . . .  C ADDR  0C81H  
SX1. . . . . . . . . . . . . . .  C ADDR  0C97H  
S_0. . . . . . . . . . . . . . .  C ADDR  0982H  
S_1. . . . . . . . . . . . . . .  C ADDR  09B2H  
S_11 . . . . . . . . . . . . . .  C ADDR  09BAH  
S_3. . . . . . . . . . . . . . .  C ADDR  0991H  
S_4. . . . . . . . . . . . . . .  C ADDR  099FH  
S_41 . . . . . . . . . . . . . .  C ADDR  09A6H  
S_5. . . . . . . . . . . . . . .  C ADDR  09ADH  
S_C. . . . . . . . . . . . . . .  C ADDR  0EBFH  
S_C_1. . . . . . . . . . . . . .  C ADDR  0E72H  
S_DO . . . . . . . . . . . . . .  C ADDR  0F05H  
S_E. . . . . . . . . . . . . . .  C ADDR  098CH  
S_L. . . . . . . . . . . . . . .  C ADDR  1461H  
S_LEN. . . . . . . . . . . . . .    NUMB  003FH  
S_N. . . . . . . . . . . . . . .  C ADDR  1FD3H  
S_ON . . . . . . . . . . . . . .  C ADDR  0CEBH  
S_WU . . . . . . . . . . . . . .  C ADDR  0B03H  
T2CON. . . . . . . . . . . . . .    NUMB  00C8H  
T2MOD. . . . . . . . . . . . . .    NUMB  00C9H  NOT USED  
TB . . . . . . . . . . . . . . .  C ADDR  15B5H  
TBR. . . . . . . . . . . . . . .  C ADDR  1599H  
TBYTE. . . . . . . . . . . . . .  C ADDR  1596H  
TCON . . . . . . . . . . . . . .  D ADDR  0088H  PREDEFINED  
BASIC52E                                                                                                      PAGE 173

TEMP1. . . . . . . . . . . . . .    NUMB  000BH  
TEMP2. . . . . . . . . . . . . .    NUMB  000CH  
TEMP3. . . . . . . . . . . . . .    NUMB  000DH  
TEMP4. . . . . . . . . . . . . .    NUMB  000EH  
TEMP5. . . . . . . . . . . . . .    NUMB  000FH  
TEMPD. . . . . . . . . . . . . .  C ADDR  1854H  
TEMP_COMP. . . . . . . . . . . .  C ADDR  131CH  
TEROT. . . . . . . . . . . . . .  C ADDR  0711H  
TEROT01. . . . . . . . . . . . .  C ADDR  0717H  
TEROT02. . . . . . . . . . . . .  C ADDR  071EH  
TEROT03. . . . . . . . . . . . .  C ADDR  0727H  
TEROT04. . . . . . . . . . . . .  C ADDR  072FH  
TEROT1 . . . . . . . . . . . . .  C ADDR  0766H  
TEROT11. . . . . . . . . . . . .  C ADDR  076CH  
TEROT2 . . . . . . . . . . . . .  C ADDR  0773H  
TEST_USER. . . . . . . . . . . .  C ADDR  17E0H  
TF1. . . . . . . . . . . . . . .  B ADDR  008FH  PREDEFINED  
TH0. . . . . . . . . . . . . . .  D ADDR  008CH  PREDEFINED  
TH1. . . . . . . . . . . . . . .  D ADDR  008DH  PREDEFINED  
TH2. . . . . . . . . . . . . . .    NUMB  00CDH  
THREE. . . . . . . . . . . . . .  C ADDR  0E78H  
TIMER_LOAD . . . . . . . . . . .  C ADDR  052DH  
TIMER_LOAD1. . . . . . . . . . .  C ADDR  052FH  
TIV. . . . . . . . . . . . . . .  X ADDR  0126H  
TL0. . . . . . . . . . . . . . .  D ADDR  008AH  PREDEFINED  
TL1. . . . . . . . . . . . . . .  D ADDR  008BH  PREDEFINED  
TL2. . . . . . . . . . . . . . .    NUMB  00CCH  
TMOD . . . . . . . . . . . . . .  D ADDR  0089H  PREDEFINED  
TMR0 . . . . . . . . . . . . . .    NUMB  00C8H  
TMR1 . . . . . . . . . . . . . .    NUMB  00C9H  
TMR2 . . . . . . . . . . . . . .    NUMB  00CAH  
TM_TOP . . . . . . . . . . . . .  X ADDR  012CH  
TOKENTABLE . . . . . . . . . . .  C ADDR  240CH  
TOKTAB . . . . . . . . . . . . .  C ADDR  0175H  
TOUT . . . . . . . . . . . . . .    NUMB  0002H  
TR . . . . . . . . . . . . . . .  C ADDR  1913H  
TR0. . . . . . . . . . . . . . .  B ADDR  008CH  PREDEFINED  
TR1. . . . . . . . . . . . . . .  B ADDR  008EH  PREDEFINED  
TRC2 . . . . . . . . . . . . . .    NUMB  00CEH  
TT2C . . . . . . . . . . . . . .    NUMB  00CBH  
TTC. . . . . . . . . . . . . . .    NUMB  00CCH  
TTIME. . . . . . . . . . . . . .  C ADDR  1167H  
TTM. . . . . . . . . . . . . . .    NUMB  00CDH  
TVH. . . . . . . . . . . . . . .    NUMB  0048H  
TVL. . . . . . . . . . . . . . .    NUMB  0049H  
TWO. . . . . . . . . . . . . . .  C ADDR  0E85H  
TWOL . . . . . . . . . . . . . .  C ADDR  14A1H  
TWO_EX . . . . . . . . . . . . .  C ADDR  14B3H  
TWO_EY . . . . . . . . . . . . .  C ADDR  14B4H  
TWO_R2 . . . . . . . . . . . . .  C ADDR  14B1H  
TXAH . . . . . . . . . . . . . .    NUMB  000AH  
TXAL . . . . . . . . . . . . . .    NUMB  0008H  
TXX. . . . . . . . . . . . . . .  C ADDR  075FH  
T_1. . . . . . . . . . . . . . .  C ADDR  073AH  
T_ADD. . . . . . . . . . . . . .    NUMB  00E3H  
T_ASC. . . . . . . . . . . . . .    NUMB  00D1H  
T_BIT. . . . . . . . . . . . . .  B ADDR  0092H  
T_BUF. . . . . . . . . . . . . .  C ADDR  176CH  
BASIC52E                                                                                                      PAGE 174

T_CHR. . . . . . . . . . . . . .    NUMB  00D3H  
T_CMND . . . . . . . . . . . . .    NUMB  00F0H  
T_CMP. . . . . . . . . . . . . .  C ADDR  07E3H  
T_CR . . . . . . . . . . . . . .    NUMB  00AAH  
T_DATA . . . . . . . . . . . . .    NUMB  009CH  
T_DIR. . . . . . . . . . . . . .    NUMB  0090H  
T_DP . . . . . . . . . . . . . .  C ADDR  0EB8H  
T_ELSE . . . . . . . . . . . . .    NUMB  00A8H  
T_EQU. . . . . . . . . . . . . .    NUMB  00EAH  
T_F1 . . . . . . . . . . . . . .  C ADDR  0A9EH  
T_GOSB . . . . . . . . . . . . .    NUMB  009FH  
T_GOTO . . . . . . . . . . . . .    NUMB  0083H  
T_HH . . . . . . . . . . . . . .    NUMB  0040H  
T_IE . . . . . . . . . . . . . .    NUMB  00C6H  
T_IP . . . . . . . . . . . . . .    NUMB  00C7H  
T_L. . . . . . . . . . . . . . .  C ADDR  196CH  
T_LAST . . . . . . . . . . . . .    NUMB  00A4H  
T_LL . . . . . . . . . . . . . .    NUMB  0041H  
T_LPAR . . . . . . . . . . . . .    NUMB  00E0H  
T_MTOP . . . . . . . . . . . . .    NUMB  00C4H  
T_NEG. . . . . . . . . . . . . .    NUMB  00E9H  
T_P1 . . . . . . . . . . . . . .    NUMB  00CFH  
T_PC . . . . . . . . . . . . . .    NUMB  00D0H  
T_REM. . . . . . . . . . . . . .    NUMB  0096H  
T_SPC. . . . . . . . . . . . . .    NUMB  00A9H  
T_STEP . . . . . . . . . . . . .    NUMB  00A7H  
T_STOP . . . . . . . . . . . . .    NUMB  0090H  
T_SUB. . . . . . . . . . . . . .    NUMB  00E5H  
T_T. . . . . . . . . . . . . . .  C ADDR  08B0H  
T_T01. . . . . . . . . . . . . .  C ADDR  08BEH  
T_T1 . . . . . . . . . . . . . .  C ADDR  08CEH  
T_T2 . . . . . . . . . . . . . .  C ADDR  08DFH  
T_TAB. . . . . . . . . . . . . .    NUMB  00A4H  
T_THEN . . . . . . . . . . . . .    NUMB  00A5H  
T_TIME . . . . . . . . . . . . .    NUMB  00C5H  
T_TO . . . . . . . . . . . . . .    NUMB  00A6H  
T_TRAP . . . . . . . . . . . . .  C ADDR  08E5H  
T_ULAST. . . . . . . . . . . . .    NUMB  00BEH  
T_UOP. . . . . . . . . . . . . .    NUMB  00B0H  
T_USE. . . . . . . . . . . . . .    NUMB  00D2H  
T_XTAL . . . . . . . . . . . . .    NUMB  00C3H  
T_X_S. . . . . . . . . . . . . .  C ADDR  0B39H  
U1RI . . . . . . . . . . . . . .  B ADDR  00C0H  
U1TI . . . . . . . . . . . . . .  B ADDR  00C1H  
U3 . . . . . . . . . . . . . . .  C ADDR  0C9BH  
U4 . . . . . . . . . . . . . . .  C ADDR  0C9FH  
U5 . . . . . . . . . . . . . . .  C ADDR  0CA9H  
U5A. . . . . . . . . . . . . . .  C ADDR  0CC0H  
U6 . . . . . . . . . . . . . . .  C ADDR  0CCDH  
U7 . . . . . . . . . . . . . . .  C ADDR  0CCFH  
U8 . . . . . . . . . . . . . . .  C ADDR  0CC9H  
U8A. . . . . . . . . . . . . . .  C ADDR  0CC4H  
U8B. . . . . . . . . . . . . . .  C ADDR  0CC6H  NOT USED  
UBIT . . . . . . . . . . . . . .  B ADDR  002AH  
UE . . . . . . . . . . . . . . .  C ADDR  1513H  
ULOOP. . . . . . . . . . . . . .  C ADDR  1B82H  
UNDERFLOW. . . . . . . . . . . .    NUMB  0000H  
UNDERFLOW_AND_EXIT . . . . . . .  C ADDR  1BA5H  
BASIC52E                                                                                                      PAGE 175

UNDER_MD . . . . . . . . . . . .  C ADDR  1B4DH  
UNPACK_R0. . . . . . . . . . . .  C ADDR  1B7EH  
UOPBOL . . . . . . . . . . . . .  C ADDR  00E0H  
UPB. . . . . . . . . . . . . . .  B ADDR  0027H  
UPP0 . . . . . . . . . . . . . .  C ADDR  10AEH  
UPP01. . . . . . . . . . . . . .  C ADDR  10B1H  
UPP02. . . . . . . . . . . . . .  C ADDR  10BCH  
UPP03. . . . . . . . . . . . . .  C ADDR  10C1H  
UPP04. . . . . . . . . . . . . .  C ADDR  10C6H  
UPP1 . . . . . . . . . . . . . .  C ADDR  10DDH  
UPP11. . . . . . . . . . . . . .  C ADDR  10E3H  
UPP1A. . . . . . . . . . . . . .  C ADDR  10D9H  
UPP2 . . . . . . . . . . . . . .  C ADDR  10ECH  
UPP3 . . . . . . . . . . . . . .  C ADDR  1101H  
UPP4 . . . . . . . . . . . . . .  C ADDR  110DH  
UPP41. . . . . . . . . . . . . .  C ADDR  1115H  
UPP42. . . . . . . . . . . . . .  C ADDR  1119H  
UPP7 . . . . . . . . . . . . . .  C ADDR  1121H  
UPP7A. . . . . . . . . . . . . .  C ADDR  111FH  
UPP8 . . . . . . . . . . . . . .  C ADDR  1123H  
UPP81. . . . . . . . . . . . . .  C ADDR  1125H  
UPP9 . . . . . . . . . . . . . .  C ADDR  10CDH  
UPP91. . . . . . . . . . . . . .  C ADDR  10D5H  
UPPL . . . . . . . . . . . . . .  C ADDR  10A3H  
UPPL0. . . . . . . . . . . . . .  C ADDR  10A0H  
UPRNT. . . . . . . . . . . . . .  C ADDR  06BFH  
UP_2 . . . . . . . . . . . . . .  C ADDR  10F7H  
UP_3 . . . . . . . . . . . . . .  C ADDR  10FAH  NOT USED  
UP_4 . . . . . . . . . . . . . .  C ADDR  10FDH  
USENT. . . . . . . . . . . . . .  C ADDR  0047H  
USING0 . . . . . . . . . . . . .  C ADDR  1DB0H  
USING1 . . . . . . . . . . . . .  C ADDR  1DB6H  
USING2 . . . . . . . . . . . . .  C ADDR  1DC8H  NOT USED  
USINGX . . . . . . . . . . . . .  C ADDR  1DC6H  
USINGY . . . . . . . . . . . . .  C ADDR  1DC3H  
U_ID1. . . . . . . . . . . . . .  C ADDR  1860H  
U_IDL. . . . . . . . . . . . . .  B ADDR  0021H  
U_RET. . . . . . . . . . . . . .  C ADDR  1E4AH  
V4 . . . . . . . . . . . . . . .  C ADDR  0DB4H  
VAR. . . . . . . . . . . . . . .  C ADDR  0D65H  
VAR1 . . . . . . . . . . . . . .  C ADDR  0D67H  
VAR11. . . . . . . . . . . . . .  C ADDR  0D71H  
VAR2 . . . . . . . . . . . . . .  C ADDR  0D9AH  
VARB . . . . . . . . . . . . . .  C ADDR  0A0DH  
VARCOP . . . . . . . . . . . . .  C ADDR  1472H  
VARD . . . . . . . . . . . . . .  C ADDR  0A10H  
VARTOP . . . . . . . . . . . . .  X ADDR  0104H  
VAR_ER . . . . . . . . . . . . .  C ADDR  0F01H  
VECTORTABLE. . . . . . . . . . .  C ADDR  2400H  
VX . . . . . . . . . . . . . . .  C ADDR  0D80H  
VY . . . . . . . . . . . . . . .  C ADDR  0D74H  
V_C. . . . . . . . . . . . . . .  C ADDR  1474H  
WCR. . . . . . . . . . . . . . .  C ADDR  0EFCH  
WE . . . . . . . . . . . . . . .  C ADDR  0F41H  
WRSFR. . . . . . . . . . . . . .  C ADDR  2541H  
X3120. . . . . . . . . . . . . .  C ADDR  0DADH  
X31DP. . . . . . . . . . . . . .  C ADDR  0579H  
XBILT. . . . . . . . . . . . . .  C ADDR  0FB8H  
BASIC52E                                                                                                      PAGE 176

XBILT1 . . . . . . . . . . . . .  C ADDR  0FC2H  
XBIT . . . . . . . . . . . . . .  B ADDR  002DH  
XLPAR. . . . . . . . . . . . . .  C ADDR  0FC4H  
XOP. . . . . . . . . . . . . . .  C ADDR  0F86H  
XOP1 . . . . . . . . . . . . . .  C ADDR  0F90H  
XOP11. . . . . . . . . . . . . .  C ADDR  0FA3H  
XOP12. . . . . . . . . . . . . .  C ADDR  0FADH  
XOP2 . . . . . . . . . . . . . .  C ADDR  0FAFH  
XOP3 . . . . . . . . . . . . . .  C ADDR  0FCAH  
XOUT0. . . . . . . . . . . . . .  C ADDR  1E23H  
XOUT2. . . . . . . . . . . . . .  C ADDR  1E28H  
XOUT3. . . . . . . . . . . . . .  C ADDR  1E30H  
XOUT4. . . . . . . . . . . . . .  C ADDR  1E34H  
XPOP . . . . . . . . . . . . . .  C ADDR  0FD1H  
XSIGN. . . . . . . . . . . . . .  B ADDR  0050H  
XTALV. . . . . . . . . . . . . .  C ADDR  17ECH  
XXI. . . . . . . . . . . . . . .  C ADDR  0B67H  
XXI1 . . . . . . . . . . . . . .  C ADDR  0B76H  
XXI2 . . . . . . . . . . . . . .  C ADDR  0BABH  
XXI3 . . . . . . . . . . . . . .  C ADDR  0BAFH  
X_TR . . . . . . . . . . . . . .  C ADDR  0BD6H  
Z7R7 . . . . . . . . . . . . . .  C ADDR  1E80H  
ZERO . . . . . . . . . . . . . .    NUMB  0002H  
ZERO7. . . . . . . . . . . . . .  C ADDR  1E81H  
ZERO_AND_EXIT. . . . . . . . . .  C ADDR  1BABH  
ZERO_DIVIDE. . . . . . . . . . .    NUMB  0003H  
ZOUT . . . . . . . . . . . . . .  C ADDR  1E96H  
ZRO. . . . . . . . . . . . . . .  C ADDR  04E0H  
ZSURP. . . . . . . . . . . . . .  B ADDR  0036H  
ZT0. . . . . . . . . . . . . . .  C ADDR  1E5FH  
ZT1. . . . . . . . . . . . . . .  C ADDR  1E66H  
ZTEST. . . . . . . . . . . . . .  C ADDR  1E5DH  
