
C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 1





        8051 Macro Assembler   C 5 1 A S M   V 1.2
        ==========================================



        Source File:     BASIC552E_24MHz.asm
        Object File(s):  BASIC552E_24MHz.hex
        List File:       BASIC552E_24MHz.lst



 Line    I  Addr Code           Source

    1:                          $mod51
    2:                          ;                                       
    3:                          ; WCH CH552E ëŒâûÉoÅ[ÉWÉáÉì(SFRÉAÉNÉZÉXã
    4:                          ;   Internal Clock 24MHz, CPU Clock(Fsys
    5:                          ;   ÉVÉäÉAÉãÉ|Å[ÉgÇÃé©ìÆë¨ìxîFéØã@î\Ç™ê≥
    6:                          ;   CH552EÇÕUART0ÇégÇ¶Ç»Ç¢ÇÃÇ≈ÅAUART1Ç
    7:                          ;
    8:                          ;   SFRóÃàÊÇÃÉAÉNÉZÉXã@î\Çí«â¡
    9:                          ;   I2CSFR  (C) H.-J. Boehling & D. Wulf
   10:                          ;
   11:                          ;   2023.05.20 CH552T/Gî≈ÇCH552EópÇ…èëÇ
   12:                          ;
   13:                          ;***************************************
   14:                          ;*                                      
   15:                          ;*                    MCS-BASIC-52 V1.31
   16:                          ;*                           12/1986 til
   17:                          ;*       The original source code of V1.
   18:                          ;*            Intel Corporation, Embedde
   19:                          ;*                             is public
   20:                          ;*                                      
   21:                          ;***************************************
   22:                          ;
   23:                          ;***************************************
   24:                          ;* General alterations made by D. Wulf, 
   25:                          ;* e-mail: Detlef.Wulf@onlinehome.de    
   26:                          ;***************************************
   27:                          ;
   28:                          ;  The following general alterations are
   29:                          ;
   30:                          ;  - The original source code had 2 file
   31:                          ;    been incorporated into this file fo
   32:                          ;
   33:                          ;  - All absolute and relativ jumps and 
   34:                          ;    with labels.
   35:                          ;
   36:                          ;  - All machine code in the original so
   37:                          ;    by the menomics.
   38:                          ;
   39:                          ;  - One routine in the source was diffe
   40:                          ;    by the ROM code.
   41:                          ;
   42:                          ;  - Some "ORG" statements between BASIC
   43:                          ;    out.

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 2



 Line    I  Addr Code           Source

   44:                          ;
   45:                          ;  - To get room for new code the "ego m
   46:                          ;    (Remarked with "Sorry")
   47:                          ;
   48:                          ;  - To get more room for new code the "
   49:                          ;    (Remarked with "get room")
   50:                          ;
   51:                          ;***************************************
   52:                          ;* Bugfixes for MCS-52-BASIC from D. Kar
   53:                          ;* e-mail: dankarmann@lucent.com        
   54:                          ;***************************************
   55:                          ;
   56:                          ;  - Corrected Intel bug to allow BASIC 
   57:                          ;    command extensions to work.
   58:                          ;    (Remarked as Karmann 1)
   59:                          ;
   60:                          ;  - Corrected Intel bug to that discard
   61:                          ;    F, FP, FPR and FPRO and followed by
   62:                          ;    (Remarked as Karmann 2)
   63:                          ;
   64:                          ;***************************************
   65:                          ;* Bugfix and performance for MCS-52-BAS
   66:                          ;* D. Mudric and Z. Stojsavljevic descip
   67:                          ;* Elektor Electronics magazine german i
   68:                          ;***************************************
   69:                          ;
   70:                          ;  - Modifications to the unprocess a BA
   71:                          ;    (Remarked as Elektor 1)
   72:                          ;
   73:                          ;  - Modifications to the floating point
   74:                          ;    (Remarked as Elektor 2)
   75:                          ;
   76:                          ;  - HEX to BIN performance improvements
   77:                          ;    (Remarked as Elektor 3)
   78:                          ;
   79:                          ; The same article describes a fix for t
   80:                          ; the fixes did not work.
   81:                          ;
   82:                          ; The multiplicaton underflow bug is now
   83:                          ;    (Remarked as Wulf 1)
   84:                          ;
   85:                          ;***************************************
   86:                          ;* Change UV-EPROM to EEPROM programming
   87:                          ;* e-mail: r.skowronek@kfa-juelich.de   
   88:                          ;***************************************
   89:                          ;
   90:                          ; This altered section of code writes th
   91:                          ; EEPROM just like the ROM resident Basi
   92:                          ; The EEPROM is connected just like a RA
   93:                          ; and gets it's adresses from the real a
   94:                          ; difference from the normal setup is th
   95:                          ; P1.4, which supplies the program pulse
   96:                          ; can be located in externally ROM and i
   97:                          ; EEPROMs!
   98:                          ; (Remarked as Skowronek)
   99:                          ;

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 3



 Line    I  Addr Code           Source

  100:                          ; The original code from R. Skowronek di
  101:                          ; this feature is added by D. Wulf.
  102:                          ; Memory is now limited to 32K bytes RAM
  103:                          ; would change the EEPROM.
  104:                          ;
  105:                          ;***************************************
  106:                          ;* Change timer 0 from 13 bit to 16 bit 
  107:                          ;* from D. Wulf 1/2000                  
  108:                          ;***************************************
  109:                          ;
  110:                          ; The max. value for XTAL is now 7862747
  111:                          ; Dallas 80C320 high speed / low power m
  112:                          ; The defaut crystal value is still 1105
  113:                          ; XTAL or patch the souce code at
  114:                          ;
  115:                          ;	17F1H = 11
  116:                          ;	17F0H = 05
  117:                          ;	17EFH = 92
  118:                          ;	17EEH = 00
  119:                          ;
  120:                          ; with a new crystal value.
  121:                          ; (Remarket as Wulf 2)
  122:                          ;
  123:                          ;***************************************
  124:                          ;* New baudrate detection from D. Wulf 1
  125:                          ;***************************************
  126:                          ;
  127:                          ; The new baudrate detection uses timer 
  128:                          ; the code loop timing. So the Dallas 80
  129:                          ; used. Also at higher clock speeds the 
  130:                          ; (Remarked as Wulf 3)
  131:                          ;
  132:                          ;***************************************
  133:                          ;* New processor type detection from D. 
  134:                          ;***************************************
  135:                          ;
  136:                          ; A new reset routine detects the proces
  137:                          ; used with the following controllers:
  138:                          ;
  139:                          ; 8032, 87C52#, Dallas 80C320, 80515*#, 
  140:                          ; 80537*, 80575 or similars.
  141:                          ;
  142:                          ; - On processor types marked with the "
  143:                          ;   baudrates, depending on the crystal 
  144:                          ; - The processor types marked with the 
  145:                          ;   V1.3 can be located there, because i
  146:                          ;
  147:                          ; (Remarked as Wulf 4)
  148:                          ;
  149:                          ;***************************************
  150:                          ;* OPBYTE 43H for POP from H.-J. Boehlin
  151:                          ;* e-mail: H-Boehling@gmx.de            
  152:                          ;***************************************
  153:                          ;
  154:                          ; A feature of BASIC-52 is the ability t
  155:                          ; representing commands or instructions 

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 4



 Line    I  Addr Code           Source

  156:                          ; routines. For using system routines in
  157:                          ; operation bytes (for more information 
  158:                          ; In the original souce code is no OPCOD
  159:                          ; stack and store in a variable.
  160:                          ; With BASIC-52 V1.3 you can use OPBYTE 
  161:                          ; "POP" statement.
  162:                          ; (Remarked as Boehling 1)
  163:                          ;
  164:                          ;***************************************
  165:                          ;* Reset millisecond counter on "TIME=" 
  166:                          ;***************************************
  167:                          ;
  168:                          ; The command "TIME=0" now zeros the mil
  169:                          ; returns with zero.
  170:                          ; (Remarked as Boehling 2)
  171:                          ;
  172:                          ;***************************************
  173:                          ;* New command "ERASE" by H.-J. Boehling
  174:                          ;***************************************
  175:                          ;
  176:                          ; To erase an EEPROM (fill 16K byte up t
  177:                          ; "ERASE" is implemented. It takes 2 min
  178:                          ; (Remarked as Boehling 3)
  179:                          ;
  180:                          ;***************************************
  181:                          ;* Correct "ASC(x)" bug by D. Wulf 2/200
  182:                          ;***************************************
  183:                          ;
  184:                          ; BASIC-51 V1.1 gives erroneous results 
  185:                          ; one of the following signs : *, +, -, 
  186:                          ; BASIC-51 V1.3 returns the correct valu
  187:                          ; (Remarked as Wulf 5)
  188:                          ;
  189:                          ;***************************************
  190:                          ;***************************************
  191:                          ; To indicate the new version the start 
  192:                          ; *MCS-51(tm) BASIC V1.1* to
  193:                          ; *MCS-BASIC-52 V1.31*
  194:                          ;
  195:                          ; H.-J. Boehling, D. Wulf 11/26/2001
  196:                          ;***************************************
  197:                          ;
  198:           N      00C8    T2CON	EQU	0C8H ; This three lines are ne
  199:           N      00CC    TL2	EQU	0CCH ; MCS-51 Family Cross Assem
  200:           N      00CD    TH2	EQU	0CDH ; from W.W. Heinz (e-mail: 
  201:                          ;
  202:                          ;=== CH552E Added =====
  203:           N      00C9    T2MOD		EQU	0C9H	; T2MOD define
  204:           N      00B9    CLOCK_CFG	EQU	0B9H	; System clock config
  205:           N      00A1    SAFE_MOD	EQU	0A1H	; Safe mode control re
  206:           N      00C0    SCON1		EQU	0C0H	; UART1 control register
  207:           B        C1    U1TI		BIT	0C0H+1	; UART1 transmit interr
  208:           B        C0    U1RI		BIT	0C0H+0	; UART1 receive interru
  209:           N      00C1    SBUF1		EQU	0C1H	; UART1 data register
  210:           N      00C2    SBAUD1		EQU	0C2H	; UART1 baud rate setti
  211:                          ;=====================

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 5



 Line    I  Addr Code           Source

  212:                          ;
  213:                          	;**************************************
  214:                          	;
  215:                          	; TRAP VECTORS TO MONITOR
  216:                          	;
  217:                          	; RESET TAG (0AAH) ---------2001H
  218:                          	;
  219:                          	; TAG LOCATION (5AH) ------ 2002H
  220:                          	;
  221:                          	; EXTERNAL INTERRUPT 0 ---- 2040H
  222:                          	;
  223:                          	; COMMAND MODE ENTRY ------ 2048H
  224:                          	;
  225:                          	; SERIAL PORT ------------- 2050H
  226:                          	;
  227:                          	; MONITOR (BUBBLE) OUTPUT - 2058H
  228:                          	;
  229:                          	; MONITOR (BUBBLE) INPUT -- 2060H
  230:                          	;
  231:                          	; MONITOR (BUBBLE) CSTS --- 2068H
  232:                          	;
  233:                          	; GET USER JUMP VECTOR ---- 2070H
  234:                          	;
  235:                          	; GET USER LOOKUP VECTOR -- 2078H
  236:                          	;
  237:                          	; PRINT AT VECTOR --------- 2080H
  238:                          	;
  239:                          	; INTERRUPT PWM ----------- 2088H
  240:                          	;
  241:                          	; EXTERNAL RESET ---------- 2090H
  242:                          	;
  243:                          	; USER OUTPUT-------------- 4030H
  244:                          	;
  245:                          	; USER INPUT -------------- 4033H
  246:                          	;
  247:                          	; USER CSTS --------------- 4036H
  248:                          	;
  249:                          	; USER RESET -------------- 4039H
  250:                          	;
  251:                          	; USER DEFINED PRINT @ ---  403CH
  252:                          	;
  253:                          	;**************************************
  254:                          	;
  255:                          	;**************************************
  256:                          	;
  257:                          	; MCS - 52  -  8K BASIC VERSION 1.3
  258:                          	;
  259:                          	;**************************************
  260:                          	;
  261:      0000 61 8B          	AJMP	CRST		;START THE PROGRAM
  262:      0002 37             	ADDC	A,@R1
  263:                          	;
  264:           N      0003    	ORG	3H
  265:                          	;
  266:                          	;**************************************
  267:                          	;

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 6



 Line    I  Addr Code           Source

  268:                          	;EXTERNAL INTERRUPT 0
  269:                          	;
  270:                          	;**************************************
  271:                          	;
  272:      0003 20 31 2D       	JB	DRQ,STQ 	;SEE IF DMA IS SET
  273:      0006 C0 D0          	PUSH	PSW		;SAVE THE STATUS
  274:      0008 02 40 03       	LJMP	4003H		;JUMP TO USER IF NOT SET
  275:                          	;
  276:           N      000B    	ORG	0BH
  277:                          	;
  278:                          	;**************************************
  279:                          	;
  280:                          	;TIMER 0 OVERFLOW INTERRUPT
  281:                          	;
  282:                          	;**************************************
  283:                          	;
  284:      000B C0 D0          	PUSH	PSW		;SAVE THE STATUS
  285:      000D 20 2E 10       	JB	C_BIT,STJ	;SEE IF USER WANTS INTERRU
  286:      0010 02 40 0B       	LJMP	400BH		;EXIT IF USER WANTS INTERRU
  287:                          	;
  288:           N      0013    	ORG	13H
  289:                          	;
  290:                          	;**************************************
  291:                          	;
  292:                          	;EXTERNAL INTERRUPT 1
  293:                          	;
  294:                          	;**************************************
  295:                          	;
  296:      0013 20 12 2B       	JB	INTBIT,STK
  297:      0016 C0 D0          	PUSH	PSW
  298:      0018 02 40 13       	LJMP	4013H
  299:                          	;
  300:                          	;
  301:           N      001B    	ORG	1BH
  302:                          	;
  303:                          	;**************************************
  304:                          	;
  305:                          	;TIMER 1 OVERFLOW INTERRUPT
  306:                          	;
  307:                          	;**************************************
  308:                          	;
  309:      001B C0 D0          	PUSH	PSW
  310:      001D 02 1F 78       	LJMP	CKS_I
  311:                          	;
  312:      0020 02 19 02       STJ:	LJMP	I_DR		;DO THE INTERRUPT
  313:                          	;
  314:                          	;**************************************
  315:                          	;
  316:                          	;SERIAL PORT INTERRUPT
  317:                          	;
  318:                          	;**************************************
  319:                          	;
  320:           N      0023    	ORG	23H
  321:                          	;
  322:      0023 C0 D0          	PUSH	PSW
  323:      0025 20 1F 1C       	JB	SPINT,STU	;SEE IF MONITOR EANTS INTE

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 7



 Line    I  Addr Code           Source

  324:      0028 02 40 23       	LJMP	4023H
  325:                          	;
  326:           N      002B    	ORG	2BH
  327:                          	;
  328:                          	;**************************************
  329:                          	;
  330:                          	;TIMER 2 OVERFLOW INTERRUPT
  331:                          	;
  332:                          	;**************************************
  333:                          	;
  334:      002B C0 D0          	PUSH	PSW
  335:      002D 02 40 2B       	LJMP	402BH
  336:                          	;
  337:                          	;**************************************
  338:                          	;
  339:                          	;USER ENTRY
  340:                          	;
  341:                          	;**************************************
  342:                          	;
  343:           N      0030    	ORG	30H
  344:                          	;
  345:      0030 02 19 3F       	LJMP	IBLK		;LINK TO USER BLOCK
  346:                          	;
  347:      0033 20 26 08       STQ:	JB	I_T0,STS	;SEE IF MONITOR WANTS I
  348:      0036 C2 96          	CLR	DACK
  349:      0038 30 B2 FD       	JNB	P3.2,$		;WAIT FOR DMA TO END
  350:      003B D2 96          	SETB	DACK
  351:      003D 32             	RETI
  352:                          	;
  353:      003E 02 20 40       STS:	LJMP	2040H		;GO TO THE MONITOR
  354:                          	;
  355:      0041 D2 16          STK:	SETB	INTPEN		;TELL BASIC AN INTERRU
  356:      0043 32             	RETI
  357:                          	;
  358:      0044 02 20 50       STU:	LJMP	2050H		;SERIAL PORT INTERRUPT
  359:                          	;
  360:                          	;
  361:                          	;**************************************
  362:                          	;
  363:                          	; This is the equate table for 8052 bas
  364:                          	;
  365:                          	;**************************************
  366:                          	;
  367:                          	; The register to direct equates for CJ
  368:                          	;
  369:           N      0000    R0B0	EQU	0
  370:           N      0001    R1B0	EQU	1
  371:           N      0002    R2B0	EQU	2
  372:           N      0003    R3B0	EQU	3
  373:           N      0004    R4B0	EQU	4
  374:           N      0005    R5B0	EQU	5
  375:           N      0006    R6B0	EQU	6
  376:           N      0007    R7B0	EQU	7
  377:                          	;
  378:                          	; Register bank 1 contains the text poi
  379:                          	; and the arg stack pointer.

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 8



 Line    I  Addr Code           Source

  380:                          	;
  381:           N      0008    TXAL	EQU	8		;R0 BANK 1 = TEXT POINTER LO
  382:           N      0009    ASTKA	EQU	9		;R1 BANK 1 = ARG STACK
  383:           N      000A    TXAH	EQU	10		;R2 BANK 1 = TEXT POINTER H
  384:                          	;
  385:                          	; Now five temporary locations that are
  386:                          	;
  387:           N      000B    TEMP1	EQU	11
  388:           N      000C    TEMP2	EQU	12
  389:           N      000D    TEMP3	EQU	13
  390:           N      000E    TEMP4	EQU	14
  391:           N      000F    TEMP5	EQU	15
  392:                          	;
  393:                          	; Register bank 2 contains the read tex
  394:                          	; and the control stack pointer.
  395:                          	;
  396:           N      0010    RTXAL	EQU	16		;R0 BANK 2 = READ TEXT POI
  397:           N      0011    CSTKA	EQU	17		;R1 BANK 2 = CONTROL STACK
  398:           N      0012    RTXAH	EQU	18		;R2 BANK 2 = READ TEXT POI
  399:                          	;
  400:                          	; Now some internal system equates.
  401:                          	;
  402:           N      0013    BOFAH	EQU	19		;START OF THE BASIC PROGRA
  403:           N      0014    BOFAL	EQU	20		;START OF THE BASIC PROGRA
  404:           N      0015    NULLCT	EQU	21		;NULL COUNT
  405:           N      0016    PHEAD	EQU	22		;PRINT HEAD POSITION
  406:           N      0017    FORMAT	EQU	23
  407:                          	;
  408:                          	; Register bank 3 is for the user and c
  409:                          	; by basic
  410:                          	;
  411:                          	;
  412:                          	;
  413:                          	; Now everything else is used by basic.
  414:                          	; First the bit locations, these use by
  415:                          	;
  416:           B        10    OTS		BIT	16	;34.0-ON TIME INSTRUCTION EX
  417:           B        11    INPROG		BIT	17	;34.1-INTERRUPT IN PROCES
  418:           B        12    INTBIT		BIT	18	;34.2-INTERRUPT SET BIT
  419:           B        13    ON_ERR		BIT	19	;34.3-ON ERROR EXECUTED
  420:           B        14    OTI		BIT	20	;34.4-ON TIME INTERRUPT IN P
  421:           B        15    LINEB		BIT	21	;34.5-LINE CHANGE OCCURED
  422:           B        16    INTPEN		BIT	22	;34.6-INTERRUPT PENDING B
  423:           B        17    CONB		BIT	23	;34.7-CAN CONTINUE IF SET
  424:           B        18    GTRD		BIT	24	;35.0-READ GET LOCATION
  425:           B        19    LPB		BIT	25	;35.1-PRINT TO LINE PRINTER 
  426:           B        1A    CKS_B		BIT	26	;35.2-FOR PWM INTERRUPT
  427:           B        1B    COB		BIT	27	;35.3-CONSOLE OUT BIT
  428:                          				;     0 = SERIAL PORT
  429:                          				;     1 = LINE PRINTER
  430:           B        1C    COUB		BIT	28	;35.4-USER CONSOLE OUT BIT
  431:                          				;     0 = SERIAL PORT
  432:                          				;     1 = USER DRIVER
  433:           B        1D    INBIT		BIT	29	;35.5-INITIALIZATION BIT
  434:           B        1E    CIUB		BIT	30	;35.6-USER CONSOLE IN BIT
  435:                          				;     0 = SERIAL PORT

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 9



 Line    I  Addr Code           Source

  436:                          				;     1 = USER ROUTINE
  437:           B        1F    SPINT		BIT	31	;35.7-SERIAL PORT INTERRUP
  438:           B        20    STOPBIT 	BIT	32	;36.0-PROGRAM STOP ENCOU
  439:           B        21    U_IDL		BIT	33	;36.1-USER IDLE BREAK
  440:           B        22    INP_B		BIT	34	;36.2-SET DURING INPUT INS
  441:                          ;DCMPXZ 	BIT	35	;36.3-DCMPX ZERO FLAG
  442:           B        24    ARGF		BIT	36	;36.4-ARG STACK HAS A VALUE
  443:           B        25    RETBIT		BIT	37	;36.5-RET FROM INTERRUPT 
  444:           B        26    I_T0		BIT	38	;36.6-TRAP INTERRUPT ZERO T
  445:           B        27    UPB		BIT	39	;36.7-SET WHEN @ IS VALID
  446:                          
  447:                          ;
  448:                          ;***************************************
  449:                          ;****** Sorry - but the ego message had 
  450:                          ;
  451:                          ;JKBIT		BIT	40	;37.0-WB TRIGGER We use t
  452:                          ;
  453:           B        28    mul_underflow	BIT	40	;37.0-mul_limit_cas
  454:                          ;
  455:                          ;***************************************
  456:                          ;
  457:           B        29    ENDBIT		BIT	41	;37.1-GET END OF PROGRAM
  458:           B        2A    UBIT		BIT	42	;37.2-FOR DIM STATEMENT
  459:           B        2B    ISAV		BIT	43	;37.3-SAVE INTERRUPT STATUS
  460:           B        2C    BO		BIT	44	;37.4-BUBBLE OUTPUT
  461:           B        2D    XBIT		BIT	45	;37.5-EXTERNAL PROGRAM PRES
  462:           B        2E    C_BIT		BIT	46	;37.6-SET WHEN CLOCK RUNNI
  463:           B        2F    DIRF		BIT	47	;37.7-DIRECT INPUT MODE
  464:           B        30    NO_C		BIT	48	;38.0-NO CONTROL C
  465:           B        31    DRQ		BIT	49	;38.1-DMA ENABLED
  466:           B        32    BI		BIT	50	;38.2-BUBBLE INPUT
  467:                          ;
  468:                          ;***************************************
  469:                          ;****** Disable Intel programming for to
  470:                          ;
  471:                          ;INTELB 	BIT	51	;38.3-INTELLIGENT PROM P
  472:                          ;
  473:                          ;***************************************
  474:                          ;
  475:           B        34    C0ORX1		BIT	52	;38.4-PRINT FROM ROM OR R
  476:           B        35    CNT_S		BIT	53	;38.5-CONTROL S ENCOUNTERE
  477:           B        36    ZSURP		BIT	54	;38.6-ZERO SUPRESS
  478:           B        37    HMODE		BIT	55	;38.7-HEX MODE PRINT
  479:           B        97    LP		BIT	P1.7	;SOFTWARE LINE PRINTER
  480:           B        96    DACK		BIT	P1.6	;DMA ACK
  481:                          ;***************************************
  482:                          ;
  483:                          ;PROMV		BIT	P1.5	;TURN ON PROM VOLTAGE
  484:                          ;PROMP		BIT	P1.4	;PROM PULSE
  485:                          ;ALED		BIT	P1.3	;ALE DISABLE
  486:                          ;
  487:                          ;***************************************
  488:           B        92    T_BIT		BIT	P1.2	;I/O TOGGLE BIT
  489:           B        DF    BD		BIT	0DFH	;Baudrategenerator 805x7,x5
  490:                          	;
  491:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 10



 Line    I  Addr Code           Source

  492:                          	; The next location is a bit addressabl
  493:                          	;
  494:           N      0027    BABC	EQU	39
  495:                          	;
  496:                          	; Now floating point and the other temp
  497:                          	;
  498:                          	; FP Uses to locations 03CH
  499:                          	;
  500:                          	; Now the stack designators.
  501:                          	;
  502:           N      003E    SPSAV	EQU	3EH
  503:           N      003F    S_LEN	EQU	3FH
  504:           N      0040    T_HH	EQU	40H
  505:           N      0041    T_LL	EQU	41H
  506:           N      0042    INTXAH	EQU	42H
  507:           N      0043    INTXAL	EQU	43H
  508:           N      0045    MT1	EQU	45H
  509:           N      0046    MT2	EQU	46H
  510:           N      0047    MILLIV	EQU	47H		;Real Time Clock 5 milli
  511:           N      0048    TVH	EQU	48H		;Real Time Clock high byte
  512:           N      0049    TVL	EQU	49H		;Real Time Clock low byte
  513:           N      004A    SAVE_T	EQU	4AH
  514:           N      004B    SP_H	EQU	4BH		;SERIAL PORT TIME OUT
  515:           N      004C    SP_L	EQU	4CH
  516:           N      004D    CMNDSP	EQU	4DH		;SYSTEM STACK POINTER
  517:           N      0087    PCON0	EQU	87H		;PCON SFR
  518:           N      00AA    S0RELL	EQU	0AAH		;S0RELL 805x7A SFR
  519:           N      00BA    S0RELH	EQU	0BAH		;S0RELH 805x7A SFR
  520:           N      00CB    RCAPH2	EQU	0CBH		;RCAPH2 8052 SFR
  521:           N      00CA    RCAPL2	EQU	0CAH		;RCAPL2 8052 SFR
  522:           N      00D8    ADCON	EQU	0D8H		;ADCON 805xx SFR
  523:           N      00DA    DAPR	EQU	0DAH		;DAPR 805xx SFR
  524:           N      00FF    IRAMTOP EQU	0FFH		;TOP OF RAM
  525:           N      00FE    STACKTP EQU	0FEH		;ARG AND CONTROL STACK
  526:                          	;
  527:                          	; The character equates
  528:                          	;
  529:           N      000D    CR	EQU	0DH		;CARRIAGE RETURN
  530:           N      000A    LF	EQU	0AH		;LINE FEED
  531:           N      0007    BELL	EQU	07H		;BELL CHARACTER
  532:           N      0008    BS	EQU	08H		;BACK SPACE
  533:           N      0003    CNTRLC	EQU	03H		;CONTROL C
  534:           N      0004    CNTRLD	EQU	04H		;CONTROL D
  535:           N      0000    NULL	EQU	00H		;NULL
  536:                          	;
  537:                          	; The new baud rate constants
  538:                          	;
  539:           N      00B2    B4800	EQU	0B2H		;Timervalue for 4800 bau
  540:           N      00D9    B9600	EQU	0D9H		;Timervalue for 9600 bau
  541:                          	;
  542:                          	;
  543:                          	; The internal system equates
  544:                          	;
  545:           N      0049    LINLEN	EQU	73		;THE LENGTH OF AN INPUT L
  546:           N      0001    EOF	EQU	01		;END OF FILE CHARACTER
  547:           N      0001    ASTKAH	EQU	01		;ASTKA IS IN PAGE 1 OF RA

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 11



 Line    I  Addr Code           Source

  548:           N      0000    CSTKAH	EQU	00		;CSTKA IS IN PAGE 0 OF RA
  549:           N      0001    FTYPE	EQU	01		;CONTROL STACK "FOR"
  550:           N      0002    GTYPE	EQU	02		;CONTROL STACK "GOSUB"
  551:           N      0003    DTYPE	EQU	03		;DO-WHILE/UNTIL TYPE
  552:           N      8000    ROMADR	EQU	8000H	;LOCATION OF ROM
  553:                          ;
  554:                          	; The floating point equates
  555:                          	;
  556:           N      0006    FPSIZ	EQU	6		;NO. OF BYTES IN A FLOATING
  557:           N      0004    DIGIT	EQU	FPSIZ-2 	;THE MANTISSA OF A FL
  558:           N      0009    STESIZ	EQU	FPSIZ+3 	;SIZE OF SYMBOL ADJU
  559:                          ;FP_BASE EQU	 1993H		 ;BASE OF FLOATING 
  560:           N      0200    PSTART	EQU	512		;START OF A PROGRAM IN R
  561:           N      0011    FSIZE	EQU	FPSIZ+FPSIZ+2+2+1
  562:                          ;
  563:                          ;=== CH552 Added =====
  564:           N      03FF    ERAMEND	EQU	03FFH ; EX-RAM last addr (1K
  565:                          ;=====================
  566:                          ;
  567:                          	;**************************************
  568:                          	;
  569:                          USENT:	; User entry jump table
  570:                          	;
  571:                          	;**************************************
  572:                          	;
  573:      0047 17 87          	DW	CMND1		;(00, 00H)COMMAND MODE JUMP
  574:      0049 12 23          	DW	IFIX		;(01, 01H)CONVERT FP TO INT
  575:      004B 0F DD          	DW	PUSHAS		;(02, 02H)PUSH VALUE ONTO AR
  576:      004D 0F D3          	DW	POPAS		;(03, 03H)POP VALUE OFF ARG S
  577:      004F 04 BD          	DW	PG1		;(04, 04H)PROGRAM A PROM
  578:      0051 06 D8          	DW	INLINE		;(05, 05H)INPUT A LINE
  579:      0053 06 BF          	DW	UPRNT		;(06, 06H)PRINT A LINR
  580:      0055 06 A5          	DW	CRLF		;(07, 07H)OUTPUT A CRLF
  581:                          	;
  582:                          	;**************************************
  583:                          	;
  584:                          	; This is the operation jump table for 
  585:                          	;
  586:                          	;**************************************
  587:                          	;
  588:      0057 13 AC          OPTAB:	DW	ALPAR		;(08, 08H)LEFT PAREN
  589:      0059 13 2B          	DW	AEXP		;(09, 09H)EXPONENTAION
  590:      005B 11 B0          	DW	AMUL		;(10, 0AH)FP MUL
  591:      005D 17 41          	DW	AADD		;(11, 0BH)FLOATING POINT ADD
  592:      005F 14 0A          	DW	ADIV		;(12, 0CH)FLOATING POINT DIVID
  593:      0061 17 1C          	DW	ASUB		;(13, 0DH)FLOATING POINT SUBTR
  594:      0063 14 98          	DW	AXRL		;(14, 0EH)XOR
  595:      0065 14 84          	DW	AANL		;(15, 0FH)AND
  596:      0067 14 8D          	DW	AORL		;(16, 10H)OR
  597:      0069 13 A1          	DW	ANEG		;(17, 11H)NEGATE
  598:      006B 13 DB          	DW	AEQ		;(18, 12H)EQUAL
  599:      006D 13 E7          	DW	AGE		;(19, 13H)GREATER THAN OR EQUAL
  600:      006F 13 EB          	DW	ALE		;(20, 14H)LESS THAN OR EQUAL
  601:      0071 13 E1          	DW	ANE		;(21, 15H)NOT EQUAL
  602:      0073 13 D6          	DW	ALT		;(22, 16H)LESS THAN
  603:      0075 13 C5          	DW	AGT		;(23, 17H)GREATER THAN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 12



 Line    I  Addr Code           Source

  604:                          	;
  605:                          	;**************************************
  606:                          	;
  607:                          	; This is the jump table for unary oper
  608:                          	;
  609:                          	;**************************************
  610:                          	;
  611:      0077 13 8F          	DW	AABS		;(24, 18H)ABSOLUTE VALUE
  612:      0079 13 6D          	DW	AINT		;(25, 19H)INTEGER OPERATOR
  613:      007B 13 95          	DW	ASGN		;(26, 1AH)SIGN OPERATOR
  614:      007D 14 96          	DW	ANOT		;(27, 1BH)ONE'S COMPLEMENT
  615:      007F 11 6D          	DW	ACOS		;(28, 1CH)COSINE
  616:      0081 11 D0          	DW	ATAN		;(29, 1DH)TANGENT
  617:      0083 11 71          	DW	ASIN		;(30, 1EH)SINE
  618:      0085 12 8D          	DW	ASQR		;(31, 1FH)SQUARE ROOT
  619:      0087 13 AD          	DW	ACBYTE		;(32, 20H)READ CODE
  620:      0089 13 27          	DW	AETOX		;(33, 21H)E TO THE X
  621:      008B 11 E0          	DW	AATAN		;(34, 22H)ARC TANGENT
  622:      008D 12 C0          	DW	ALN		;(35, 23H)NATURAL LOG
  623:      008F 13 B6          	DW	ADBYTE		;(36, 24H)READ DATA MEMORY
  624:      0091 13 BE          	DW	AXBYTE		;(37, 25H)READ EXTERNAL MEMO
  625:      0093 14 7F          	DW	PIPI		;(38, 26H)PI
  626:      0095 13 F1          	DW	ARND		;(39, 27H)RANDOM NUMBER
  627:      0097 14 A9          	DW	AGET		;(40, 28H)GET INPUT CHARACTER
  628:      0099 17 11          	DW	AFREE		;(41, 29H)COMPUTE #BYTES FREE
  629:      009B 17 21          	DW	ALEN		;(42, 2AH) COMPUTE LEN OF PORG
  630:      009D 0F D9          	DW	AXTAL		;(43, 2BH) CRYSTAL
  631:      009F 16 4F          	DW	PMTOP		;(44, 2CH)TOP OF MEMORY
  632:      00A1 17 29          	DW	ATIME		;(45, 2DH) TIME
  633:      00A3 14 B9          	DW	A_IE		;(46, 2EH) IE
  634:      00A5 14 BD          	DW	A_IP		;(47, 2FH) IP
  635:      00A7 14 C1          	DW	ATIM0		;(48, 30H) TIMER 0
  636:      00A9 14 C7          	DW	ATIM1		;(49, 31H) TIMER 1
  637:      00AB 14 CD          	DW	ATIM2		;(50, 32H) TIMER 2
  638:      00AD 14 D3          	DW	AT2CON		;(51, 33H) T2CON
  639:      00AF 14 D7          	DW	ATCON		;(52, 34H) TCON
  640:      00B1 14 DB          	DW	ATMOD		;(53, 35H) ATMOD
  641:      00B3 14 DF          	DW	ARCAP2		;(54, 36H) RCAP2
  642:      00B5 14 E5          	DW	AP1		;(55, 37H) P1
  643:      00B7 14 E9          	DW	APCON		;(56, 38H) PCON
  644:      00B9 0F 43          	DW	EXPRB		;(57, 39H) EVALUATE AN EXPRES
  645:      00BB 16 5C          	DW	AXTAL1		;(58, 3AH) CALCULATE CRYSTAL
  646:      00BD 14 F0          	DW	LINE		;(59, 3BH) EDIT A LINE
  647:      00BF 15 BA          	DW	PP		;(60, 3CH) PROCESS A LINE
  648:      00C1 10 A0          	DW	UPPL0		;(61, 3DH) UNPROCESS A LINE
  649:      00C3 0D 65          	DW	VAR		;(62, 3EH) FIND A VARIABLE
  650:      00C5 0E CD          	DW	GC		;(63, 3FH) GET A CHARACTER
  651:      00C7 0E D5          	DW	GCI		;(64, 40H) GET CHARACTER AND IN
  652:      00C9 07 91          	DW	INCHAR		;(65, 41H) INPUT A CHARACTER
  653:      00CB 08 02          	DW	CRUN		;(66, 42H) RUN A PROGRAM
  654:                          ;
  655:                          ;***************************************
  656:                          ;****** OPBYTE 43H for POP *************
  657:                          ;****** Boehling 1 *********************
  658:                          ;
  659:      00CD 0A 7D          	dw	SPOP		;(67, 43H) POP a value to a va

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 13



 Line    I  Addr Code           Source

  660:                          ;
  661:                          ;***************************************
  662:                          ;
  663:                          
  664:      00CF 01             OPBOL:	DB	1		;
  665:                          	;
  666:      00D0 0F             	DB	15		;LEFT PAREN
  667:      00D1 0E             	DB	14		;EXPONENTIAN **
  668:      00D2 0A             	DB	10		;MUL
  669:      00D3 08             	DB	8		;ADD
  670:      00D4 0A             	DB	10		;DIVIDE
  671:      00D5 08             	DB	8		;SUB
  672:      00D6 03             	DB	3		;XOR
  673:      00D7 05             	DB	5		;AND
  674:      00D8 04             	DB	4		;OR
  675:      00D9 0C             	DB	12		;NEGATE
  676:      00DA 06             	DB	6		;EQ
  677:      00DB 06             	DB	6		;GT
  678:      00DC 06             	DB	6		;LT
  679:      00DD 06             	DB	6		;NE
  680:      00DE 06             	DB	6		;LE
  681:      00DF 06             	DB	6		;GE
  682:                          	;
  683:      00E0 0F             UOPBOL: DB	15		;AABS
  684:      00E1 0F             	DB	15		;AAINT
  685:      00E2 0F             	DB	15		;ASGN
  686:      00E3 0F             	DB	15		;ANOT
  687:      00E4 0F             	DB	15		;ACOS
  688:      00E5 0F             	DB	15		;ATAN
  689:      00E6 0F             	DB	15		;ASIN
  690:      00E7 0F             	DB	15		;ASQR
  691:      00E8 0F             	DB	15		;ACBYTE
  692:      00E9 0F             	DB	15		;E TO THE X
  693:      00EA 0F             	DB	15		;AATAN
  694:      00EB 0F             	DB	15		;NATURAL LOG
  695:      00EC 0F             	DB	15		;DBYTE
  696:      00ED 0F             	DB	15		;XBYTE
  697:                          	;
  698:                          	;**************************************
  699:                          	;
  700:                          	; The ASCII printed messages.
  701:                          	;
  702:                          	;**************************************
  703:                          	;
  704:      00EE 53 54 4F 50    STP:	DB	'STOP"'
            00F2 22
  705:                          	;
  706:      00F3 54 52 59 20    IAN:	DB	'TRY AGAIN"'
            00F7 41 47 41 49
            00FB 4E 22
  707:                          	;
  708:      00FD 52 45 41 44    RDYS:	DB	'READY"'
            0101 59 22
  709:                          	;
  710:      0103 20 2D 20 49    INS:	DB	' - IN LINE "'
            0107 4E 20 4C 49

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 14



 Line    I  Addr Code           Source

            010B 4E 45 20 22
  711:                          	;
  712:                          	;**************************************
  713:                          	;
  714:                          	; This is the command jump table
  715:                          	;
  716:                          	;**************************************
  717:                          	;
  718:      010F 08 02          CMNDD:	DW	CRUN		;RUN
  719:      0111 10 4E          	DW	CLIST		;LIST
  720:      0113 0B 08          	DW	CNULL		;NULL
  721:      0115 06 5C          	DW	CNEW		;NEW
  722:      0117 18 3E          	DW	CCONT		;CONTINUE
  723:      0119 04 8A          	DW	CPROG		;PROGRAM A PROM
  724:      011B 17 73          	DW	CXFER		;TRANSFER FROM ROM TO RAM
  725:      011D 17 7F          	DW	CRAM		;RAM MODE
  726:      011F 05 3C          	DW	CROM		;ROM MODE
  727:                          ;
  728:                          ;***************************************
  729:                          ;****** Disable Intel programming for to
  730:                          ;
  731:                          ;	DW	CIPROG		;INTELLIGENT PROM PROGRAMMI
  732:                          ;
  733:                          ;***************************************
  734:                          ;
  735:      0121 05 00          	dw	CERASE		;Erase an EEPROM
  736:                          ;
  737:                          	;**************************************
  738:                          	;
  739:                          	; This is the statement jump table.
  740:                          	;
  741:                          	;**************************************
  742:                          	;
  743:                          STATD:	;
  744:      0123 09 6E          	DW	SLET		;LET		80H
  745:      0125 06 8F          	DW	SCLR		;CLEAR		81H
  746:      0127 0A 76          	DW	SPUSH		;PUSH VAR	82H
  747:      0129 0A AA          	DW	SGOTO		;GO TO		83H
  748:      012B 16 86          	DW	STONE		;TONE		84H
  749:      012D 0C 29          	DW	SPH0		;PRINT MODE 0	85H
  750:      012F 19 2E          	DW	SUI		;USER INPUT	86H
  751:      0131 19 33          	DW	SUO		;USER OUTPUT	87H
  752:      0133 0A 7D          	DW	SPOP		;POP VAR	88H
  753:      0135 0C 2D          	DW	SPRINT		;PRINT		89H
  754:      0137 0E 63          	DW	SCALL		;CALL		8AH
  755:      0139 0D 61          	DW	SDIMX		;DIMENSION	8BH
  756:      013B 06 0C          	DW	STRING		;STRING ALLO	8CH
  757:      013D 16 F9          	DW	SBAUD		;SET BAUD	8DH
  758:      013F 19 18          	DW	SCLOCK		;CLOCK		8EH
  759:      0141 0C 2B          	DW	SPH1		;PRINT MODE 1	8FH
  760:                          	;
  761:                          	; No direct mode from here on
  762:                          	;
  763:      0143 08 58          	DW	SSTOP		;STOP		90H
  764:      0145 0E 56          	DW	SOT		;ON TIME	91H
  765:      0147 14 19          	DW	SONEXT		;ON EXT INT	92H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 15



 Line    I  Addr Code           Source

  766:      0149 0B 0E          	DW	SRETI		;RET FROM INT	93H
  767:      014B 0F 05          	DW	S_DO		;DO		94H
  768:      014D 0B CE          	DW	SRESTR		;RESTOR 	95H
  769:      014F 0E FC          	DW	WCR		;REM		96H
  770:      0151 0B 5F          	DW	SNEXT		;NEXT		97H
  771:      0153 14 0F          	DW	SONERR		;ON ERROR	98H
  772:      0155 0C EB          	DW	S_ON		;ON		99H
  773:      0157 0D F5          	DW	SINPUT		;INPUT		9AH
  774:      0159 0B E3          	DW	SREAD		;READ		9BH
  775:      015B 0E EC          	DW	FINDCR		;DATA		9CH
  776:      015D 0B 10          	DW	SRETRN		;RETURN 	9DH
  777:      015F 0A 86          	DW	SIF		;IF		9EH
  778:      0161 0B 2D          	DW	SGOSUB		;GOSUB		9FH
  779:      0163 0A 3C          	DW	SFOR		;FOR		A0H
  780:      0165 0A FC          	DW	SWHILE		;WHILE		A1H
  781:      0167 0B 01          	DW	SUNTIL		;UNTIL		A2H
  782:      0169 17 87          	DW	CMND1		;END		A3H
  783:      016B 18 5B          	DW	I_DL		;IDLE		A4H
  784:      016D 0F E5          	DW	ST_A		;STORE AT	A5H
  785:      016F 0F E9          	DW	LD_A		;LOAD AT	A6H
  786:      0171 04 F8          	DW	PGU		;PGM		A7H
  787:      0173 07 C0          	DW	RROM		;RUN A ROM	A9H
  788:                          	;
  789:                          	;**************************************
  790:                          	;
  791:                          TOKTAB: ; This is the basic token table
  792:                          	;
  793:                          	;**************************************
  794:                          	;
  795:                          	; First the tokens for statements
  796:                          	;
  797:      0175 80             	DB	80H		;LET TOKEN
  798:      0176 4C 45 54       	DB	'LET'
  799:                          	;
  800:      0179 81             	DB	81H		;CLEAR TOKEN
  801:      017A 43 4C 45 41    	DB	'CLEAR'
            017E 52
  802:                          	;
  803:      017F 82             	DB	82H		;PUSH TOKEN
  804:      0180 50 55 53 48    	DB	'PUSH'
  805:                          	;
  806:           N      0083    T_GOTO	EQU	83H
  807:                          	;
  808:      0184 83             	DB	83H		;GO TO TOKEN
  809:      0185 47 4F 54 4F    	DB	'GOTO'
  810:                          	;
  811:      0189 84             	DB	84H		;TOGGLE TOKEN
  812:      018A 50 57 4D       	DB	'PWM'
  813:                          	;
  814:      018D 85             	DB	85H		;PRINT HEX MODE 0
  815:      018E 50 48 30 2E    	DB	'PH0.'
  816:                          	;
  817:      0192 86             	DB	86H		;USER IN TOKEN
  818:      0193 55 49          	DB	'UI'
  819:                          	;
  820:      0195 87             	DB	87H		;USER OUT TOKEN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 16



 Line    I  Addr Code           Source

  821:      0196 55 4F          	DB	'UO'
  822:                          	;
  823:      0198 88             	DB	88H		;POP TOKEN
  824:      0199 50 4F 50       	DB	'POP'
  825:                          	;
  826:      019C 89             	DB	89H		;PRINT TOKEN
  827:      019D 50 52 49 4E    	DB	'PRINT'
            01A1 54
  828:      01A2 89             	DB	89H
  829:      01A3 50 2E          	DB	'P.'            ;P. ALSO MEANS PRINT
  830:      01A5 89             	DB	89H		;? ALSO
  831:      01A6 3F             	DB	'?'
  832:                          	;
  833:      01A7 8A             	DB	8AH		;CALL TOKEN
  834:      01A8 43 41 4C 4C    	DB	'CALL'
  835:                          	;
  836:      01AC 8B             	DB	8BH		;DIMENSION TOKEN
  837:      01AD 44 49 4D       	DB	'DIM'
  838:                          	;
  839:      01B0 8C             	DB	8CH		;STRING TOKEN
  840:      01B1 53 54 52 49    	DB	'STRING'
            01B5 4E 47
  841:                          	;
  842:      01B7 8D             	DB	8DH		;SET BAUD RATE
  843:      01B8 42 41 55 44    	DB	'BAUD'
  844:                          	;
  845:      01BC 8E             	DB	8EH		;CLOCK
  846:      01BD 43 4C 4F 43    	DB	'CLOCK'
            01C1 4B
  847:                          	;
  848:      01C2 8F             	DB	8FH		;PRINT HEX MODE 1
  849:      01C3 50 48 31 2E    	DB	'PH1.'
  850:                          	;
  851:           N      0090    T_STOP	EQU	90H		;STOP TOKEN
  852:      01C7 90             	DB	T_STOP
  853:      01C8 53 54 4F 50    	DB	'STOP'
  854:                          	;
  855:           N      0090    T_DIR	EQU	T_STOP		;NO DIRECT FROM HERE O
  856:                          	;
  857:      01CC 91             	DB	T_STOP+1	;ON TIMER INTERRUPT
  858:      01CD 4F 4E 54 49    	DB	'ONTIME'
            01D1 4D 45
  859:                          	;
  860:      01D3 92             	DB	T_STOP+2	;ON EXTERNAL INTERRUPT
  861:      01D4 4F 4E 45 58    	DB	'ONEX1'
            01D8 31
  862:                          	;
  863:      01D9 93             	DB	T_STOP+3	;RETURN FROM INTERRUPT
  864:      01DA 52 45 54 49    	DB	'RETI'
  865:                          	;
  866:      01DE 94             	DB	T_STOP+4	;DO TOKEN
  867:      01DF 44 4F          	DB	'DO'
  868:                          	;
  869:      01E1 95             	DB	T_STOP+5	;RESTORE TOKEN
  870:      01E2 52 45 53 54    	DB	'RESTORE'
            01E6 4F 52 45

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 17



 Line    I  Addr Code           Source

  871:                          	;
  872:           N      0096    T_REM	EQU	T_STOP+6	;REMARK TOKEN
  873:      01E9 96             	DB	T_REM
  874:      01EA 52 45 4D       	DB	'REM'
  875:                          	;
  876:      01ED 97             	DB	T_REM+1 	;NEXT TOKEN
  877:      01EE 4E 45 58 54    	DB	'NEXT'
  878:                          	;
  879:      01F2 98             	DB	T_REM+2 	;ON ERROR TOKEN
  880:      01F3 4F 4E 45 52    	DB	'ONERR'
            01F7 52
  881:                          	;
  882:      01F8 99             	DB	T_REM+3 	;ON TOKEN
  883:      01F9 4F 4E          	DB	'ON'
  884:                          	;
  885:      01FB 9A             	DB	T_REM+4 	;INPUT
  886:      01FC 49 4E 50 55    	DB	'INPUT'
            0200 54
  887:                          	;
  888:      0201 9B             	DB	T_REM+5 	;READ
  889:      0202 52 45 41 44    	DB	'READ'
  890:                          	;
  891:           N      009C    T_DATA	EQU	T_REM+6 	;DATA
  892:      0206 9C             	DB	T_DATA
  893:      0207 44 41 54 41    	DB	'DATA'
  894:                          	;
  895:      020B 9D             	DB	T_DATA+1	;RETURN
  896:      020C 52 45 54 55    	DB	'RETURN'
            0210 52 4E
  897:                          	;
  898:      0212 9E             	DB	T_DATA+2	;IF
  899:      0213 49 46          	DB	'IF'
  900:                          	;
  901:           N      009F    T_GOSB	EQU	T_DATA+3	;GOSUB
  902:      0215 9F             	DB	T_GOSB
  903:      0216 47 4F 53 55    	DB	'GOSUB'
            021A 42
  904:                          	;
  905:      021B A0             	DB	T_GOSB+1	;FOR
  906:      021C 46 4F 52       	DB	'FOR'
  907:                          	;
  908:      021F A1             	DB	T_GOSB+2	;WHILE
  909:      0220 57 48 49 4C    	DB	'WHILE'
            0224 45
  910:                          	;
  911:      0225 A2             	DB	T_GOSB+3	;UNTIL
  912:      0226 55 4E 54 49    	DB	'UNTIL'
            022A 4C
  913:                          	;
  914:      022B A3             	DB	T_GOSB+4	;END
  915:      022C 45 4E 44       	DB	'END'
  916:                          	;
  917:           N      00A4    T_LAST	EQU	T_GOSB+5	;LAST INITIAL TOKEN
  918:                          	;
  919:           N      00A4    T_TAB	EQU	T_LAST		;TAB TOKEN
  920:      022F A4             	DB	T_TAB

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 18



 Line    I  Addr Code           Source

  921:      0230 54 41 42       	DB	'TAB'
  922:                          	;
  923:           N      00A5    T_THEN	EQU	T_LAST+1	;THEN TOKEN
  924:      0233 A5             	DB	T_THEN
  925:      0234 54 48 45 4E    	DB	'THEN'
  926:                          	;
  927:           N      00A6    T_TO	EQU	T_LAST+2	;TO TOKEN
  928:      0238 A6             	DB	T_TO
  929:      0239 54 4F          	DB	'TO'
  930:                          	;
  931:           N      00A7    T_STEP	EQU	T_LAST+3	;STEP TOKEN
  932:      023B A7             	DB	T_STEP
  933:      023C 53 54 45 50    	DB	'STEP'
  934:                          	;
  935:           N      00A8    T_ELSE	EQU	T_LAST+4	;ELSE TOKEN
  936:      0240 A8             	DB	T_ELSE
  937:      0241 45 4C 53 45    	DB	'ELSE'
  938:                          	;
  939:           N      00A9    T_SPC	EQU	T_LAST+5	;SPACE TOKEN
  940:      0245 A9             	DB	T_SPC
  941:      0246 53 50 43       	DB	'SPC'
  942:                          	;
  943:           N      00AA    T_CR	EQU	T_LAST+6
  944:      0249 AA             	DB	T_CR
  945:      024A 43 52          	DB	'CR'
  946:                          	;
  947:      024C AB             	DB	T_CR+1
  948:      024D 49 44 4C 45    	DB	'IDLE'
  949:                          	;
  950:      0251 AC             	DB	T_CR+2
  951:      0252 53 54 40       	DB	'ST@'
  952:                          	;
  953:      0255 AD             	DB	T_CR+3
  954:      0256 4C 44 40       	DB	'LD@'
  955:                          	;
  956:      0259 AE             	DB	T_CR+4
  957:      025A 50 47 4D       	DB	'PGM'
  958:                          	;
  959:      025D AF             	DB	T_CR+5
  960:      025E 52 52 4F 4D    	DB	'RROM'
  961:                          	;
  962:                          	; Operator tokens
  963:                          	;
  964:           N      00E0    T_LPAR	EQU	0E0H		;LEFT PAREN
  965:      0262 E0             	DB	T_LPAR
  966:      0263 28             	DB	'('
  967:                          	;
  968:      0264 E1             	DB	T_LPAR+1	;EXPONENTIAN
  969:      0265 2A 2A          	DB	'**'
  970:                          	;
  971:      0267 E2             	DB	T_LPAR+2	;FP MULTIPLY
  972:      0268 2A             	DB	'*'
  973:                          	;
  974:           N      00E3    T_ADD	EQU	T_LPAR+3
  975:      0269 E3             	DB	T_LPAR+3	;ADD TOKEN
  976:      026A 2B             	DB	'+'

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 19



 Line    I  Addr Code           Source

  977:                          	;
  978:      026B E4             	DB	T_LPAR+4	;DIVIDE TOKEN
  979:      026C 2F             	DB	'/'
  980:                          	;
  981:           N      00E5    T_SUB	EQU	T_LPAR+5	;SUBTRACT TOKEN
  982:      026D E5             	DB	T_SUB
  983:      026E 2D             	DB	'-'
  984:                          	;
  985:      026F E6             	DB	T_LPAR+6	;LOGICAL EXCLUSIVE OR
  986:      0270 2E 58 4F 52    	DB	'.XOR.'
            0274 2E
  987:                          	;
  988:      0275 E7             	DB	T_LPAR+7	;LOGICAL AND
  989:      0276 2E 41 4E 44    	DB	'.AND.'
            027A 2E
  990:                          	;
  991:      027B E8             	DB	T_LPAR+8	;LOGICAL OR
  992:      027C 2E 4F 52 2E    	DB	'.OR.'
  993:                          	;
  994:           N      00E9    T_NEG	EQU	T_LPAR+9
  995:                          	;
  996:           N      00EA    T_EQU	EQU	T_LPAR+10	;EQUAL
  997:      0280 EA             	DB	T_EQU
  998:      0281 3D             	DB	'='
  999:                          	;
 1000:      0282 EB             	DB	T_LPAR+11	;GREATER THAN OR EQUAL
 1001:      0283 3E 3D          	DB	'>='
 1002:                          	;
 1003:      0285 EC             	DB	T_LPAR+12	;LESS THAN OR EQUAL
 1004:      0286 3C 3D          	DB	'<='
 1005:                          	;
 1006:      0288 ED             	DB	T_LPAR+13	;NOT EQUAL
 1007:      0289 3C 3E          	DB	'<>'
 1008:                          	;
 1009:      028B EE             	DB	T_LPAR+14	;LESS THAN
 1010:      028C 3C             	DB	'<'
 1011:                          	;
 1012:      028D EF             	DB	T_LPAR+15	;GREATER THAN
 1013:      028E 3E             	DB	'>'
 1014:                          	;
 1015:                          	;
 1016:           N      00B0    T_UOP	EQU	0B0H		;UNARY OP BASE TOKEN
 1017:                          	;
 1018:      028F B0             	DB	T_UOP		;ABS TOKEN
 1019:      0290 41 42 53       	DB	'ABS'
 1020:                          	;
 1021:      0293 B1             	DB	T_UOP+1 	;INTEGER TOKEN
 1022:      0294 49 4E 54       	DB	'INT'
 1023:                          	;
 1024:      0297 B2             	DB	T_UOP+2 	;SIGN TOKEN
 1025:      0298 53 47 4E       	DB	'SGN'
 1026:                          	;
 1027:      029B B3             	DB	T_UOP+3 	;GET TOKEN
 1028:      029C 4E 4F 54       	DB	'NOT'
 1029:                          	;
 1030:      029F B4             	DB	T_UOP+4 	;COSINE TOKEN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 20



 Line    I  Addr Code           Source

 1031:      02A0 43 4F 53       	DB	'COS'
 1032:                          	;
 1033:      02A3 B5             	DB	T_UOP+5 	;TANGENT TOKEN
 1034:      02A4 54 41 4E       	DB	'TAN'
 1035:                          	;
 1036:      02A7 B6             	DB	T_UOP+6 	;SINE TOKEN
 1037:      02A8 53 49 4E       	DB	'SIN'
 1038:                          	;
 1039:      02AB B7             	DB	T_UOP+7 	;SQUARE ROOT TOKEN
 1040:      02AC 53 51 52       	DB	'SQR'
 1041:                          	;
 1042:      02AF B8             	DB	T_UOP+8 	;CBYTE TOKEN
 1043:      02B0 43 42 59       	DB	'CBY'
 1044:                          	;
 1045:      02B3 B9             	DB	T_UOP+9 	;EXP (E TO THE X) TOKEN
 1046:      02B4 45 58 50       	DB	'EXP'
 1047:                          	;
 1048:      02B7 BA             	DB	T_UOP+10
 1049:      02B8 41 54 4E       	DB	'ATN'
 1050:                          	;
 1051:      02BB BB             	DB	T_UOP+11
 1052:      02BC 4C 4F 47       	DB	'LOG'
 1053:                          	;
 1054:      02BF BC             	DB	T_UOP+12	;DBYTE TOKEN
 1055:      02C0 44 42 59       	DB	'DBY'
 1056:                          	;
 1057:      02C3 BD             	DB	T_UOP+13	;XBYTE TOKEN
 1058:      02C4 58 42 59       	DB	'XBY'
 1059:                          	;
 1060:           N      00BE    T_ULAST EQU	T_UOP+14	;LAST OPERATOR NEED
 1061:                          	;
 1062:      02C7 BE             	DB	T_ULAST
 1063:      02C8 50 49          	DB	'PI'
 1064:                          	;
 1065:      02CA BF             	DB	T_ULAST+1	;RND TOKEN
 1066:      02CB 52 4E 44       	DB	'RND'
 1067:                          	;
 1068:      02CE C0             	DB	T_ULAST+2	;GET TOKEN
 1069:      02CF 47 45 54       	DB	'GET'
 1070:                          	;
 1071:      02D2 C1             	DB	T_ULAST+3	;FREE TOKEN
 1072:      02D3 46 52 45 45    	DB	'FREE'
 1073:                          	;
 1074:      02D7 C2             	DB	T_ULAST+4	;LEN TOKEN
 1075:      02D8 4C 45 4E       	DB	'LEN'
 1076:                          	;
 1077:           N      00C3    T_XTAL	EQU	T_ULAST+5	;CRYSTAL TOKEN
 1078:      02DB C3             	DB	T_XTAL
 1079:      02DC 58 54 41 4C    	DB	'XTAL'
 1080:                          	;
 1081:           N      00C4    T_MTOP	EQU	T_ULAST+6	;MTOP
 1082:      02E0 C4             	DB	T_MTOP
 1083:      02E1 4D 54 4F 50    	DB	'MTOP'
 1084:                          	;
 1085:           N      00C6    T_IE	EQU	T_ULAST+8	;IE REGISTER
 1086:      02E5 C6             	DB	T_IE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 21



 Line    I  Addr Code           Source

 1087:      02E6 49 45          	DB	'IE'
 1088:                          	;
 1089:           N      00C7    T_IP	EQU	T_ULAST+9	;IP REGISTER
 1090:      02E8 C7             	DB	T_IP
 1091:      02E9 49 50          	DB	'IP'
 1092:                          	;
 1093:           N      00C8    TMR0	EQU	T_ULAST+10	;TIMER 0
 1094:      02EB C8             	DB	TMR0
 1095:      02EC 54 49 4D 45    	DB	'TIMER0'
            02F0 52 30
 1096:                          	;
 1097:           N      00C9    TMR1	EQU	T_ULAST+11	;TIMER 1
 1098:      02F2 C9             	DB	TMR1
 1099:      02F3 54 49 4D 45    	DB	'TIMER1'
            02F7 52 31
 1100:                          	;
 1101:           N      00CA    TMR2	EQU	T_ULAST+12	;TIMER 2
 1102:      02F9 CA             	DB	TMR2
 1103:      02FA 54 49 4D 45    	DB	'TIMER2'
            02FE 52 32
 1104:                          	;
 1105:           N      00C5    T_TIME	EQU	T_ULAST+7	;TIME
 1106:      0300 C5             	DB	T_TIME
 1107:      0301 54 49 4D 45    	DB	'TIME'
 1108:                          	;
 1109:           N      00CB    TT2C	EQU	T_ULAST+13	;T2CON
 1110:      0305 CB             	DB	TT2C
 1111:      0306 54 32 43 4F    	DB	'T2CON'
            030A 4E
 1112:                          	;
 1113:           N      00CC    TTC	EQU	T_ULAST+14	;TCON
 1114:      030B CC             	DB	TTC
 1115:      030C 54 43 4F 4E    	DB	'TCON'
 1116:                          	;
 1117:           N      00CD    TTM	EQU	T_ULAST+15	;TMOD
 1118:      0310 CD             	DB	TTM
 1119:      0311 54 4D 4F 44    	DB	'TMOD'
 1120:                          	;
 1121:           N      00CE    TRC2	EQU	T_ULAST+16	;RCAP2
 1122:      0315 CE             	DB	TRC2
 1123:      0316 52 43 41 50    	DB	'RCAP2'
            031A 32
 1124:                          	;
 1125:           N      00CF    T_P1	EQU	T_ULAST+17	;P1
 1126:      031B CF             	DB	T_P1
 1127:      031C 50 4F 52 54    	DB	'PORT1'
            0320 31
 1128:                          	;
 1129:           N      00D0    T_PC	EQU	T_ULAST+18	;PCON
 1130:      0321 D0             	DB	T_PC
 1131:      0322 50 43 4F 4E    	DB	'PCON'
 1132:                          	;
 1133:           N      00D1    T_ASC	EQU	T_ULAST+19	;ASC TOKEN
 1134:      0326 D1             	DB	T_ASC
 1135:      0327 41 53 43 28    	DB	'ASC('
 1136:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 22



 Line    I  Addr Code           Source

 1137:           N      00D2    T_USE	EQU	T_ULAST+20	;USING TOKEN
 1138:      032B D2             	DB	T_USE
 1139:      032C 55 53 49 4E    	DB	'USING('
            0330 47 28
 1140:      0332 D2             	DB	T_USE
 1141:      0333 55 2E 28       	DB	'U.('
 1142:                          	;
 1143:           N      00D3    T_CHR	EQU	T_ULAST+21	;CHR TOKEN
 1144:      0336 D3             	DB	T_CHR
 1145:      0337 43 48 52 28    	DB	'CHR('
 1146:                          	;
 1147:           N      00F0    T_CMND	EQU	0F0H		;COMMAND BASE
 1148:                          	;
 1149:      033B F0             	DB	0F0H		;RUN TOKEN
 1150:      033C 52 55 4E       	DB	'RUN'
 1151:                          	;
 1152:      033F F1             	DB	0F1H		;LIST TOKEN
 1153:      0340 4C 49 53 54    	DB	'LIST'
 1154:                          	;
 1155:      0344 F2             	DB	0F2H		;NULL TOKEN
 1156:      0345 4E 55 4C 4C    	DB	'NULL'
 1157:                          	;
 1158:      0349 F3             	DB	0F3H		;NEW TOKEN
 1159:      034A 4E 45 57       	DB	'NEW'
 1160:                          	;
 1161:      034D F4             	DB	0F4H		;CONTINUE TOKEN
 1162:      034E 43 4F 4E 54    	DB	'CONT'
 1163:                          	;
 1164:      0352 F5             	DB	0F5H		;PROGRAM TOKEN
 1165:      0353 50 52 4F 47    	DB	'PROG'
 1166:                          	;
 1167:      0357 F6             	DB	0F6H		;TRANSFER TOKEN
 1168:      0358 58 46 45 52    	DB	'XFER'
 1169:                          	;
 1170:      035C F7             	DB	0F7H		;RAM MODE
 1171:      035D 52 41 4D       	DB	'RAM'
 1172:                          	;
 1173:      0360 F8             	DB	0F8H		;ROM MODE
 1174:      0361 52 4F 4D       	DB	'ROM'
 1175:                          ;
 1176:                          ;
 1177:                          ;***************************************
 1178:                          ;****** Disable Intel programming for to
 1179:                          ;
 1180:                          ;	DB	0F9H		;INTELLIGENT PROM PROGRAMMING
 1181:                          ;	DB	'FPROG'
 1182:                          ;
 1183:                          ;***************************************
 1184:                          ;****** New command "ERASE" to fill an E
 1185:                          ;****** Boehling 3 *********************
 1186:                          ;
 1187:      0364 F9             	db	0F9H		;Erase an EEPROM
 1188:      0365 45 52 41 53    	db	'ERASE'
            0369 45
 1189:                          ;
 1190:                          ;***************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 23



 Line    I  Addr Code           Source

 1191:                          ;****** Karmann 2 Bugfix ***************
 1192:                          ;
 1193:      036A FE             	db	0feh		;dummy token and
 1194:      036B 7F             	db	07fh		;unused dummy char
 1195:                          ;
 1196:                          ;****** continue with original code: ***
 1197:                          ;
 1198:      036C FF             	DB	0FFH		;END OF TABLE
 1199:                          	;
 1200:      036D 45 58 54 52    EIG:	DB	'EXTRA IGNORED"'
            0371 41 20 49 47
            0375 4E 4F 52 45
            0379 44 22
 1201:                          	;
 1202:      037B 41 2D 53 54    EXA:	DB	'A-STACK"'
            037F 41 43 4B 22
 1203:                          	;
 1204:      0383 43 2D 53 54    EXC:	DB	'C-STACK"'
            0387 41 43 4B 22
 1205:                          	;
 1206:                          	;**************************************
 1207:                          	;
 1208:                          CRST:	; This performs system initialzati
 1209:                          	; new power on reset functions could be
 1210:                          	;
 1211:                          	;**************************************
 1212:                          	;
 1213:                          	; First, initialize SFR's
 1214:                          	;
 1215:      038B 75 98 5A       	MOV	SCON,#5AH	;INITIALIZE SFR'S
 1216:                          ;
 1217:                          ;***************************************
 1218:                          ;****** Use XTAL up to 47 MHz **********
 1219:                          ;****** Wulf 2 *************************
 1220:                          ;
 1221:                          ;	MOV	TMOD,#10H
 1222:                          ;
 1223:      038E 75 89 11       	mov	TMOD,#11H	;Use 16 bit mode of timer
 1224:                          ;
 1225:                          ;***************************************
 1226:                          ;
 1227:      0391 75 88 54       	MOV	TCON,#54H
 1228:      0394 75 C8 34       	MOV	T2CON,#34H
 1229:                          ;	DB	75H		;MOV DIRECT, # OP CODE
 1230:                          ;	DB	0C8H		;T2CON LOCATION
 1231:                          ;	DB	34H		;CONFIGURATION BYTE
 1232:                          ;
 1233:                          ;=== CH552 Added =====
 1234:      0397 91 36          	acall	setfsys	; Set CPU Clock 24MHz(Max
 1235:                          ;=====================
 1236:                          	;
 1237:      0399 90 20 01       	MOV	DPTR,#2001H	;READ CODE AT 2001H
 1238:      039C E4             	CLR	A
 1239:      039D 93             	MOVC	A,@A+DPTR
 1240:      039E B4 AA 03       	CJNE	A,#0AAH,CRST1	;IF IT IS AN AAH, DO
 1241:      03A1 12 20 90       	LCALL	2090H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 24



 Line    I  Addr Code           Source

 1242:                          	;
 1243:      03A4 78 FF          CRST1:	MOV	R0,#IRAMTOP	;PUT THE TOP OF R
 1244:      03A6 E4             	CLR	A		;ZERO THE ACC
 1245:                          	;
 1246:      03A7 F6             CRST2:	MOV	@R0,A		;CLEAR INTERNAL MEMORY
 1247:      03A8 D8 FD          	DJNZ	R0,CRST2	;LOOP TIL DONE
 1248:                          	;
 1249:                          	; Now, test the external memory
 1250:                          	;
 1251:      03AA 75 3E 4D       	MOV	SPSAV,#CMNDSP	;SET UP THE STACK
 1252:      03AD 85 3E 81       	MOV	SP,SPSAV
 1253:                          ;
 1254:                          ;***************************************
 1255:                          ;****** Karmann 1 Bugfix ***************
 1256:                          ;
 1257:      03B0 12 17 E0       	lcall	TEST_USER	;chek for user command 
 1258:                          ;
 1259:                          ;****** continue with original code: ***
 1260:                          ;
 1261:      03B3 75 13 80       	MOV	BOFAH,#HIGH ROMADR
 1262:      03B6 75 14 11       	MOV	BOFAL,#LOW ROMADR+17
 1263:      03B9 90 80 00       	MOV	DPTR,#ROMADR	;GET THE BYTE AT 8000H
 1264:      03BC E0             	MOVX	A,@DPTR
 1265:      03BD C3             	CLR	C
 1266:      03BE 94 31          	SUBB	A,#31H		;FOR BIAS
 1267:      03C0 F5 45          	MOV	MT1,A		;SAVE IN DIRECT MATH LOC
 1268:      03C2 C2 E2          	CLR	ACC.2		;SAVE FOR RESET
 1269:      03C4 FF             	MOV	R7,A		;SAVE IT IN R7
 1270:      03C5 A3             	INC	DPTR
 1271:      03C6 B1 BA          	ACALL	L31DPI		;SAVE BAUD RATE
 1272:      03C8 12 08 85       	LCALL	RCL
 1273:      03CB A3             	INC	DPTR		;GET MEMTOP
 1274:      03CC B1 BA          	ACALL	L31DPI
 1275:      03CE 90 00 5F       	MOV	DPTR,#5FH	;READ THE EXTERNAL BYTE
 1276:      03D1 E0             	MOVX	A,@DPTR
 1277:      03D2 90 00 00       	MOV	DPTR,#0 	;ESTABLISH BASE FOR CLEAR
 1278:      03D5 B4 A5 08       	CJNE	A,#0A5H,CRS	;Erase the memory
 1279:      03D8 E5 45          	MOV	A,MT1
 1280:      03DA C2 E0          	CLR	ACC.0		;CLEAR BIT ONE
 1281:      03DC 64 04          	XRL	A,#4H
 1282:      03DE 60 2C          	JZ	CR2
 1283:                          	;
 1284:      03E0 BF 02 02       CRS:	CJNE	R7,#2,CRS1
 1285:      03E3 80 03          	SJMP	CRS2
 1286:      03E5 BF 03 04       CRS1:	CJNE	R7,#3,CR0
 1287:      03E8 D1 7D          CRS2:	ACALL	CL_1
 1288:      03EA 80 14          	SJMP	CR1
 1289:                          	;
 1290:      03EC AB 83          CR0:	MOV	R3,DPH		;SAVE THE DPTR
 1291:      03EE A9 82          	MOV	R1,DPL
 1292:      03F0 A3             	INC	DPTR
 1293:      03F1 74 5A          	MOV	A,#5AH
 1294:      03F3 F0             	MOVX	@DPTR,A 	;Test external memory
 1295:      03F4 E0             	MOVX	A,@DPTR
 1296:      03F5 B4 5A 08       	CJNE	A,#5AH,CR1
 1297:      03F8 E4             	CLR	A

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 25



 Line    I  Addr Code           Source

 1298:      03F9 F0             	MOVX	@DPTR,A
 1299:                          ;
 1300:                          ;***************************************
 1301:                          ;******* Skowronek alterations to progra
 1302:                          ;
 1303:                          ;	CJNE	R3,#0E0H,CR0
 1304:                          ;
 1305:                          ;=== CH552 Replaced =====
 1306:                          ;	CJNE	R3,#HIGH ROMADR-1,CR0	;Stop the t
 1307:                          ;	CJNE	R1,#LOW ROMADR-2,CR0	;EEPROM star
 1308:                          ;
 1309:      03FA BB 03 EF       	CJNE	R3,#HIGH ERAMEND,CR0	; Stop the te
 1310:      03FD B9 FE EC       	CJNE	R1,#LOW ERAMEND-1,CR0	; EXT-RAM en
 1311:                          ;========================
 1312:                          ;
 1313:                          ;***************************************
 1314:                          ;
 1315:      0400 BB 03 00       CR1:	CJNE	R3,#03H,CR11	;NEED THIS MUCH R
 1316:      0403 40 86          CR11:	JC	CRST
 1317:      0405 90 01 0A       	MOV	DPTR,#MEMTOP	;SAVE MEMTOP
 1318:      0408 D1 03          	ACALL	S31DP2		;SAVE MEMTOP AND SEED RCE
 1319:      040A D1 5C          	ACALL	CNEW		;CLEAR THE MEMORY AND SET U
 1320:                          	;
 1321:      040C D1 6F          CR2:	ACALL	RC1		;SET UP STACKS IF NOT DO
 1322:                          	;
 1323:      040E 12 16 57       	LCALL	AXTAL0		;DO THE CRYSTAL
 1324:      0411 E5 45          	MOV	A,MT1		;GET THE RESET BYTE
 1325:      0413 B4 05 03       	CJNE	A,#5,CR20
 1326:      0416 12 40 39       	LCALL	4039H
 1327:      0419 50 0D          CR20:	JNC	BG1		;CHECK FOR 0,1,2,3, OR 4
 1328:      041B 30 E0 49       	JNB	ACC.0,BG3	;NO RUN IF WRONG TYPE
 1329:      041E 90 80 10       	MOV	DPTR,#ROMADR+16
 1330:      0421 E0             	MOVX	A,@DPTR 	;READ THE BYTE
 1331:      0422 B4 55 42       	CJNE	A,#55H,BG3
 1332:      0425 02 08 02       	LJMP	CRUN
 1333:                          ;
 1334:                          ;***************************************
 1335:                          ;******* New baudrate detection ********
 1336:                          ;******* Wulf 3 alteration 1 ***********
 1337:                          ;
 1338:                          ;BG1:	 CLR	 A		 ;DO BAUD RATE
 1339:                          ;	 MOV	 R3,A
 1340:                          ;	 MOV	 R1,A
 1341:                          ;	 MOV	 R0,#4
 1342:                          ;	 JB	 RXD,$		 ;LOOP UNTIL A CHARACTER I
 1343:                          ;	;
 1344:                          ;BG2:	 DJNZ	 R0,$		 ;FOUR CLOCKS, IN LOO
 1345:                          ;	 CALL	 DEC3211	 ;NINE CLOCKS
 1346:                          ;	 MOV	 R0,#2		 ;ONE CLOCK
 1347:                          ;	 JNB	 RXD,BG2	 ;TWO CLOCKS, LOOP UNTIL
 1348:                          ;	 JB	 RXD,$		 ;WAIT FOR STOP CHARACTER 
 1349:                          ;	 JNB	 RXD,$
 1350:                          ;
 1351:                          ;***************************************
 1352:                          ;******* New processor type detection **
 1353:                          ;******* Wulf 4 ************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 26



 Line    I  Addr Code           Source

 1354:                          ;
 1355:                          ;-- comment out for AT98LP52 -----------
 1356:                          ;
 1357:                          ;BG1:	clr	a
 1358:                          ;	mov	t2con,a
 1359:                          ;	mov	TH2,#0FFh
 1360:                          ;	mov	TL2,#0F8h
 1361:                          ;	jb	rxd,$
 1362:                          ;	mov	t2con,#5	;Timer2 start
 1363:                          ;	jnb	rxd,$
 1364:                          ;	mov	t2con,a 	;Timer2 stop
 1365:                          ;	jb	rxd,$
 1366:                          ;	jnb	rxd,$
 1367:                          ;	call	sercalc 	;r3=timer2 MSB default
 1368:                          ;	;
 1369:                          ;	cjne	a,ADCON,BG10	;jump if A/D process
 1370:                          ;BG14:	mov	a,S0RELL
 1371:                          ;	cjne	a,#B9600,BG2	;jump if not 805x7A
 1372:                          ;	mov	a,r3
 1373:                          ;	anl	S0RELH,a
 1374:                          ;	mov	S0RELL,r1	;start Baudratetimer 805
 1375:                          ;	sjmp	BG11
 1376:                          ;	;
 1377:                          ;BG10:	cjne	r1,#B9600,BG12	;jump if wron
 1378:                          ;BG11:	orl	PCON0,#080h	;setb smod for fa
 1379:                          ;	sjmp	BG13
 1380:                          ;	;
 1381:                          ;BG12:	cjne	r1,#B4800,BG14	;jump if wron
 1382:                          ;BG13:	setb	BD		;enable baudrategenerato
 1383:                          ;	sjmp	BG15
 1384:                          ;	;
 1385:                          ;BG2:	mov	t2con,#34h	;configure Timer2 a
 1386:                          ;BG15:	CALL	RCL		;LOAD THE TIMER
 1387:                          
 1388:                          ;
 1389:                          ;-- insert for AT98LP52 ----------------
 1390:                          ;
 1391:                          ;BG1:	mov	r6,#0		; Speed Table Index
 1392:                          ;	mov	r3,#0FFH	; Set R3 = RCAP2H
 1393:                          ;
 1394:                          ;BG11:	mov	dptr,#SPEED_TBL	; Speed Table
 1395:                          ;	mov	a,r6		; Speed Table Index
 1396:                          ;	movc	a,@a+dptr	; Fetch Speed Table
 1397:                          ;	inc	r6
 1398:                          ;	jz	bg3		; Table End, Use Last Speed
 1399:                          ;
 1400:                          ;	mov	r1,a		; Set R1 = RCAP2L
 1401:                          ;	mov	t2con,#34h	;configure Timer2 as ba
 1402:                          ;	call	RCL		;LOAD THE TIMER
 1403:                          ;
 1404:                          ;	mov	dptr,#TEST_MSG	; Put Test Message
 1405:                          ;	mov	r7,#0		; Message Text Index
 1406:                          ;
 1407:                          ;BG13:	mov	a,r7		; Text Index
 1408:                          ;	movc	a,@a+dptr	; Fetch Message String
 1409:                          ;	jz	BG14		; String End ?

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 27



 Line    I  Addr Code           Source

 1410:                          ;	jnb	TI,$		; Wait Until Transmmit End
 1411:                          ;	clr	TI		; Clear TX Flag
 1412:                          ;	mov	SBUF,a	 	; Output Character
 1413:                          ;	inc	r7		; Next Character
 1414:                          ;	sjmp	BG13
 1415:                          ;
 1416:                          ;BG14:	jnb	RI,$		; Wait Until Receive En
 1417:                          ;	mov	a,SBUF		; Get Receive Character
 1418:                          ;	clr	RI		; Reset Flag
 1419:                          ;	anl	a,#07FH		; Clear Bit-7
 1420:                          ;	cjne	a,#'y',BG11	; Ok?, Test Next Spee
 1421:                          ;	sjmp	BG3
 1422:                          ;
 1423:                          ;SPEED_TBL:	db	0A0H	; RCAP2H,L = FFA0H (
 1424:                          ;		db	0B8H	; RCAP2H,L = FFB8H (19.2Kbps,
 1425:                          ;		db	0D0H	; RCAP2H,L = FFD0H (19.2Kbbs,
 1426:                          ;		db	0DCH	; RCAP2H,L = FFDCH (19.2Kbps,
 1427:                          ;		db	00h	; Table End
 1428:                          
 1429:                          ;-- CH552 Insert Start -----------------
 1430:                          ;=======================================
 1431:                          ;  CH552 Set Fixed baudrate 19.23Kbps
 1432:                          ;  RCAP2H,L = 65536 - (Fsys/16/Baud Rate
 1433:                          ;=======================================
 1434:                          ;baud19K	equ	0ffb2h		; RCAP2H,L Value of
 1435:                          ;
 1436:                          ;BG1:
 1437:                          ;	orl		t2mod,#0C0H		; Set bTMR_CLK, bT2_
 1438:                          ;	mov		r3,#high baud19k	; Set R3 = RCAP2
 1439:                          ;	mov		r1,#low baud19k		; Set R1 = RCAP2
 1440:                          ;	mov		t2con,#34h		; configure Timer2 as
 1441:                          ;	call	RCL				; LOAD THE TIMER
 1442:                          
 1443:                          ;	sjmp	BG3
 1444:                          ;
 1445:                          ;-- CH552E Insert Start ----------------
 1446:                          ;=======================================
 1447:                          ;  CH552E Set Fixed baudrate 19.23Kbps
 1448:                          ;  SBAUD1 = 256 - (Fsys/16/Baud Rate) : 
 1449:                          ;=======================================
 1450:           N      00B2    baud19K	equ	178				; SBAUD1 Value of 19.
 1451:                          ;
 1452:                          BG1:
 1453:      0428 75 C8 00       	mov		t2con,#00h		; Timer2 not use as ba
 1454:      042B 75 98 00       	mov		scon,#00h		; UART0 not use
 1455:                          
 1456:      042E 75 C0 32       	mov		scon1,#32h		; Fast baud rate, Rece
 1457:      0431 75 C2 B2       	mov		sbaud1,#baud19k	; set baud rate
 1458:                          
 1459:      0434 80 31          	sjmp	BG3
 1460:                          
 1461:                          ;=======================================
 1462:                          ;  CH552 System Clock (Fsys) Up 6MHz -> 
 1463:                          ;=======================================
 1464:                          setfsys:
 1465:      0436 E5 B9          	mov	a,CLOCK_CFG		; Get CLOCK_CFG

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 28



 Line    I  Addr Code           Source

 1466:      0438 54 F8          	anl	a,#0F8H			;  Clear MASK_SYS_CK_SEL
 1467:      043A 44 06          	orl	a,#006H			;  Set MASK_SYS_CK_SEL = 
 1468:                          
 1469:      043C 75 A1 55       	mov	SAFE_MOD,#055H	; Enter Safe_Mode Ke
 1470:      043F 75 A1 AA       	mov	SAFE_MOD,#0AAH	; Enter Safe_Mode Ke
 1471:                          
 1472:      0442 F5 B9          	mov	CLOCK_CFG,a		; Rewrite CLOCK_CFG
 1473:                          
 1474:      0444 75 A1 00       	mov	SAFE_MOD,#00	; Exit Safe_Mode
 1475:                          
 1476:      0447 22             	ret
 1477:                          
 1478:           N      0467    	org	0467h		; Insert Dummy Space, 0467H 
 1479:                          ;
 1480:                          ;-- insert end -------------------------
 1481:                          ;
 1482:                          ;****** Original code from here ********
 1483:                          ;
 1484:      0467 90 1F D3       BG3:	MOV	DPTR,#S_N	;GET THE MESSAGE
 1485:      046A D1 AD          	ACALL	CRP		;PRINT IT
 1486:      046C 02 17 7F       	LJMP	CRAM
 1487:                          	;
 1488:                          	;**************************************
 1489:                          	;
 1490:                          	; CIPROG AND CPROG - Program a prom
 1491:                          	;
 1492:                          	;**************************************
 1493:                          	;
 1494:      046F 7F 00          PG8:	MOV	R7,#00H 	;PROGRAM ONE BYTE AT A
 1495:      0471 7E 01          	MOV	R6,#01H
 1496:      0473 7A 7F          	MOV	R2,#HIGH ROMADR-1
 1497:      0475 78 FF          	MOV	R0,#LOW ROMADR-1;LOAD PROM ADDRESS
 1498:      0477 91 B5          	ACALL	PG101
 1499:      0479 0E             	INC	R6
 1500:      047A E5 CB          	MOV	A,RCAPH2
 1501:                          ;	DB	0E5H		;MOV A DIRECT OP CODE
 1502:                          ;	DB	0CBH		;ADDRESS OF R2CAP HIGH
 1503:      047C 91 B5          	ACALL	PG101
 1504:      047E E5 CA          	MOV	A,RCAPL2
 1505:                          ;	DB	0E5H		;MOV A, DIRECT OP CODE
 1506:                          ;	DB	0CAH		;R2CAP LOW
 1507:      0480 7E 03          	MOV	R6,#3
 1508:      0482 79 09          	MOV	R1,#LOW MEMTOP-1
 1509:      0484 7B 01          	MOV	R3,#HIGH MEMTOP
 1510:      0486 91 B5          	ACALL	PG101		;SAVE MEMTOP
 1511:      0488 80 29          	SJMP	PGR
 1512:                          ;
 1513:                          ;
 1514:                          ;***************************************
 1515:                          ;****** Skowronek alterations to program
 1516:                          ;****** Support the "PGM" statement was 
 1517:                          ;****** Disable Intel programming and co
 1518:                          ;
 1519:                          ;CIPROG: MOV	DPTR,#IPROGS	;LOAD IPROG LO
 1520:                          ;	SETB	INTELB
 1521:                          ;	SJMP	CPROG1		;GO DO PROG

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 29



 Line    I  Addr Code           Source

 1522:                          ;	;
 1523:                          ;CPROG: MOV	DPTR,#PROGS	;LOAD PROG LOCAT
 1524:                          ;	CLR	INTELB
 1525:                          ;	;
 1526:                          ;CPROG1: ACALL	LD_T		;LOAD THE TIMER
 1527:                          ;	CLR	PROMV		;TURN ON THE PROM VOLTAGE
 1528:                          ;	CALL	DELTST		;SEE IF A CR
 1529:                          ;	JNZ	PG8		;SAVE TIMER IF SO
 1530:                          ;	MOV	R4,#0FEH
 1531:                          ;	SETB	INBIT
 1532:                          ;	ACALL	ROMFD		;GET THE ROM ADDRESS OF T
 1533:                          ;	CALL	TEMPD		;SAVE THE ADDRESS
 1534:                          ;	MOV	A,R4		;GET COUNT
 1535:                          ;	CPL	A
 1536:                          ;	CALL	TWO_R2		;PUT IT ON THE STACK
 1537:                          ;	CALL	FP_BASE7	;OUTPUT IT
 1538:                          ;	ACALL	CCAL		;GET THE PROGRAM
 1539:                          ;	ACALL	CRLF		;DO CRLF
 1540:                          ;	MOV	R0,TEMP4	;GET ADDRESS
 1541:                          ;	MOV	R2,TEMP5
 1542:                          ;	MOV	A,#55H		;LOAD SIGNIFIER
 1543:                          ;	INC	R6		;LOAD LEN + 1
 1544:                          ;	CJNE	R6,#00,CPROG2
 1545:                          ;	INC	R7
 1546:                          ;CPROG2: ACALL	 PG102
 1547:                          ;
 1548:                          ;PGR:	SETB	PROMV
 1549:                          ;	AJMP	C_K
 1550:                          ;
 1551:                          ;PG1:	MOV	P2,R3		;GET THE BYTE TO PROGRA
 1552:                          ;	MOVX	A,@R1
 1553:                          ;PG101:  LCALL	 INC3210	 ;BUMP POINTERS
 1554:                          ;PG102:  MOV	 R5,#1		 ;SET UP INTELLIGEN
 1555:                          ;
 1556:                          ;PG2:	MOV	R4,A		;SAVE THE BYTE IN R4
 1557:                          ;	ACALL	PG7		;PROGRAM THE BYTE
 1558:                          ;	ACALL	PG9
 1559:                          ;	JB	INTELB,PG4	;SEE IF INTELLIGENT PROG
 1560:                          ;
 1561:                          ;PG3:	XRL	A,R4
 1562:                          ;	JNZ	PG6		;ERROR IF NOT THE SAME
 1563:                          ;	CALL	DEC76		;BUMP THE COUNTERS
 1564:                          ;	JNZ	PG1		;LOOP IF NOT DONE
 1565:                          ;	ANL	PSW,#11100111B	;INSURE RB0
 1566:                          ;PG31:	 RET
 1567:                          ;
 1568:                          ;PG4:	XRL	A,R4		;SEE IF PROGRAMMED
 1569:                          ;	JNZ	PG5		;JUMP IF NOT
 1570:                          ;	MOV	A,R4		;GET THE DATA BACK
 1571:                          ;	ACALL	PG7		;PROGRAM THE LOCATION
 1572:                          ;PG41:	 ACALL	 ZRO		 ;AGAIN
 1573:                          ;	ACALL	ZRO		;AND AGAIN
 1574:                          ;	ACALL	ZRO		;AND AGAIN
 1575:                          ;	DJNZ	R5,PG41 	;KEEP DOING IT
 1576:                          ;	ACALL	PG9		;RESET PROG
 1577:                          ;	SJMP	PG3		;FINISH THE LOOP

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 30



 Line    I  Addr Code           Source

 1578:                          ;
 1579:                          ;PG5:	INC	R5		;BUMP THE COUNTER
 1580:                          ;	MOV	A,R4		;GET THE BYTE
 1581:                          ;	CJNE	R5,#25,PG2	;SEE IF TRIED 25 TIMES
 1582:                          ;
 1583:                          ;PG6:	SETB	PROMV		;TURN OFF PROM VOLTAGE
 1584:                          ;	MOV	PSW,#0		;INSURE RB0
 1585:                          ;	JNB	DIRF,PG31	;EXIT IF IN RUN MODE
 1586:                          ;	MOV	DPTR,#E16X	;PROGRAMMING ERROR
 1587:                          ;
 1588:                          ;ERRLK: LJMP	ERROR		;PROCESS THE ERROR
 1589:                          ;
 1590:                          ;PG7:	MOV	P0,R0		;SET UP THE PORTS
 1591:                          ;	MOV	P2,R2		;LATCH LOW ORDER ADDRESS
 1592:                          ;	ACALL	PG11		;DELAY FOR 8748/9
 1593:                          ;	CLR	ALED
 1594:                          ;	MOV	P0,A		;PUT DATA ON THE PORT
 1595:                          ;	;
 1596:                          ;ZRO:	NOP			;SETTLEING TIME + FP ZERO
 1597:                          ;	NOP
 1598:                          ;	NOP
 1599:                          ;	NOP
 1600:                          ;	NOP
 1601:                          ;	NOP
 1602:                          ;	ACALL	PG11		;DELAY A WHILE
 1603:                          ;	CLR	PROMP		;START PROGRAMMING
 1604:                          ;	ACALL	TIMER_LOAD	;START THE TIMER
 1605:                          ;	JNB	TF1,$		;WAIT FOR PART TO PROGRAM
 1606:                          ;	RET			;EXIT
 1607:                          ;
 1608:                          ;PG9:	SETB	PROMP
 1609:                          ;	ACALL	PG11		;DELAY FOR A WHILE
 1610:                          ;	JNB	P3.2,$		;LOOP FOR EEPROMS
 1611:                          ;	MOV	P0,#0FFH
 1612:                          ;	CLR	P3.7		;LOWER READ
 1613:                          ;	ACALL	PG11
 1614:                          ;	MOV	A,P0		;READ THE PORT
 1615:                          ;	SETB	P3.7
 1616:                          ;	SETB	ALED
 1617:                          ;	RET
 1618:                          ;
 1619:                          ;PG11:	MOV	TEMP5,#12	;DELAY 30uS AT 12 M
 1620:                          ;	DJNZ	TEMP5,$
 1621:                          ;	RET
 1622:                          ;
 1623:                          ;	;*************************************
 1624:                          ;	;
 1625:                          ;PGU:	;PROGRAM A PROM FOR THE USER
 1626:                          ;	;
 1627:                          ;	;*************************************
 1628:                          ;
 1629:                          ;	CLR	PROMV		;TURN ON THE VOLTAGE
 1630:                          ;	MOV	PSW,#00011000B	;SELECT RB3
 1631:                          ;	ACALL	PG1		;DO IT
 1632:                          ;	SETB	PROMV		;TURN IT OFF
 1633:                          ;	RET

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 31



 Line    I  Addr Code           Source

 1634:                          ;
 1635:                          ;****** alteredet code starts here: ****
 1636:                          ;
 1637:      048A 90 01 28       CPROG:	MOV	DPTR,#PROGS	;LOAD PROG LOCATI
 1638:                          	;
 1639:      048D B1 82          CPROG1: ACALL	LD_T		;LOAD THE TIMER
 1640:      048F 12 0E E1       	CALL	DELTST		;SEE IF A CR
 1641:      0492 70 DB          	JNZ	PG8		;SAVE TIMER IF SO
 1642:      0494 7C FE          	MOV	R4,#0FEH
 1643:      0496 D2 1D          	SETB	INBIT
 1644:      0498 B1 5B          	ACALL	ROMFD		;GET THE ROM ADDRESS OF TH
 1645:      049A 12 18 54       	CALL	TEMPD		;SAVE THE ADDRESS
 1646:      049D EC             	MOV	A,R4		;GET COUNT
 1647:      049E F4             	CPL	A
 1648:      049F 12 14 B1       	CALL	TWO_R2		;PUT IT ON THE STACK
 1649:      04A2 12 19 7D       	CALL	FP_BASE7	;OUTPUT IT
 1650:      04A5 B1 1C          	ACALL	CCAL		;GET THE PROGRAM
 1651:      04A7 D1 A5          	ACALL	CRLF		;DO CRLF
 1652:      04A9 A8 0E          	MOV	R0,TEMP4	;GET ADDRESS
 1653:      04AB AA 0F          	MOV	R2,TEMP5
 1654:      04AD 74 55          	MOV	A,#55H		;LOAD SIGNIFIER
 1655:      04AF 0E             	INC	R6		;LOAD LEN + 1
 1656:      04B0 0F             	INC	R7
 1657:      04B1 91 C3          CPROG2: ACALL	PG2
 1658:                          	;
 1659:      04B3 A1 40          PGR:	AJMP	C_K		;Exit to command mode
 1660:                          	;
 1661:      04B5 0F             PG101:	INC	R7
 1662:      04B6 BE 00 07       	CJNE	R6,#0,PG4
 1663:      04B9 1F             	DEC	R7
 1664:      04BA 80 04          	SJMP	PG4
 1665:                          	;
 1666:      04BC 0F             PG10:	INC	R7
 1667:                          	;
 1668:      04BD 8B A0          PG1:	MOV	P2,R3		;GET THE BYTE TO PROGRAM
 1669:      04BF E3             	MOVX	A,@R1
 1670:      04C0 12 15 76       PG4:	LCALL	INC3210 	;BUMP POINTERS
 1671:                          	;
 1672:      04C3 91 D9          PG2:	ACALL	PG7		;Write the byte
 1673:      04C5 70 04          	JNZ	PG5		;exit if error
 1674:      04C7 DE F4          	DJNZ	R6,PG1
 1675:      04C9 DF F2          	DJNZ	R7,PG1		;LOOP IF NOT DONE
 1676:                          	;
 1677:      04CB 53 D0 E7       PG5:	ANL	PSW,#11100111B	;INSURE RB0
 1678:      04CE 60 27          	JZ	PG31		;Jump if none error
 1679:                          	;
 1680:      04D0 30 2F 24       PG6:	JNB	DIRF,PG31	;EXIT IF IN RUN MODE
 1681:      04D3 90 1F 9A       	MOV	DPTR,#E16X	;PROGRAMMING ERROR
 1682:      04D6 02 18 8F       ERRLK:	LJMP	ERROR		;PROCESS THE ERROR
 1683:                          	;
 1684:                          	;
 1685:      04D9 FC             PG7:	MOV	R4,A		;SAVE THE BYTE IN R4 for 
 1686:      04DA 8A 83          	mov	dph,r2		;load data pointer with eep
 1687:      04DC 88 82          	mov	dpl,r0
 1688:      04DE F0             	movx	@dptr,a 	;write the byte
 1689:      04DF 7D             	DB	07DH		;mov	 r5,#0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 32



 Line    I  Addr Code           Source

 1690:                          	;
 1691:      04E0 00             ZRO:	NOP
 1692:      04E1 00             	NOP			;SETTLEING TIME + FP ZERO
 1693:      04E2 00             	NOP			;Atenttion. This 6 NOP's a not on
 1694:      04E3 00             	NOP			;for settleing time, it is also t
 1695:      04E4 00             	NOP			;floating point zero!
 1696:      04E5 00             	NOP
 1697:      04E6 75 0F 0C       	MOV	TEMP5,#12	;DELAY 30uS AT 12 MHZ
 1698:      04E9 D5 0F FD       	DJNZ	TEMP5,$
 1699:      04EC B1 2D          	ACALL	TIMER_LOAD	;START THE TIMER
 1700:      04EE 30 8F FD       	JNB	TF1,$		;WAIT FOR PART TO PROGRAM
 1701:      04F1 E0             	movx	A,@DPTR 	;Read back for error dete
 1702:      04F2 6C             	xrl	A,R4		;Test for error
 1703:      04F3 60 02          	jz	PG31
 1704:      04F5 DD E9          	djnz	r5,ZRO
 1705:      04F7 22             PG31:	RET
 1706:                          	;
 1707:                          	;**************************************
 1708:                          	;
 1709:                          PGU:	;PROGRAM A PROM FOR THE USER (state
 1710:                          	;
 1711:                          	;**************************************
 1712:                          	;
 1713:      04F8 75 D0 18       	MOV	PSW,#00011000B	;SELECT RB3
 1714:      04FB BE 00 BE       	CJNE	R6,#0,PG10
 1715:      04FE 80 BD          	SJMP	PG1
 1716:                          ;
 1717:                          ;***************************************
 1718:                          ;****** The new command "ERASE" to fill 
 1719:                          ;****** Boehling 3 *********************
 1720:                          ;
 1721:      0500 7F 40          CERASE: mov	R7,#40H 		;Erase 16K byte
 1722:      0502 7E 00          	mov	R6,#00H
 1723:      0504 7A 7F          	mov	R2,#HIGH ROMADR-1	;Startaddress EEP
 1724:      0506 78 FF          	mov	R0,#LOW ROMADR-1
 1725:      0508 90 01 28       	mov	DPTR,#PROGS		;Point to EEPROM timei
 1726:      050B B1 82          	acall	LD_T			;Load the timer
 1727:                          	;
 1728:      050D 12 15 76       ERA1:	lcall	INC3210 		;Bump pointers
 1729:      0510 74 FF          	mov	A,#0FFH 		;Fill the EEPROM with 0FF
 1730:      0512 91 D9          	acall	PG7			;Write the byte
 1731:      0514 70 BA          	jnz	PG6			;Exit if error
 1732:      0516 DE F5          	DJNZ	R6,ERA1
 1733:      0518 DF F3          	DJNZ	R7,ERA1 		;Do the loop
 1734:      051A A1 40          	ajmp	C_K			;Exit to command mode
 1735:                          ;
 1736:                          ;***************************************
 1737:                          ;
 1738:                          ;****** continue with original code: ***
 1739:                          	;
 1740:                          	;**************************************
 1741:                          	;
 1742:                          CCAL:	; Set up for prom moves
 1743:                          	; R3:R1 gets source
 1744:                          	; R7:R6 gets # of bytes
 1745:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 33



 Line    I  Addr Code           Source

 1746:                          	;**************************************
 1747:                          	;
 1748:      051C B1 8A          	ACALL	GETEND		;GET THE LAST LOCATION
 1749:      051E A3             	INC	DPTR		;BUMP TO LOAD EOF
 1750:      051F AB 13          	MOV	R3,BOFAH
 1751:      0521 A9 14          	MOV	R1,BOFAL	;RESTORE START
 1752:      0523 C3             	CLR	C		;PREPARE FOR SUBB
 1753:      0524 E5 82          	MOV	A,DPL		;SUB DPTR - BOFA > R7:R6
 1754:      0526 99             	SUBB	A,R1
 1755:      0527 FE             	MOV	R6,A
 1756:      0528 E5 83          	MOV	A,DPH
 1757:      052A 9B             	SUBB	A,R3
 1758:      052B FF             	MOV	R7,A
 1759:      052C 22             CCAL1:	RET
 1760:                          	;
 1761:                          	;**************************************
 1762:                          	;
 1763:                          TIMER_LOAD:; Load the timer
 1764:                          	;
 1765:                          	;**************************************
 1766:                          	;
 1767:      052D B1 2C          	ACALL	CCAL1		;DELAY FOUR CLOCKS
 1768:                          TIMER_LOAD1:
 1769:      052F C2 8E          	CLR	TR1		;STOP IT WHILE IT'S LOADED
 1770:      0531 85 40 8D       	MOV	TH1,T_HH
 1771:      0534 85 41 8B       	MOV	TL1,T_LL
 1772:      0537 C2 8F          	CLR	TF1		;CLEAR THE OVERFLOW FLAG
 1773:      0539 D2 8E          	SETB	TR1		;START IT NOW
 1774:      053B 22             	RET
 1775:                          	;
 1776:                          	;**************************************
 1777:                          	;
 1778:                          CROM:	; The command action routine - ROM
 1779:                          	;
 1780:                          	;**************************************
 1781:                          	;
 1782:      053C C2 17          	CLR	CONB		;CAN'T CONTINUE IF MODE CHANG
 1783:      053E B1 43          	ACALL	RO1		;DO IT
 1784:                          	;
 1785:      0540 02 10 92       C_K:	LJMP	CL3		;EXIT
 1786:                          	;
 1787:                          ;RO1:	 CALL	 INTGER 	;SEE IF INTGER PRES
 1788:                          ;	 MOV	 R4,R0B0	;SAVE THE NUMBER
 1789:                          ;	 JNC	 $+4
 1790:                          ;	 MOV	 R4,#01H	;ONE IF NO INTEGER PRESE
 1791:                          ;	ACALL	ROMFD		;FIND THE PROGRAM
 1792:                          ;
 1793:      0543 12 0E E1       RO1:	CALL	DELTST
 1794:      0546 7C 01          	MOV	R4,#1
 1795:      0548 50 04          	JNC	RO11
 1796:      054A 12 0E 8E       	CALL	ONE
 1797:      054D FC             	MOV	R4,A
 1798:                          ;
 1799:      054E B1 5B          RO11:	ACALL	ROMFD
 1800:      0550 BC 00 11       	CJNE	R4,#0,RFX	;EXIT IF R4 <> 0
 1801:      0553 A3             	INC	DPTR		;BUMP PAST TAG

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 34



 Line    I  Addr Code           Source

 1802:      0554 85 83 13       	MOV	BOFAH,DPH	;SAVE THE ADDRESS
 1803:      0557 85 82 14       	MOV	BOFAL,DPL
 1804:      055A 22             	RET
 1805:                          	;
 1806:      055B 90 80 10       ROMFD:	MOV	DPTR,#ROMADR+16 ;START OF USE
 1807:                          	;
 1808:      055E E0             RF1:	MOVX	A,@DPTR 	;GET THE BYTE
 1809:      055F B4 55 09       	CJNE	A,#55H,RF3	;SEE IF PROPER TAG
 1810:      0562 DC 01          	DJNZ	R4,RF2		;BUMP COUNTER
 1811:                          	;
 1812:      0564 22             RFX:	RET			;DPTR HAS THE START ADDRESS
 1813:                          	;
 1814:      0565 A3             RF2:	INC	DPTR		;BUMP PAST TAG
 1815:      0566 B1 AC          	ACALL	G5
 1816:      0568 A3             	INC	DPTR		;BUMP TO NEXT PROGRAM
 1817:      0569 80 F3          	SJMP	RF1		;DO IT AGAIN
 1818:                          	;
 1819:      056B 10 1D F6       RF3:	JBC	INBIT,RFX	;EXIT IF SET
 1820:                          	;
 1821:      056E 90 1F C9       NOGO:	MOV	DPTR,#NOROM
 1822:      0571 81 D6          	AJMP	ERRLK
 1823:                          	;
 1824:                          	;**************************************
 1825:                          	;
 1826:                          L20DPI: ; load R2:R0 with the location t
 1827:                          	;
 1828:                          	;**************************************
 1829:                          	;
 1830:      0573 E0             	MOVX	A,@DPTR
 1831:      0574 FA             	MOV	R2,A
 1832:      0575 A3             	INC	DPTR
 1833:      0576 E0             	MOVX	A,@DPTR
 1834:      0577 F8             	MOV	R0,A
 1835:      0578 22             	RET			;DON'T BUMP DPTR
 1836:                          	;
 1837:                          	;**************************************
 1838:                          	;
 1839:                          X31DP:	; swap R3:R1 with DPTR
 1840:                          	;
 1841:                          	;**************************************
 1842:                          	;
 1843:      0579 CB             	XCH	A,R3
 1844:      057A C5 83          	XCH	A,DPH
 1845:      057C CB             	XCH	A,R3
 1846:      057D C9             	XCH	A,R1
 1847:      057E C5 82          	XCH	A,DPL
 1848:      0580 C9             	XCH	A,R1
 1849:      0581 22             	RET
 1850:                          	;
 1851:                          	;**************************************
 1852:                          	;
 1853:                          LD_T:	; Load the timer save location wit
 1854:                          	; pointing to.
 1855:                          	;
 1856:                          	;**************************************
 1857:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 35



 Line    I  Addr Code           Source

 1858:      0582 E0             	MOVX	A,@DPTR
 1859:      0583 F5 40          	MOV	T_HH,A
 1860:      0585 A3             	INC	DPTR
 1861:      0586 E0             	MOVX	A,@DPTR
 1862:      0587 F5 41          	MOV	T_LL,A
 1863:      0589 22             	RET
 1864:                          	;
 1865:                          	;
 1866:                          	;**************************************
 1867:                          	;
 1868:                          	;GETLIN - FIND THE LOCATION OF THE LINE
 1869:                          	;	  IF ACC = 0 THE LINE WAS NOT FOUND I
 1870:                          	;	  WAS TOO BIG, ELSE ACC <> 0 AND THE 
 1871:                          	;	  AT THE LINE THAT IS GREATER THAN OR
 1872:                          	;	  VALUE IN R3:R1.
 1873:                          	;
 1874:                          	;**************************************
 1875:                          	;
 1876:      058A D2 29          GETEND: SETB	ENDBIT		;GET THE END OF THE
 1877:                          	;
 1878:      058C 12 0E 9B       GETLIN: CALL	DP_B		;GET BEGINNING ADDRES
 1879:                          	;
 1880:      058F 12 0A A4       G1:	CALL	B_C
 1881:      0592 60 12          	JZ	G3		;EXIT WITH A ZERO IN A IF AT END
 1882:      0594 A3             	INC	DPTR		;POINT AT THE LINE NUMBER
 1883:      0595 20 29 0A       	JB	ENDBIT,G2	;SEE IF WE WANT TO FIND TH
 1884:      0598 B1 CC          	ACALL	DCMPX		;SEE IF (DPTR) = R3:R1
 1885:      059A B1 C2          	ACALL	DECDP		;POINT AT LINE COUNT
 1886:      059C E0             	MOVX	A,@DPTR 	;PUT LINE LENGTH INTO ACC
 1887:      059D 20 2A 06       	JB	UBIT,G3 	;EXIT IF EQUAL
 1888:      05A0 40 04          	JC	G3		;SEE IF LESS THAN OR ZERO
 1889:                          	;
 1890:      05A2 B1 DE          G2:	ACALL	ADDPTR		;ADD IT TO DPTR
 1891:      05A4 80 E9          	SJMP	G1		;LOOP
 1892:                          	;
 1893:      05A6 C2 29          G3:	CLR	ENDBIT		;RESET ENDBIT
 1894:      05A8 22             	RET			;EXIT
 1895:                          	;
 1896:      05A9 90 02 00       G4:	MOV	DPTR,#PSTART	;DO RAM
 1897:                          	;
 1898:      05AC D2 29          G5:	SETB	ENDBIT
 1899:      05AE 80 DF          	SJMP	G1		;NOW DO TEST
 1900:                          	;
 1901:                          	;**************************************
 1902:                          	;
 1903:                          	; LDPTRI - Load the DATA POINTER with t
 1904:                          	;	   to - DPH = (DPTR) , DPL = (DPTR+1)
 1905:                          	;
 1906:                          	; acc gets wasted
 1907:                          	;
 1908:                          	;**************************************
 1909:                          	;
 1910:      05B0 E0             LDPTRI: MOVX	A,@DPTR 	;GET THE HIGH BYTE
 1911:      05B1 C0 E0          	PUSH	ACC		;SAVE IT
 1912:      05B3 A3             	INC	DPTR		;BUMP THE POINTER
 1913:      05B4 E0             	MOVX	A,@DPTR 	;GET THE LOW BYTE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 36



 Line    I  Addr Code           Source

 1914:      05B5 F5 82          	MOV	DPL,A		;PUT IT IN DPL
 1915:      05B7 D0 83          	POP	DPH		;GET THE HIGH BYTE
 1916:      05B9 22             	RET			;GO BACK
 1917:                          	;
 1918:                          	;**************************************
 1919:                          	;
 1920:                          	;L31DPI - LOAD R3 WITH (DPTR) AND R1 WI
 1921:                          	;
 1922:                          	;ACC GETS CLOBBERED
 1923:                          	;
 1924:                          	;**************************************
 1925:                          	;
 1926:      05BA E0             L31DPI: MOVX	A,@DPTR 	;GET THE HIGH BYTE
 1927:      05BB FB             	MOV	R3,A		;PUT IT IN THE REG
 1928:      05BC A3             	INC	DPTR		;BUMP THE POINTER
 1929:      05BD E0             	MOVX	A,@DPTR 	;GET THE NEXT BYTE
 1930:      05BE F9             	MOV	R1,A		;SAVE IT
 1931:      05BF 22             	RET
 1932:                          	;
 1933:                          	;**************************************
 1934:                          	;
 1935:                          	;DECDP - DECREMENT THE DATA POINTER - U
 1936:                          	;
 1937:                          	;**************************************
 1938:                          	;
 1939:      05C0 B1 C2          DECDP2: ACALL	DECDP
 1940:                          	;
 1941:      05C2 C5 82          DECDP:	XCH	A,DPL		;GET DPL
 1942:      05C4 70 02          	JNZ	DECDP1		;BUMP IF ZERO
 1943:      05C6 15 83          	DEC	DPH
 1944:      05C8 14             DECDP1: DEC	A		;DECREMENT IT
 1945:      05C9 C5 82          	XCH	A,DPL		;GET A BACK
 1946:      05CB 22             	RET			;EXIT
 1947:                          	;
 1948:                          	;**************************************
 1949:                          	;
 1950:                          	;DCMPX - DOUBLE COMPARE - COMPARE (DPTR
 1951:                          	;R3:R1 - (DPTR) = SET CARRY FLAG
 1952:                          	;
 1953:                          	;IF R3:R1 > (DPTR) THEN C = 0
 1954:                          	;IF R3:R1 < (DPTR) THEN C = 1
 1955:                          	;IF R3:R1 = (DPTR) THEN C = 0
 1956:                          	;
 1957:                          	;**************************************
 1958:                          	;
 1959:      05CC C2 2A          DCMPX:	CLR	UBIT		;ASSUME NOT EQUAL
 1960:      05CE E0             	MOVX	A,@DPTR 	;GET THE BYTE
 1961:      05CF B5 03 0A       	CJNE	A,R3B0,D1	;IF A IS GREATER THAN R3
 1962:                          				;WHICH IS R3<@DPTR = NO CARRY AND
 1963:                          				;R3>@DPTR CARRY IS SET
 1964:      05D2 A3             	INC	DPTR		;BUMP THE DATA POINTER
 1965:      05D3 E0             	MOVX	A,@DPTR 	;GET THE BYTE
 1966:      05D4 B1 C2          	ACALL	DECDP		;PUT DPTR BACK
 1967:      05D6 B5 01 03       	CJNE	A,R1B0,D1	;DO THE COMPARE
 1968:      05D9 B3             	CPL	C		;FLIP CARRY
 1969:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 37



 Line    I  Addr Code           Source

 1970:      05DA B2 2A          	CPL	UBIT		;SET IT
 1971:      05DC B3             D1:	CPL	C		;GET THE CARRY RIGHT
 1972:      05DD 22             	RET			;EXIT
 1973:                          	;
 1974:                          	;**************************************
 1975:                          	;
 1976:                          	; ADDPTR - Add acc to the dptr
 1977:                          	;
 1978:                          	; acc gets wasted
 1979:                          	;
 1980:                          	;**************************************
 1981:                          	;
 1982:      05DE 25 82          ADDPTR: ADD	A,DPL		;ADD THE ACC TO DPL
 1983:      05E0 F5 82          	MOV	DPL,A		;PUT IT IN DPL
 1984:      05E2 50 02          	JNC	ADDPTR1 	;JUMP IF NO CARRY
 1985:      05E4 05 83          	INC	DPH		;BUMP DPH
 1986:      05E6 22             ADDPTR1:RET			;EXIT
 1987:                          	;
 1988:                          	;**************************************
 1989:                          	;
 1990:                          LCLR:	; Set up the storage allocation
 1991:                          	;
 1992:                          	;**************************************
 1993:                          	;
 1994:      05E7 D1 9A          	ACALL	ICLR		;CLEAR THE INTERRUPTS
 1995:      05E9 B1 A9          	ACALL	G4		;PUT END ADDRESS INTO DPTR
 1996:      05EB 74 06          	MOV	A,#6		;ADJUST MATRIX SPACE
 1997:      05ED B1 DE          	ACALL	ADDPTR		;ADD FOR PROPER BOUNDS
 1998:      05EF B1 79          	ACALL	X31DP		;PUT MATRIX BOUNDS IN R3:R
 1999:      05F1 90 01 08       	MOV	DPTR,#MT_ALL	;SAVE R3:R1 IN MATRIX 
 2000:      05F4 D1 05          	ACALL	S31DP		;DPTR POINTS TO MEMTOP
 2001:      05F6 B1 BA          	ACALL	L31DPI		;LOAD MEMTOP INTO R3:R1
 2002:      05F8 90 01 22       	MOV	DPTR,#STR_AL	;GET MEMORY ALLOCATED 
 2003:      05FB B1 B0          	ACALL	LDPTRI
 2004:      05FD 12 0A 02       	CALL	DUBSUB		;R3:R1 = MEMTOP - STRING A
 2005:      0600 90 01 04       	MOV	DPTR,#VARTOP	;SAVE R3:R1 IN VARTOP
 2006:                          	;
 2007:                          	; FALL THRU TO S31DP2
 2008:                          	;
 2009:                          	;**************************************
 2010:                          	;
 2011:                          	;S31DP - STORE R3 INTO (DPTR) AND R1 IN
 2012:                          	;
 2013:                          	;ACC GETS CLOBBERED
 2014:                          	;
 2015:                          	;**************************************
 2016:                          	;
 2017:      0603 D1 05          S31DP2: ACALL	S31DP		;DO IT TWICE
 2018:                          	;
 2019:      0605 EB             S31DP:	MOV	A,R3		;GET R3 INTO ACC
 2020:      0606 F0             	MOVX	@DPTR,A 	;STORE IT
 2021:      0607 A3             	INC	DPTR		;BUMP DPTR
 2022:      0608 E9             	MOV	A,R1		;GET R1
 2023:      0609 F0             	MOVX	@DPTR,A 	;STORE IT
 2024:      060A A3             	INC	DPTR		;BUMP IT AGAIN TO SAVE PROGRA
 2025:      060B 22             	RET			;GO BACK

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 38



 Line    I  Addr Code           Source

 2026:                          	;
 2027:                          	;
 2028:                          	;**************************************
 2029:                          	;
 2030:                          STRING: ; Allocate memory for strings
 2031:                          	;
 2032:                          	;**************************************
 2033:                          	;
 2034:      060C 12 0E 85       	LCALL	TWO		;R3:R1 = NUMBER, R2:R0 = LEN
 2035:      060F 90 01 22       	MOV	DPTR,#STR_AL	;SAVE STRING ALLOCATIO
 2036:      0612 D1 05          	ACALL	S31DP
 2037:      0614 0E             	INC	R6		;BUMP
 2038:      0615 8E 3F          	MOV	S_LEN,R6	;SAVE STRING LENGTH
 2039:      0617 C1 64          	AJMP	RCLEAR		;CLEAR AND SET IT UP
 2040:                          	;
 2041:                          	;**************************************
 2042:                          	;
 2043:                          	; F_VAR - Find	the variable in symbol t
 2044:                          	;	  R7:R6 contain the variable name
 2045:                          	;	  If not found create a zero entry an
 2046:                          	;	  R2:R0 has the address of variable o
 2047:                          	;
 2048:                          	;**************************************
 2049:                          	;
 2050:      0619 90 01 04       F_VAR:	MOV	DPTR,#VARTOP	;PUT VARTOP IN D
 2051:      061C B1 B0          	ACALL	LDPTRI
 2052:      061E B1 C0          	ACALL	DECDP2		;ADJUST DPTR FOR LOOKUP
 2053:                          	;
 2054:      0620 E0             F_VAR0: MOVX	A,@DPTR 	;LOAD THE VARIABLE
 2055:      0621 60 20          	JZ	F_VAR2		;TEST IF AT THE END OF THE T
 2056:      0623 A3             	INC	DPTR		;BUMP FOR NEXT BYTE
 2057:      0624 B5 07 0F       	CJNE	A,R7B0,F_VAR1	;SEE IF MATCH
 2058:      0627 E0             	MOVX	A,@DPTR 	;LOAD THE NAME
 2059:      0628 B5 06 0B       	CJNE	A,R6B0,F_VAR1
 2060:                          	;
 2061:                          	; Found the variable now adjust and put
 2062:                          	;
 2063:      062B E5 82          DLD:	MOV	A,DPL		;R2:R0 = DPTR-2
 2064:      062D 94 02          	SUBB	A,#2
 2065:      062F F8             	MOV	R0,A
 2066:      0630 E5 83          	MOV	A,DPH
 2067:      0632 94 00          	SUBB	A,#0		;CARRY IS CLEARED
 2068:      0634 FA             	MOV	R2,A
 2069:      0635 22             	RET
 2070:                          	;
 2071:      0636 E5 82          F_VAR1: MOV	A,DPL		;SUBTRACT THE STACK S
 2072:      0638 C3             	CLR	C
 2073:      0639 94 09          	SUBB	A,#STESIZ
 2074:      063B F5 82          	MOV	DPL,A		;RESTORE DPL
 2075:      063D 50 E1          	JNC	F_VAR0
 2076:      063F 15 83          	DEC	DPH
 2077:      0641 80 DD          	SJMP	F_VAR0		;CONTINUE COMPARE
 2078:                          	;
 2079:                          	;
 2080:                          	; Add the entry to the symbol table
 2081:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 39



 Line    I  Addr Code           Source

 2082:      0643 12 0D EF       F_VAR2: LCALL	R76S		;SAVE R7 AND R6
 2083:      0646 C3             	CLR	C
 2084:      0647 D1 2B          	ACALL	DLD		;BUMP THE POINTER TO GET ENT
 2085:                          	;
 2086:                          	; Adjust pointer and save storage alloc
 2087:                          	; and make sure we aren't wiping anythi
 2088:                          	; First calculate new storage allocatio
 2089:                          	;
 2090:      0649 E8             	MOV	A,R0
 2091:      064A 94 06          	SUBB	A,#STESIZ-3	;NEED THIS MUCH RAM
 2092:      064C F9             	MOV	R1,A
 2093:      064D EA             	MOV	A,R2
 2094:      064E 94 00          	SUBB	A,#0
 2095:      0650 FB             	MOV	R3,A
 2096:                          	;
 2097:                          	; Now save the new storage allocation
 2098:                          	;
 2099:      0651 90 01 06       	MOV	DPTR,#ST_ALL
 2100:      0654 D1 05          	CALL	S31DP		;SAVE STORAGE ALLOCATION
 2101:                          	;
 2102:                          	; Now make sure we didn't blow it, by w
 2103:                          	;
 2104:      0656 B1 CC          	ACALL	DCMPX		;COMPARE STORAGE ALLOCATIO
 2105:      0658 40 32          	JC	CCLR3		;ERROR IF CARRY
 2106:      065A D3             	SETB	C		;DID NOT FIND ENTRY
 2107:      065B 22             	RET			;EXIT IF TEST IS OK
 2108:                          	;
 2109:                          	;**************************************
 2110:                          	;
 2111:                          	; Command action routine - NEW
 2112:                          	;
 2113:                          	;**************************************
 2114:                          	;
 2115:      065C 90 02 00       CNEW:	MOV	DPTR,#PSTART	;SAVE THE START O
 2116:      065F 74 01          	MOV	A,#EOF		;END OF FILE
 2117:      0661 F0             	MOVX	@DPTR,A 	;PUT IT IN MEMORY
 2118:                          	;
 2119:                          	; falls thru
 2120:                          	;
 2121:                          	;**************************************
 2122:                          	;
 2123:                          	; The statement action routine - CLEAR
 2124:                          	;
 2125:                          	;**************************************
 2126:                          	;
 2127:      0662 C2 15          CNEW1:	CLR	LINEB		;SET UP FOR RUN AND GO
 2128:                          	;
 2129:      0664 B1 E7          RCLEAR: ACALL	LCLR		;CLEAR THE INTERRUPT
 2130:      0666 90 01 0A       	MOV	DPTR,#MEMTOP	;PUT MEMTOP IN R3:R1
 2131:      0669 B1 BA          	ACALL	L31DPI
 2132:      066B B1 A9          	ACALL	G4		;DPTR GETS END ADDRESS
 2133:      066D D1 7D          	ACALL	CL_1		;CLEAR THE MEMORY
 2134:                          	;
 2135:      066F 90 00 FE       RC1:	MOV	DPTR,#STACKTP	;POINT AT CONTROL
 2136:      0672 E4             	CLR	A		;CONTROL UNDERFLOW
 2137:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 40



 Line    I  Addr Code           Source

 2138:      0673 F0             RC2:	MOVX	@DPTR,A 	;SAVE IN MEMORY
 2139:      0674 75 11 FE       	MOV	CSTKA,#STACKTP
 2140:      0677 75 09 FE       	MOV	ASTKA,#STACKTP
 2141:      067A C2 17          	CLR	CONB		;CAN'T CONTINUE
 2142:      067C 22             	RET
 2143:                          	;
 2144:                          	;**************************************
 2145:                          	;
 2146:                          	; Loop until the memory is cleared
 2147:                          	;
 2148:                          	;**************************************
 2149:                          	;
 2150:      067D A3             CL_1:	INC	DPTR		;BUMP MEMORY POINTER
 2151:      067E E4             	CLR	A		;CLEAR THE MEMORY
 2152:      067F F0             	MOVX	@DPTR,A 	;CLEAR THE RAM
 2153:      0680 E0             	MOVX	A,@DPTR 	;READ IT
 2154:      0681 70 09          	JNZ	CCLR3		;MAKE SURE IT IS CLEARED
 2155:      0683 EB             	MOV	A,R3		;GET POINTER FOR COMPARE
 2156:      0684 B5 83 F6       	CJNE	A,DPH,CL_1	;SEE TO LOOP
 2157:      0687 E9             	MOV	A,R1		;NOW TEST LOW BYTE
 2158:      0688 B5 82 F2       	CJNE	A,DPL,CL_1
 2159:                          	;
 2160:      068B 22             CL_2:	RET
 2161:                          	;
 2162:      068C 02 15 B5       CCLR3:	JMP	TB		;ALLOCATED MEMORY DOESN'T
 2163:                          	;
 2164:                          	;**************************************
 2165:                          	;
 2166:                          SCLR:	;Entry point for clear return
 2167:                          	;
 2168:                          	;**************************************
 2169:                          	;
 2170:      068F 12 0E E1       	CALL	DELTST		;TEST FOR A CR
 2171:      0692 50 D0          	JNC	RCLEAR
 2172:      0694 12 0E D7       	CALL	GCI1		;BUMP THE TEST POINTER
 2173:      0697 B4 49 D5       	CJNE	A,#'I',RC1      ;SEE IF I, ELSE RE
 2174:                          	;
 2175:                          	;**************************************
 2176:                          	;
 2177:                          ICLR:	; Clear interrupts and system garb
 2178:                          	;
 2179:                          	;**************************************
 2180:                          	;
 2181:      069A 30 12 02       	JNB	INTBIT,ICLR1	;SEE IF BASIC HAS INTE
 2182:      069D C2 AA          	CLR	EX1		;IF SO, CLEAR INTERRUPTS
 2183:      069F 53 22 20       ICLR1:	ANL	34,#00100000B	;SET INTERRUPTS
 2184:      06A2 32             	RETI
 2185:                          	;
 2186:                          	;**************************************
 2187:                          	;
 2188:                          	;OUTPUT ROUTINES
 2189:                          	;
 2190:                          	;**************************************
 2191:                          	;
 2192:      06A3 D1 A5          CRLF2:	ACALL	CRLF		;DO TWO CRLF'S
 2193:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 41



 Line    I  Addr Code           Source

 2194:      06A5 7D 0D          CRLF:	MOV	R5,#CR		;LOAD THE CR
 2195:      06A7 F1 11          	ACALL	TEROT		;CALL TERMINAL OUT
 2196:      06A9 7D 0A          	MOV	R5,#LF		;LOAD THE LF
 2197:      06AB E1 11          	AJMP	TEROT		;OUTPUT IT AND RETURN
 2198:                          	;
 2199:                          	;PRINT THE MESSAGE ADDRESSED IN ROM OR 
 2200:                          	;ENDS WITH THE CHARACTER IN R4
 2201:                          	;DPTR HAS THE ADDRESS OF THE TERMINATOR
 2202:                          	;
 2203:      06AD D1 A5          CRP:	ACALL	CRLF		;DO A CR THEN PRINT ROM
 2204:                          	;
 2205:      06AF E4             ROM_P:	CLR	A		;CLEAR A FOR LOOKUP
 2206:      06B0 93             	MOVC	A,@A+DPTR	;GET THE CHARACTER
 2207:      06B1 C2 E7          	CLR	ACC.7		;CLEAR MS BIT
 2208:      06B3 B4 22 01       	CJNE	A,#'"',ROM_P1   ;EXIT IF TERMINATO
 2209:      06B6 22             	RET
 2210:      06B7 D2 34          ROM_P1: SETB	C0ORX1
 2211:                          	;
 2212:      06B9 FD             PN1:	MOV	R5,A		;OUTPUT THE CHARACTER
 2213:      06BA F1 11          	ACALL	TEROT
 2214:      06BC A3             	INC	DPTR		;BUMP THE POINTER
 2215:      06BD 80 04          	SJMP	PN0
 2216:                          	;
 2217:      06BF B1 79          UPRNT:	ACALL	X31DP
 2218:                          	;
 2219:      06C1 7C 0D          PRNTCR: MOV	R4,#CR		;OUTPUT UNTIL A CR
 2220:                          	;
 2221:      06C3 10 34 E9       PN0:	JBC	C0ORX1,ROM_P
 2222:      06C6 E0             	MOVX	A,@DPTR 	;GET THE RAM BYTE
 2223:      06C7 60 03          	JZ	PN01
 2224:      06C9 B5 04 01       	CJNE	A,R4B0,PN02	;SEE IF THE SAME AS TE
 2225:      06CC 22             PN01:	RET			;EXIT IF THE SAME
 2226:      06CD B4 0D E9       PN02:	CJNE	A,#CR,PN1	;NEVER PRINT A CR I
 2227:      06D0 02 18 85       	LJMP	E1XX		;BAD SYNTAX
 2228:                          	;
 2229:                          	;**************************************
 2230:                          	;
 2231:                          	; INLINE - Input a line to IBUF, exit w
 2232:                          	;
 2233:                          	;**************************************
 2234:                          	;
 2235:      06D3 B4 04 16       INL2:	CJNE	A,#CNTRLD,INL2B ;SEE IF A CON
 2236:                          	;
 2237:      06D6 D1 A5          INL0:	ACALL	CRLF		;DO A CR
 2238:                          	;
 2239:      06D8 75 A0 00       INLINE: MOV	P2,#HIGH IBUF	;IBUF IS IN TH
 2240:      06DB 78 07          	MOV	R0,#LOW IBUF	;POINT AT THE INPUT BU
 2241:                          	;
 2242:      06DD F1 91          INL1:	ACALL	INCHAR		;GET A CHARACTER
 2243:      06DF FD             	MOV	R5,A		;SAVE IN R5 FOR OUTPUT
 2244:      06E0 B4 7F F0       	CJNE	A,#7FH,INL2	;SEE IF A DELETE CHARA
 2245:      06E3 B8 07 18       	CJNE	R0,#LOW IBUF,INL6
 2246:      06E6 7D 07          INL11:	MOV	R5,#BELL	;OUTPUT A BELL
 2247:                          	;
 2248:      06E8 F1 11          INLX:	ACALL	TEROT		;OUTPUT CHARACTER
 2249:      06EA 80 F1          	SJMP	INL1		;DO IT AGAIN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 42



 Line    I  Addr Code           Source

 2250:                          	;
 2251:      06EC F2             INL2B:	MOVX	@R0,A		;SAVE THE CHARACTER
 2252:      06ED B4 0D 02       	CJNE	A,#CR,INL2B1	;IS IT A CR
 2253:      06F0 C1 A5          	AJMP	CRLF		;OUTPUT A CRLF AND EXIT
 2254:      06F2 B4 20 00       INL2B1: CJNE	A,#20H,INL2B2
 2255:      06F5 40 F1          INL2B2: JC	INLX		;ONLY ECHO CONTROL CHAR
 2256:      06F7 08             	INC	R0		;BUMP THE POINTER
 2257:      06F8 B8 56 ED       	CJNE	R0,#IBUF+79,INLX
 2258:      06FB 18             	DEC	R0		;FORCE 79
 2259:      06FC 80 E8          	SJMP	INL11		;OUTPUT A BELL
 2260:                          	;
 2261:      06FE 18             INL6:	DEC	R0		;DEC THE RAM POINTER
 2262:      06FF 7D 08          	MOV	R5,#BS		;OUTPUT A BACK SPACE
 2263:      0701 F1 11          	ACALL	TEROT
 2264:      0703 F1 0F          	ACALL	STEROT		;OUTPUT A SPACE
 2265:      0705 7D 08          	MOV	R5,#BS		;ANOTHER BACK SPACE
 2266:      0707 80 DF          	SJMP	INLX		;OUTPUT IT
 2267:                          ;
 2268:                          ;***************************************
 2269:                          ;****** Use XTAL up to 47 MHz **********
 2270:                          ;****** Wulf 2 *************************
 2271:                          ;
 2272:                          ;PTIME: DB	128-2		;PROM PROGRAMMER TIMER
 2273:                          ;	DB	00H
 2274:                          ;	DB	00H
 2275:                          ;	DB	50H
 2276:                          ;	DB	67H
 2277:                          ;	DB	41H
 2278:                          ;
 2279:      0709 7D             ptime:	db	128-3		;New programmer timer v
 2280:      070A 00             	db	00H		;divide by 5
 2281:      070B 00             	db	00H		;(50ms EPROM timeing to 10ms fo
 2282:      070C 00             	db	00H
 2283:      070D 35             	db	35H
 2284:      070E 83             	db	83H
 2285:                          ;
 2286:                          ;***************************************
 2287:                          ;
 2288:                          	;**************************************
 2289:                          	;
 2290:                          	; TEROT - Output a character to the sys
 2291:                          	;	  update PHEAD position.
 2292:                          	;
 2293:                          	;**************************************
 2294:                          	;
 2295:      070F 7D 20          STEROT: MOV	R5,#' '         ;OUTPUT A SP
 2296:                          	;
 2297:      0711 C0 E0          TEROT:	PUSH	ACC		;SAVE THE ACCUMULATOR
 2298:      0713 C0 83          	PUSH	DPH		;SAVE THE DPTR
 2299:      0715 C0 82          	PUSH	DPL
 2300:      0717 30 35 04       TEROT01:JNB	CNT_S,TEROT02	;WAIT FOR A CO
 2301:      071A F1 8D          	ACALL	BCK		;GET SERIAL STATUS
 2302:      071C 80 F9          	SJMP	TEROT01
 2303:      071E ED             TEROT02:MOV	A,R5		;PUT OUTPUT BYTE IN A
 2304:      071F 30 2C 05       	JNB	BO,TEROT03	;CHECK FOR MONITOR
 2305:      0722 12 20 40       	LCALL	2040H		;DO THE MONITOR

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 43



 Line    I  Addr Code           Source

 2306:      0725 E1 66          	AJMP	TEROT1		;CLEAN UP
 2307:      0727 30 1C 05       TEROT03:JNB	COUB,TEROT04	;SEE IF USER WA
 2308:      072A 12 40 30       	LCALL	4030H
 2309:      072D E1 66          	AJMP	TEROT1
 2310:      072F 30 27 08       TEROT04:JNB	UPB,T_1 	;NO AT IF NO XBIT
 2311:      0732 30 19 05       	JNB	LPB,T_1 	;AT PRINT
 2312:      0735 12 40 3C       	LCALL	403CH		;CALL AT LOCATION
 2313:      0738 E1 66          	AJMP	TEROT1		;FINISH OFF OUTPUT
 2314:                          	;
 2315:      073A 30 1B 22       T_1:	JNB	COB,TXX 	;SEE IF LIST SET
 2316:      073D 90 01 24       	MOV	DPTR,#SPV	;LOAD BAUD RATE
 2317:      0740 B1 82          	ACALL	LD_T
 2318:      0742 C2 97          	CLR	LP		;OUTPUT START BIT
 2319:      0744 B1 2D          	ACALL	TIMER_LOAD	;LOAD AND START THE TI
 2320:      0746 ED             	MOV	A,R5		;GET THE OUTPUT BYTE
 2321:      0747 D3             	SETB	C		;SET CARRY FOR LAST OUTPUT
 2322:      0748 7D 09          	MOV	R5,#9		;LOAD TIMER COUNTDOWN
 2323:                          	;
 2324:      074A 13             LTOUT1: RRC	A		;ROTATE A
 2325:      074B 30 8F FD       	JNB	TF1,$		;WAIT TILL TIMER READY
 2326:      074E 92 97          	MOV	LP,C		;OUTPUT THE BIT
 2327:      0750 B1 2D          	ACALL	TIMER_LOAD	;DO THE NEXT BIT
 2328:      0752 DD F6          	DJNZ	R5,LTOUT1	;LOOP UNTIL DONE
 2329:      0754 30 8F FD       	JNB	TF1,$		;FIRST STOP BIT
 2330:      0757 B1 2D          	ACALL	TIMER_LOAD
 2331:      0759 30 8F FD       	JNB	TF1,$		;SECOND STOP BIT
 2332:      075C FD             	MOV	R5,A		;RESTORE R5
 2333:      075D 80 07          	SJMP	TEROT1		;BACK TO TEROT
 2334:                          	;
 2335:                          ;	=== CH552E Update ===
 2336:                          ;TXX:	JNB	TI,$		;WAIT FOR TRANSMIT READY
 2337:                          ;	CLR	TI
 2338:                          ;	MOV	SBUF,R5 	;SEND OUT THE CHARACTER
 2339:      075F 30 C1 FD       TXX:	JNB	U1TI,$		;WAIT FOR TRANSMIT READ
 2340:      0762 C2 C1          	CLR	U1TI
 2341:      0764 8D C1          	MOV	SBUF1,R5 	;SEND OUT THE CHARACTER
 2342:                          ;	=== CH552E end ===
 2343:                          	;
 2344:      0766 BD 0D 03       TEROT1: CJNE	R5,#CR,TEROT11	;SEE IF A CR
 2345:      0769 75 16 00       	MOV	PHEAD,#00H	;IF A CR, RESET PHEAD AN
 2346:                          	;
 2347:      076C BD 0A 0B       TEROT11:CJNE	R5,#LF,NLC	;SEE IF A LF
 2348:      076F E5 15          	MOV	A,NULLCT	;GET THE NULL COUNT
 2349:      0771 60 07          	JZ	NLC		;NO NULLS IF ZERO
 2350:                          	;
 2351:      0773 7D 00          TEROT2: MOV	R5,#NULL	;PUT THE NULL IN TH
 2352:      0775 F1 11          	ACALL	TEROT		;OUTPUT THE NULL
 2353:      0777 14             	DEC	A		;DECREMENT NULL COUNT
 2354:      0778 70 F9          	JNZ	TEROT2		;LOOP UNTIL DONE
 2355:                          	;
 2356:      077A BD 08 02       NLC:	CJNE	R5,#BS,NLC1	;DEC PHEAD IF A BA
 2357:      077D 15 16          	DEC	PHEAD
 2358:      077F BD 20 00       NLC1:	CJNE	R5,#20H,NLC2	;IS IT A PRINTAB
 2359:      0782 40 02          NLC2:	JC	NLC3		;DON'T INCREMENT PHEAD IF
 2360:      0784 05 16          	INC	PHEAD		;BUMP PRINT HEAD
 2361:      0786 D0 82          NLC3:	POP	DPL		;RESTORE DPTR

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 44



 Line    I  Addr Code           Source

 2362:      0788 D0 83          	POP	DPH
 2363:      078A D0 E0          	POP	ACC		;RESTORE ACC
 2364:      078C 22             	RET			;EXIT
 2365:                          	;
 2366:      078D F1 C8          BCK:	ACALL	CSTS		;CHECK STATUS
 2367:      078F 50 2E          	JNC	CI_RET1 	;EXIT IF NO CHARACTER
 2368:                          	;
 2369:                          	;**************************************
 2370:                          	;
 2371:                          	;INPUTS A CHARACTER FROM THE SYSTEM CON
 2372:                          	;
 2373:                          	;**************************************
 2374:                          	;
 2375:      0791 30 32 05       INCHAR: JNB	BI,INCHAR1	;CHECK FOR MONITO
 2376:      0794 12 20 60       	LCALL	2060H
 2377:      0797 80 11          	SJMP	INCH1
 2378:      0799 30 1E 05       INCHAR1:JNB	CIUB,INCHAR2	;CHECK FOR USER
 2379:      079C 12 40 33       	LCALL	4033H
 2380:      079F 80 09          	SJMP	INCH1
 2381:                          ;	=== CH552E Update ===
 2382:                          ;INCHAR2:JNB	RI,$		;WAIT FOR RECEIVER RE
 2383:                          ;	MOV	A,SBUF
 2384:                          ;	CLR	RI		;RESET READY
 2385:      07A1 30 C0 FD       INCHAR2:JNB	U1RI,$		;WAIT FOR RECEIVER R
 2386:      07A4 E5 C1          	MOV	A,SBUF1
 2387:      07A6 C2 C0          	CLR	U1RI		;RESET READY
 2388:                          ;	=== CH552E end ===
 2389:      07A8 C2 E7          	CLR	ACC.7		;NO BIT 7
 2390:                          	;
 2391:      07AA B4 13 02       INCH1:	CJNE	A,#13H,INCH11
 2392:      07AD D2 35          	SETB	CNT_S
 2393:      07AF B4 11 02       INCH11: CJNE	A,#11H,INCH12
 2394:      07B2 C2 35          	CLR	CNT_S
 2395:      07B4 B4 03 04       INCH12: CJNE	A,#CNTRLC,INCH13
 2396:      07B7 30 30 1D       	JNB	NO_C,C_EX	;TRAP NO CONTROL C
 2397:      07BA 22             	RET
 2398:                          	;
 2399:                          ;
 2400:                          ;***************************************
 2401:                          ;****** Sorry - but the ego message had 
 2402:                          ;
 2403:                          INCH13:
 2404:                          ;	CLR	JKBIT
 2405:      07BB B4 17 00       	CJNE	A,#17H,CI_RET	;CONTROL W
 2406:                          ;	SETB	JKBIT
 2407:                          ;
 2408:                          ;***************************************
 2409:                          	;
 2410:      07BE D3             CI_RET: SETB	C		;CARRY SET IF A CHARACTE
 2411:      07BF 22             CI_RET1:RET			;EXIT
 2412:                          	;
 2413:                          	;**************************************
 2414:                          	;
 2415:                          	;RROM - The Statement Action Routine RR
 2416:                          	;
 2417:                          	;**************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 45



 Line    I  Addr Code           Source

 2418:                          	;
 2419:      07C0 D2 1D          RROM:	SETB	INBIT		;SO NO ERRORS
 2420:      07C2 B1 43          	ACALL	RO1		;FIND THE LINE NUMBER
 2421:      07C4 10 1D 3B       	JBC	INBIT,CRUN
 2422:      07C7 22             	RET			;EXIT
 2423:                          	;
 2424:                          	;**************************************
 2425:                          	;
 2426:                          CSTS:	;	RETURNS CARRY = 1 IF THERE IS A 
 2427:                          	;	THE SYSTEM CONSOLE. IF NO CHARACTER T
 2428:                          	;	WILL BE CLEARED
 2429:                          	;
 2430:                          	;**************************************
 2431:                          	;
 2432:      07C8 30 32 03       	JNB	BI,CSTS1	;BUBBLE STATUS
 2433:      07CB 02 20 68       	LJMP	2068H
 2434:      07CE 30 1E 03       CSTS1:	JNB	CIUB,CSTS2	;SEE IF EXTERNAL C
 2435:      07D1 02 40 36       	LJMP	4036H
 2436:                          ;	=== CH552E Update ===
 2437:                          ;CSTS2:	MOV	C,RI
 2438:      07D4 A2 C0          CSTS2:	MOV	C,U1RI
 2439:                          ;	=== CH552E end ===
 2440:      07D6 22             	RET
 2441:                          	;
 2442:                          ;
 2443:                          ;***************************************
 2444:                          ;****** Sorry - but the ego message had 
 2445:                          ;
 2446:                          ;C_EX0:  MOV	 DPTR,#WB	 ;EGO MESSAGE
 2447:                          ;	 ACALL	 ROM_P
 2448:                          ;
 2449:                          ;***************************************
 2450:                          	;
 2451:      07D7 C2 35          C_EX:	CLR	CNT_S		;NO OUTPUT STOP
 2452:      07D9 12 0C 31       	LCALL	SPRINT1 	;ASSURE CONSOLE
 2453:      07DC D1 A5          	ACALL	CRLF
 2454:                          ;
 2455:                          ;***************************************
 2456:                          ;****** Sorry - but the ego message had 
 2457:                          ;
 2458:                          ;	 JBC	 JKBIT,C_EX0
 2459:                          ;
 2460:                          ;***************************************
 2461:                          ;
 2462:      07DE 30 2F 7F       	JNB	DIRF,SSTOP0
 2463:      07E1 A1 40          	AJMP	C_K		;CLEAR COB AND EXIT
 2464:                          	;
 2465:      07E3 E5 48          T_CMP:	MOV	A,TVH		;COMPARE TIMER TO SP_H
 2466:      07E5 A9 49          	MOV	R1,TVL
 2467:      07E7 B5 48 F9       	CJNE	A,TVH,T_CMP
 2468:      07EA C9             	XCH	A,R1
 2469:      07EB 95 4C          	SUBB	A,SP_L
 2470:      07ED E9             	MOV	A,R1
 2471:      07EE 95 4B          	SUBB	A,SP_H
 2472:      07F0 22             	RET
 2473:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 46



 Line    I  Addr Code           Source

 2474:                          	;**************************************
 2475:                          	;
 2476:                          BR0:	; Trap the timer interrupt
 2477:                          	;
 2478:                          	;**************************************
 2479:                          	;
 2480:      07F1 F1 E3          	CALL	T_CMP		;COMPARE TIMER
 2481:      07F3 40 40          	JC	BCHR1		;EXIT IF TEST FAILS
 2482:      07F5 D2 14          	SETB	OTI		;DOING THE TIMER INTERRUPT
 2483:      07F7 C2 10          	CLR	OTS		;CLEAR TIMER BIT
 2484:      07F9 A2 11          	MOV	C,INPROG	;SAVE IN PROGRESS
 2485:      07FB 92 2B          	MOV	ISAV,C
 2486:      07FD 90 01 26       	MOV	DPTR,#TIV
 2487:      0800 80 3C          	SJMP	BR2
 2488:                          	;
 2489:                          	;**************************************
 2490:                          	;
 2491:                          	; The command action routine - RUN
 2492:                          	;
 2493:                          	;**************************************
 2494:                          	;
 2495:      0802 12 06 62       CRUN:	LCALL	CNEW1		;CLEAR THE STORAGE AR
 2496:      0805 71 D0          	ACALL	SRESTR1 	;GET THE STARTING ADDRES
 2497:      0807 51 A4          	ACALL	B_C
 2498:      0809 60 4A          	JZ	CMNDLK		;IF NULL GO TO COMMAND MODE
 2499:                          	;
 2500:      080B D1 B8          	ACALL	T_DP
 2501:      080D F1 23          	ACALL	B_TXA		;BUMP TO STARTING LINE
 2502:                          	;
 2503:      080F 91 3C          CILOOP: ACALL	SP0		;DO A CR AND A LF
 2504:      0811 C2 2F          CILOOP1:CLR	DIRF		;NOT IN DIRECT MODE
 2505:                          	;
 2506:                          	;INTERPERTER DRIVER
 2507:                          	;
 2508:      0813 85 3E 81       ILOOP:	MOV	SP,SPSAV	;RESTORE THE STACK E
 2509:      0816 20 2F 06       	JB	DIRF,ILOOP1	;NO INTERRUPTS IF IN DIR
 2510:      0819 85 0A 42       	MOV	INTXAH,TXAH	;SAVE THE TEXT POINTER
 2511:      081C 85 08 43       	MOV	INTXAL,TXAL
 2512:      081F 12 07 8D       ILOOP1: LCALL	BCK		;GET CONSOLE STATUS
 2513:      0822 20 2F 24       	JB	DIRF,I_L	;DIRECT MODE
 2514:      0825 B0 18          	ANL	C,/GTRD 	;SEE IF CHARACTER READY
 2515:      0827 50 06          	JNC	BCHR		;NO CHARACTER = NO CARRY
 2516:                          	;
 2517:                          	; DO TRAP OPERATION
 2518:                          	;
 2519:      0829 90 01 00       	MOV	DPTR,#GTB	;SAVE TRAP CHARACTER
 2520:      082C F0             	MOVX	@DPTR,A
 2521:      082D D2 18          	SETB	GTRD		;SAYS READ A BYTE
 2522:                          	;
 2523:      082F 20 14 17       BCHR:	JB	OTI,I_L 	;EXIT IF TIMER INTERRU
 2524:      0832 20 10 BC       	JB	OTS,BR0 	;TEST TIMER VALUE IF SET
 2525:      0835 30 16 11       BCHR1:	JNB	INTPEN,I_L	;SEE IF INTERRUPT 
 2526:      0838 20 11 0E       	JB	INPROG,I_L	;DON'T DO IT AGAIN IF IN 
 2527:      083B 90 01 20       	MOV	DPTR,#INTLOC	;POINT AT INTERRUPT LO
 2528:                          	;
 2529:      083E 7C 02          BR2:	MOV	R4,#GTYPE	;SETUP FOR A FORCED G

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 47



 Line    I  Addr Code           Source

 2530:      0840 71 35          	ACALL	SGS1		;PUT TXA ON STACK
 2531:      0842 D2 11          	SETB	INPROG		;INTERRUPT IN PROGRESS
 2532:                          	;
 2533:      0844 12 05 73       ERL4:	CALL	L20DPI
 2534:      0847 41 F8          	AJMP	D_L1		;GET THE LINE NUMBER
 2535:                          	;
 2536:      0849 11 F8          I_L:	ACALL	ISTAT		;LOOP
 2537:      084B F1 17          	ACALL	CLN_UP		;FINISH IT OFF
 2538:      084D 50 C4          	JNC	ILOOP		;LOOP ON THE DRIVER
 2539:      084F 30 2F 03       	JNB	DIRF,CMNDLK	;CMND1 IF IN RUN MODE
 2540:      0852 02 17 94       	LJMP	CMNDR		;DON'T PRINT READY
 2541:                          	;
 2542:      0855 02 17 87       CMNDLK: JMP	CMND1		;DONE
 2543:                          	;**************************************
 2544:                          	;
 2545:                          	; The Statement Action Routine - STOP
 2546:                          	;
 2547:                          	;**************************************
 2548:                          	;
 2549:      0858 F1 17          SSTOP:	ACALL	CLN_UP		;FINISH OFF THIS LI
 2550:      085A 85 0A 42       	MOV	INTXAH,TXAH	;SAVE TEXT POINTER FOR 
 2551:      085D 85 08 43       	MOV	INTXAL,TXAL
 2552:                          	;
 2553:      0860 D2 17          SSTOP0: SETB	CONB		;CONTINUE WILL WORK
 2554:      0862 90 00 EE       	MOV	DPTR,#STP	;PRINT THE STOP MESSAGE
 2555:      0865 D2 20          	SETB	STOPBIT 	;SET FOR ERROR ROUTINE
 2556:      0867 02 18 AD       	JMP	ERRS		;JUMP TO ERROR ROUTINE
 2557:                          	;
 2558:                          	;**************************************
 2559:                          	;
 2560:                          	; ITRAP - Trap special function registe
 2561:                          	;
 2562:                          	;**************************************
 2563:                          	;
 2564:      086A B4 C8 05       ITRAP:	CJNE	A,#TMR0,ITRAP1	;TIMER 0
 2565:      086D 8B 8C          	MOV	TH0,R3
 2566:      086F 89 8A          	MOV	TL0,R1
 2567:      0871 22             	RET
 2568:                          	;
 2569:      0872 B4 C9 05       ITRAP1: CJNE	A,#TMR1,ITRAP2	;TIMER 1
 2570:      0875 8B 8D          	MOV	TH1,R3
 2571:      0877 89 8B          	MOV	TL1,R1
 2572:      0879 22             	RET
 2573:                          	;
 2574:      087A B4 CA 05       ITRAP2: CJNE	A,#TMR2,ITRAP3	;TIMER 2
 2575:      087D 8B CD          ITRAP21:MOV	TH2,R3
 2576:      087F 89 CC          	MOV	TL2,R1
 2577:                          ;	DB	8BH		;MOV R3 DIRECT OP CODE
 2578:                          ;	DB	0CDH		;T2H LOCATION
 2579:                          ;	DB	89H		;MOV R1 DIRECT OP CODE
 2580:                          ;	DB	0CCH		;T2L LOCATION
 2581:      0881 22             	RET
 2582:                          	;
 2583:      0882 B4 CE 05       ITRAP3: CJNE	A,#TRC2,RCL1	;RCAP2 TOKEN
 2584:      0885 8B CB          RCL:	MOV	RCAPH2,R3
 2585:      0887 89 CA          	MOV	RCAPL2,R1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 48



 Line    I  Addr Code           Source

 2586:                          ;	DB	8BH		;MOV R3 DIRECT OP CODE
 2587:                          ;	DB	0CBH		;RCAP2H LOCATION
 2588:                          ;	DB	89H		;MOV R1 DIRECT OP CODE
 2589:                          ;	DB	0CAH		;RCAP2L LOCATION
 2590:      0889 22             	RET
 2591:                          	;
 2592:      088A 31 D5          RCL1:	ACALL	R3CK		;MAKE SURE THAT R3 IS 
 2593:      088C B4 CB 03       	CJNE	A,#TT2C,RCL2
 2594:      088F 89 C8          	MOV	T2CON,R1
 2595:                          ;	DB	89H		;MOV R1 DIRECT OP CODE
 2596:                          ;	DB	0C8H		;T2CON LOCATION
 2597:      0891 22             	RET
 2598:                          	;
 2599:      0892 B4 C6 03       RCL2:	CJNE	A,#T_IE,RCL3	;IE TOKEN
 2600:      0895 89 A8          	MOV	IE,R1
 2601:      0897 22             	RET
 2602:                          	;
 2603:      0898 B4 C7 03       RCL3:	CJNE	A,#T_IP,RCL4	;IP TOKEN
 2604:      089B 89 B8          	MOV	IP,R1
 2605:      089D 22             	RET
 2606:                          	;
 2607:      089E B4 CC 03       RCL4:	CJNE	A,#TTC,RCL5	;TCON TOKEN
 2608:      08A1 89 88          	MOV	TCON,R1
 2609:      08A3 22             	RET
 2610:                          	;
 2611:      08A4 B4 CD 03       RCL5:	CJNE	A,#TTM,RCL6	;TMOD TOKEN
 2612:      08A7 89 89          	MOV	TMOD,R1
 2613:      08A9 22             	RET
 2614:                          	;
 2615:      08AA B4 CF 32       RCL6:	CJNE	A,#T_P1,T_T2	;P1 TOKEN
 2616:      08AD 89 90          	MOV	P1,R1
 2617:      08AF 22             	RET
 2618:                          	;
 2619:                          	;**************************************
 2620:                          	;
 2621:                          	; T_TRAP - Trap special operators
 2622:                          	;
 2623:                          	;**************************************
 2624:                          	;
 2625:      08B0 F5 0F          T_T:	MOV	TEMP5,A 	;SAVE THE TOKEN
 2626:      08B2 D1 D7          	ACALL	GCI1		;BUMP POINTER
 2627:      08B4 31 C8          	ACALL	SLET2		;EVALUATE AFTER =
 2628:      08B6 E5 0F          	MOV	A,TEMP5 	;GET THE TOKEN BACK
 2629:      08B8 B4 C3 03       	CJNE	A,#T_XTAL,T_T01
 2630:      08BB 02 16 5C       	LJMP	AXTAL1		;SET UP CRYSTAL
 2631:                          	;
 2632:      08BE D1 90          T_T01:	ACALL	IFIXL		;R3:R1 HAS THE TOS
 2633:      08C0 E5 0F          	MOV	A,TEMP5 	;GET THE TOKEN AGAIN
 2634:      08C2 B4 C4 09       	CJNE	A,#T_MTOP,T_T1	;SEE IF MTOP TOKEN
 2635:      08C5 90 01 0A       	MOV	DPTR,#MEMTOP
 2636:      08C8 12 06 05       	CALL	S31DP
 2637:      08CB 02 06 64       	JMP	RCLEAR		;CLEAR THE MEMORY
 2638:                          	;
 2639:      08CE B4 C5 99       T_T1:	CJNE	A,#T_TIME,ITRAP ;SEE IF A TIM
 2640:      08D1 A2 AF          	MOV	C,EA		;SAVE INTERRUPTS
 2641:      08D3 C2 AF          	CLR	EA		;NO TIMER 0 INTERRUPTS DURING L

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 49



 Line    I  Addr Code           Source

 2642:      08D5 8B 48          	MOV	TVH,R3		;SAVE THE TIME
 2643:      08D7 89 49          	MOV	TVL,R1
 2644:                          ;
 2645:                          ;***************************************
 2646:                          ;****** Reset millisecond counter on "TI
 2647:                          ;****** Boehling 2 *********************
 2648:                          ;
 2649:      08D9 75 47 00       	mov	MILLIV,#0	;Reset millisecond counte
 2650:                          ;
 2651:                          ;***************************************
 2652:                          ;
 2653:      08DC 92 AF          	MOV	EA,C		;RESTORE INTERRUPTS
 2654:      08DE 22             	RET			;EXIT
 2655:                          	;
 2656:      08DF B4 D0 56       T_T2:	CJNE	A,#T_PC,INTERX	;PCON TOKEN
 2657:      08E2 89 87          	MOV	PCON,R1
 2658:                          ;	DB	89H		;MOV DIRECT, R1 OP CODE
 2659:                          ;	DB	87H		;ADDRESS OF PCON
 2660:      08E4 22             	RET			;EXIT
 2661:                          	;
 2662:      08E5 B4 D1 C8       T_TRAP: CJNE	A,#T_ASC,T_T	;SEE IF ASC TO
 2663:      08E8 D1 CB          	ACALL	IGC		;EAT IT AND GET THE NEXT CHA
 2664:      08EA B4 24 4B       	CJNE	A,#'$',INTERX   ;ERROR IF NOT A ST
 2665:      08ED 51 1E          	ACALL	CSY		;CALCULATE ADDRESS
 2666:      08EF B1 AD          	ACALL	X3120
 2667:      08F1 12 14 B4       	CALL	TWO_EY
 2668:      08F4 31 DD          	ACALL	SPEOP1		;EVALUATE AFTER EQUALS
 2669:      08F6 21 21          	AJMP	ISTAX1		;SAVE THE CHARACTER
 2670:                          	;
 2671:                          	;**************************************
 2672:                          	;
 2673:                          	;INTERPERT THE STATEMENT POINTED TO BY 
 2674:                          	;
 2675:                          	;**************************************
 2676:                          	;
 2677:      08F8 D1 CD          ISTAT:	ACALL	GC		;GET THR FIRST CHARACTE
 2678:      08FA 30 2D 0E       	JNB	XBIT,IAT	;TRAP TO EXTERNAL RUN PACK
 2679:      08FD B4 20 00       	CJNE	A,#20H,ISTAT1
 2680:      0900 50 09          ISTAT1: JNC	IAT
 2681:      0902 12 20 70       	LCALL	2070H		;LET THE USER SET UP THE D
 2682:      0905 D1 D7          	ACALL	GCI1
 2683:      0907 54 0F          	ANL	A,#0FH		;STRIP OFF BIAS
 2684:      0909 80 51          	SJMP	ISTA1
 2685:                          	;
 2686:      090B B4 C3 00       IAT:	CJNE	A,#T_XTAL,IAT1
 2687:      090E 50 D5          IAT1:	JNC	T_TRAP
 2688:      0910 30 E7 5B       	JNB	ACC.7,SLET	;IMPLIED LET IF BIT 7 NO
 2689:      0913 B4 BC 06       	CJNE	A,#T_UOP+12,ISTAX	;DBYTE TOKEN
 2690:      0916 31 D9          	ACALL	SPEOP		;EVALUATE SPECIAL OPERATOR
 2691:      0918 31 D5          	ACALL	R3CK		;CHECK LOCATION
 2692:      091A F7             	MOV	@R1,A		;SAVE IT
 2693:      091B 22             	RET
 2694:                          	;
 2695:      091C B4 BD 06       ISTAX:	CJNE	A,#T_UOP+13,ISTAY	;XBYTE TOK
 2696:      091F 31 D9          	ACALL	SPEOP
 2697:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 50



 Line    I  Addr Code           Source

 2698:      0921 8B A0          ISTAX1: MOV	P2,R3
 2699:      0923 F3             	MOVX	@R1,A
 2700:      0924 22             	RET
 2701:                          	;
 2702:      0925 B4 AB 00       ISTAY:	CJNE	A,#T_CR+1,ISTAY1;TRAP NEW OP
 2703:      0928 40 09          ISTAY1: JC	I_S
 2704:      092A B4 B0 00       	CJNE	A,#0B0H,ISTAY2	;SEE IF TOO BIG
 2705:      092D 50 09          ISTAY2: JNC	INTERX
 2706:      092F 24 F9          	ADD	A,#0F9H 	;BIAS FOR LOOKUP TABLE
 2707:      0931 80 1D          	SJMP	ISTA0		;DO THE OPERATION
 2708:                          	;
 2709:      0933 B4 A4 00       I_S:	CJNE	A,#T_LAST,I_S1	;MAKE SURE AN I
 2710:      0936 40 03          I_S1:	JC	INTERX1 	;ERROR IF NOT
 2711:                          	;
 2712:      0938 02 18 85       INTERX: LJMP	E1XX		;SYNTAX ERROR
 2713:                          	;
 2714:      093B 30 2F 12       INTERX1:JNB	DIRF,ISTA0	;EXECUTE ALL STAT
 2715:      093E B4 90 00       	CJNE	A,#T_DIR,INTERX2;SEE IF ON TOKEN
 2716:      0941 40 0D          INTERX2:JC	ISTA0		;OK IF DIRECT
 2717:      0943 B4 A0 02       	CJNE	A,#T_GOSB+1,INTERX3;SEE IF FOR
 2718:      0946 80 08          	SJMP	ISTA0		;FOR IS OK
 2719:      0948 B4 97 02       INTERX3:CJNE	A,#T_REM+1,INTERX4	;NEXT IS
 2720:      094B 80 03          	SJMP	ISTA0
 2721:      094D B4 96 E8       INTERX4:CJNE	A,#T_STOP+6,INTERX	;SO IS R
 2722:                          	;
 2723:      0950 D1 D7          ISTA0:	ACALL	GCI1		;ADVANCE THE TEXT POI
 2724:      0952 90 01 23       	MOV	DPTR,#STATD	;POINT DPTR TO LOOKUP T
 2725:      0955 B4 80 02       	CJNE	A,#T_GOTO-3,ISTA01;SEE IF LET TOKE
 2726:      0958 80 9E          	SJMP	ISTAT		;WASTE LET TOKEN
 2727:      095A 54 3F          ISTA01: ANL	A,#3FH		;STRIP OFF THE GARBA
 2728:                          	;
 2729:      095C 23             ISTA1:	RL	A		;ROTATE FOR OFFSET
 2730:      095D 25 82          	ADD	A,DPL		;BUMP
 2731:      095F F5 82          	MOV	DPL,A		;SAVE IT
 2732:      0961 E4             	CLR	A
 2733:      0962 93             	MOVC	A,@A+DPTR	;GET HIGH BYTE
 2734:      0963 C0 E0          	PUSH	ACC		;SAVE IT
 2735:      0965 A3             	INC	DPTR
 2736:      0966 E4             	CLR	A
 2737:      0967 93             	MOVC	A,@A+DPTR	;GET LOW BYTE
 2738:      0968 D0 83          	POP	DPH
 2739:      096A F5 82          	MOV	DPL,A
 2740:                          	;
 2741:      096C E4             AC1:	CLR	A
 2742:      096D 73             	JMP	@A+DPTR 	;GO DO IT
 2743:                          	;
 2744:                          	;**************************************
 2745:                          	;
 2746:                          	; The statement action routine - LET
 2747:                          	;
 2748:                          	;**************************************
 2749:                          	;
 2750:      096E D1 BF          SLET:	ACALL	S_C		;CHECK FOR POSSIBLE STR
 2751:      0970 40 50          	JC	SLET0		;NO STRING
 2752:      0972 C2 15          	CLR	LINEB		;USED STRINGS
 2753:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 51



 Line    I  Addr Code           Source

 2754:      0974 12 05 79       	CALL	X31DP		;PUT ADDRESS IN DPTR
 2755:      0977 7F EA          	MOV	R7,#T_EQU	;WASTE =
 2756:      0979 91 E5          	ACALL	EATC
 2757:      097B D1 CD          	ACALL	GC		;GET THE NEXT CHARACTER
 2758:      097D B4 22 11       	CJNE	A,#'"',S_3      ;CHECK FOR A "
 2759:      0980 AF 3F          	MOV	R7,S_LEN	;GET THE STRING LENGTH
 2760:                          	;
 2761:      0982 D1 D7          S_0:	ACALL	GCI1		;BUMP PAST "
 2762:      0984 D1 E1          	ACALL	DELTST		;CHECK FOR DELIMITER
 2763:      0986 60 B0          	JZ	INTERX		;EXIT IF CARRIAGE RETURN
 2764:      0988 F0             	MOVX	@DPTR,A 	;SAVE THE CHARACTER
 2765:      0989 B4 22 26       	CJNE	A,#'"',S_1      ;SEE IF DONE
 2766:                          	;
 2767:      098C 74 0D          S_E:	MOV	A,#CR		;PUT A CR IN A
 2768:      098E F0             	MOVX	@DPTR,A 	;SAVE CR
 2769:      098F C1 D7          	AJMP	GCI1
 2770:                          	;
 2771:      0991 C0 83          S_3:	PUSH	DPH
 2772:      0993 C0 82          	PUSH	DPL		;SAVE DESTINATION
 2773:      0995 D1 BF          	ACALL	S_C		;CALCULATE SOURCE
 2774:      0997 40 9F          	JC	INTERX		;ERROR IF CARRY
 2775:      0999 D0 00          	POP	R0B0		;GET DESTINATION BACK
 2776:      099B D0 02          	POP	R2B0
 2777:                          	;
 2778:      099D AF 3F          SSOOP:	MOV	R7,S_LEN	;SET UP COUNTER
 2779:                          	;
 2780:      099F 12 15 96       S_4:	CALL	TBYTE		;TRANSFER THE BYTE
 2781:      09A2 B4 0D 01       	CJNE	A,#CR,S_41	;EXIT IF A CR
 2782:      09A5 22             	RET
 2783:      09A6 DF 05          S_41:	DJNZ	R7,S_5		;BUMP COUNTER
 2784:      09A8 74 0D          	MOV	A,#CR		;SAVE A CR
 2785:      09AA F2             	MOVX	@R0,A
 2786:      09AB C1 4E          	AJMP	EIGP		;PRINT EXTRA IGNORED
 2787:                          	;
 2788:                          	;
 2789:      09AD 12 15 76       S_5:	CALL	INC3210 	;BUMP POINTERS
 2790:      09B0 80 ED          	SJMP	S_4		;LOOP
 2791:                          	;
 2792:      09B2 DF 06          S_1:	DJNZ	R7,S_11 	;SEE IF DONE
 2793:      09B4 31 8C          	ACALL	S_E
 2794:      09B6 D1 4E          	ACALL	EIGP		;PRINT EXTRA IGNORED
 2795:      09B8 C1 EC          	AJMP	FINDCR		;GO FIND THE END
 2796:      09BA A3             S_11:	INC	DPTR		;BUMP THE STORE POINTER
 2797:      09BB 80 C5          	SJMP	S_0		;CONTINUE TO LOOP
 2798:                          	;
 2799:      09BD 90 18 28       E3XX:	MOV	DPTR,#E3X	;BAD ARG ERROR
 2800:      09C0 81 0E          	AJMP	EK
 2801:                          	;
 2802:      09C2 31 C6          SLET0:	ACALL	SLET1
 2803:      09C4 E1 D3          	AJMP	POPAS		;COPY EXPRESSION TO VARIABL
 2804:                          	;
 2805:      09C6 F1 01          SLET1:	ACALL	VAR_ER		;CHECK FOR A"VARIAB
 2806:                          	;
 2807:      09C8 C0 02          SLET2:	PUSH	R2B0		;SAVE THE VARIABLE ADD
 2808:      09CA C0 00          	PUSH	R0B0
 2809:      09CC 7F EA          	MOV	R7,#T_EQU	;GET EQUAL TOKEN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 52



 Line    I  Addr Code           Source

 2810:      09CE F1 41          	ACALL	WE
 2811:      09D0 D0 01          	POP	R1B0		;POP VARIABLE TO R3:R1
 2812:      09D2 D0 03          	POP	R3B0
 2813:      09D4 22             	RET			;EXIT
 2814:                          	;
 2815:      09D5 BB 00 E5       R3CK:	CJNE	R3,#00H,E3XX	;CHECK TO SEE IF
 2816:      09D8 22             	RET
 2817:                          	;
 2818:      09D9 D1 D7          SPEOP:	ACALL	GCI1		;BUMP TXA
 2819:      09DB 91 DF          	ACALL	P_E		;EVALUATE PAREN
 2820:      09DD 31 C8          SPEOP1: ACALL	SLET2		;EVALUATE AFTER =
 2821:      09DF 12 14 A1       	CALL	TWOL		;R7:R6 GETS VALUE, R3:R1 GET
 2822:      09E2 EE             	MOV	A,R6		;SAVE THE VALUE
 2823:                          	;
 2824:      09E3 BF 00 D7       	CJNE	R7,#00H,E3XX	;R2 MUST BE = 0
 2825:      09E6 22             	RET
 2826:                          	;
 2827:                          	;**************************************
 2828:                          	;
 2829:                          	; ST_CAL - Calculate string Address
 2830:                          	;
 2831:                          	;**************************************
 2832:                          	;
 2833:                          IST_CAL:;
 2834:                          	;
 2835:      09E7 D1 95          	ACALL	I_PI		;BUMP TEXT, THEN EVALUATE
 2836:      09E9 31 D5          	ACALL	R3CK		;ERROR IF R3 <> 0
 2837:      09EB 09             	INC	R1		;BUMP FOR OFFSET
 2838:      09EC E9             	MOV	A,R1		;ERROR IF R1 = 255
 2839:      09ED 60 CE          	JZ	E3XX
 2840:      09EF 90 01 04       	MOV	DPTR,#VARTOP	;GET TOP OF VARIABLE S
 2841:      09F2 85 3F F0       	MOV	B,S_LEN 	;MULTIPLY FOR LOCATION
 2842:      09F5 51 10          	ACALL	VARD		;CALCULATE THE LOCATION
 2843:      09F7 90 01 0A       	MOV	DPTR,#MEMTOP	;SEE IF BLEW IT
 2844:      09FA 12 15 B0       	CALL	FUL1
 2845:      09FD 85 3F 82       	MOV	DPL,S_LEN	;GET STRING LENGTH, DPH =
 2846:      0A00 15 83          	DEC	DPH		;DPH = 0
 2847:                          	;
 2848:      0A02 C3             DUBSUB: CLR	C
 2849:      0A03 E9             	MOV	A,R1
 2850:      0A04 95 82          	SUBB	A,DPL
 2851:      0A06 F9             	MOV	R1,A
 2852:      0A07 EB             	MOV	A,R3
 2853:      0A08 95 83          	SUBB	A,DPH
 2854:      0A0A FB             	MOV	R3,A
 2855:      0A0B 49             	ORL	A,R1
 2856:      0A0C 22             	RET
 2857:                          	;
 2858:                          	;**************************************
 2859:                          	;
 2860:                          	;VARD - Calculate the offset base
 2861:                          	;
 2862:                          	;**************************************
 2863:                          	;
 2864:      0A0D 75 F0 06       VARB:	MOV	B,#FPSIZ	;SET UP FOR OPERATION
 2865:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 53



 Line    I  Addr Code           Source

 2866:      0A10 12 05 B0       VARD:	CALL	LDPTRI		;LOAD DPTR
 2867:      0A13 E9             	MOV	A,R1		;MULTIPLY BASE
 2868:      0A14 A4             	MUL	AB
 2869:      0A15 25 82          	ADD	A,DPL
 2870:      0A17 F9             	MOV	R1,A
 2871:      0A18 E5 F0          	MOV	A,B
 2872:      0A1A 35 83          	ADDC	A,DPH
 2873:      0A1C FB             	MOV	R3,A
 2874:      0A1D 22             	RET
 2875:                          	;
 2876:                          	;**************************************
 2877:                          	;
 2878:                          CSY:	; Calculate a biased string address
 2879:                          	;
 2880:                          	;**************************************
 2881:                          	;
 2882:      0A1E 31 E7          	ACALL	IST_CAL 	;CALCULATE IT
 2883:      0A20 C0 03          	PUSH	R3B0		;SAVE IT
 2884:      0A22 C0 01          	PUSH	R1B0
 2885:      0A24 7F 2C          	MOV	R7,#','         ;WASTE THE COMMA
 2886:      0A26 91 E5          	ACALL	EATC
 2887:      0A28 D1 8E          	ACALL	ONE		;GET THE NEXT EXPRESSION
 2888:      0A2A E9             	MOV	A,R1		;CHECK FOR BOUNDS
 2889:      0A2B B5 3F 00       	CJNE	A,S_LEN,CSY1
 2890:      0A2E 50 8D          CSY1:	JNC	E3XX		;MUST HAVE A CARRY
 2891:      0A30 19             	DEC	R1		;BIAS THE POINTER
 2892:      0A31 D0 E0          	POP	ACC		;GET VALUE LOW
 2893:      0A33 29             	ADD	A,R1		;ADD IT TO BASE
 2894:      0A34 F9             	MOV	R1,A		;SAVE IT
 2895:      0A35 D0 03          	POP	R3B0		;GET HIGH ADDRESS
 2896:      0A37 50 01          	JNC	CSY2		;PROPAGATE THE CARRY
 2897:      0A39 0B             	INC	R3
 2898:      0A3A 81 E3          CSY2:	AJMP	ERPAR		;WASTE THE RIGHT PAREN
 2899:                          	;
 2900:                          	;**************************************
 2901:                          	;
 2902:                          	; The statement action routine FOR
 2903:                          	;
 2904:                          	;**************************************
 2905:                          	;
 2906:      0A3C 31 C6          SFOR:	ACALL	SLET1		;SET UP CONTROL VARIA
 2907:      0A3E C0 03          	PUSH	R3B0		;SAVE THE CONTROL VARIABLE L
 2908:      0A40 C0 01          	PUSH	R1B0
 2909:      0A42 F1 D3          	ACALL	POPAS		;POP ARG STACK AND COPY CO
 2910:      0A44 7F A6          	MOV	R7,#T_TO	;GET TO TOKEN
 2911:      0A46 F1 41          	ACALL	WE
 2912:      0A48 D1 CD          	ACALL	GC		;GET NEXT CHARACTER
 2913:      0A4A B4 A7 06       	CJNE	A,#T_STEP,SF2
 2914:      0A4D D1 D7          	ACALL	GCI1		;EAT THE TOKEN
 2915:      0A4F F1 43          	ACALL	EXPRB		;EVALUATE EXPRESSION
 2916:      0A51 80 03          	SJMP	SF21		;JUMP OVER
 2917:                          	;
 2918:      0A53 12 14 43       SF2:	LCALL	PUSH_ONE	;PUT ONE ON THE STAC
 2919:                          	;
 2920:      0A56 74 EF          SF21:	MOV	A,#-FSIZE	;ALLOCATE FSIZE BYTE
 2921:      0A58 71 B1          	ACALL	PUSHCS		;GET CS IN R0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 54



 Line    I  Addr Code           Source

 2922:      0A5A 71 BD          	ACALL	CSC		;CHECK CONTROL STACK
 2923:      0A5C 7B 00          	MOV	R3,#CSTKAH	;IN CONTROL STACK
 2924:      0A5E A9 00          	MOV	R1,R0B0 	;STACK ADDRESS
 2925:      0A60 F1 D3          	ACALL	POPAS		;PUT STEP ON STACK
 2926:      0A62 F1 D3          	ACALL	POPAS		;PUT LIMIT ON STACK
 2927:      0A64 D1 A2          	ACALL	DP_T		;DPTR GETS TEXT
 2928:      0A66 A8 01          	MOV	R0,R1B0 	;GET THE POINTER
 2929:      0A68 71 39          	ACALL	T_X_S		;SAVE THE TEXT
 2930:      0A6A D0 08          	POP	TXAL		;GET CONTROL VARIABLE
 2931:      0A6C D0 0A          	POP	TXAH
 2932:      0A6E 7C 01          	MOV	R4,#FTYPE	;AND THE TYPE
 2933:      0A70 71 39          	ACALL	T_X_S		;SAVE IT
 2934:                          	;
 2935:      0A72 D1 B8          SF3:	ACALL	T_DP		;GET THE TEXT POINTER
 2936:      0A74 01 13          	AJMP	ILOOP		;CONTINUE TO PROCESS
 2937:                          	;
 2938:                          	;**************************************
 2939:                          	;
 2940:                          	; The statement action routines - PUSH 
 2941:                          	;
 2942:                          	;**************************************
 2943:                          	;
 2944:      0A76 F1 43          SPUSH:	ACALL	EXPRB		;PUT EXPRESSION ON S
 2945:      0A78 D1 C6          	ACALL	C_TST		;SEE IF MORE TO DO
 2946:      0A7A 50 FA          	JNC	SPUSH		;IF A COMMA PUSH ANOTHER
 2947:      0A7C 22             	RET
 2948:                          	;
 2949:                          	;
 2950:      0A7D F1 01          SPOP:	ACALL	VAR_ER		;GET VARIABLE
 2951:      0A7F F1 D1          	ACALL	XPOP		;FLIP THE REGISTERS FOR POP
 2952:      0A81 D1 C6          	ACALL	C_TST		;SEE IF MORE TO DO
 2953:      0A83 50 F8          	JNC	SPOP
 2954:                          	;
 2955:      0A85 22             SPOP1:	RET
 2956:                          	;
 2957:                          	;**************************************
 2958:                          	;
 2959:                          	; The statement action routine - IF
 2960:                          	;
 2961:                          	;**************************************
 2962:                          	;
 2963:      0A86 51 C7          SIF:	ACALL	RTST		;EVALUATE THE EXPRESSIO
 2964:      0A88 F9             	MOV	R1,A		;SAVE THE RESULT
 2965:      0A89 D1 CD          	ACALL	GC		;GET THE CHARACTER AFTER EXPR
 2966:      0A8B B4 A5 02       	CJNE	A,#T_THEN,SIF1	;SEE IF THEN TOKEN
 2967:      0A8E D1 D7          	ACALL	GCI1		;WASTE THEN TOKEN
 2968:      0A90 B9 00 0B       SIF1:	CJNE	R1,#0,T_F1	;CHECK R_OP RESULT
 2969:                          	;
 2970:      0A93 7F A8          E_FIND: MOV	R7,#T_ELSE	;FIND ELSE TOKEN
 2971:      0A95 D1 EE          	ACALL	FINDC
 2972:      0A97 60 EC          	JZ	SPOP1		;EXIT IF A CR
 2973:      0A99 D1 D7          	ACALL	GCI1		;BUMP PAST TOKEN
 2974:      0A9B B4 A8 F5       	CJNE	A,#T_ELSE,E_FIND;WASTE IF NO ELSE
 2975:                          	;
 2976:      0A9E F1 35          T_F1:	ACALL	INTGER		;SEE IF NUMBER
 2977:      0AA0 50 56          	JNC	D_L1		;EXECUTE LINE NUMBER

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 55



 Line    I  Addr Code           Source

 2978:      0AA2 01 F8          	AJMP	ISTAT		;EXECUTE STATEMENT IN NOT
 2979:                          	;
 2980:      0AA4 E0             B_C:	MOVX	A,@DPTR
 2981:      0AA5 14             	DEC	A
 2982:      0AA6 20 E7 2E       	JB	ACC.7,FL11
 2983:      0AA9 22             	RET
 2984:                          	;
 2985:                          	;**************************************
 2986:                          	;
 2987:                          	; The statement action routine - GOTO
 2988:                          	;
 2989:                          	;**************************************
 2990:                          	;
 2991:      0AAA 51 F2          SGOTO:	ACALL	RLINE		;R2:R0 AND DPTR GET 
 2992:                          	;
 2993:      0AAC D1 B8          SGT1:	ACALL	T_DP		;TEXT POINTER GETS DPT
 2994:                          	;
 2995:      0AAE 10 25 08       	JBC	RETBIT,SGT2	;SEE IF RETI EXECUTED
 2996:                          	;
 2997:      0AB1 30 15 03       	JNB	LINEB,SGT11	;SEE IF A LINE WAS EDIT
 2998:      0AB4 12 06 62       	LCALL	CNEW1		;CLEAR THE MEMORY IF SET
 2999:      0AB7 01 11          SGT11:	AJMP	CILOOP1 	;CLEAR DIRF AND LOO
 3000:                          	;
 3001:      0AB9 10 14 05       SGT2:	JBC	OTI,SGT21	;SEE IF TIMER INTERR
 3002:      0ABC 53 22 BD       	ANL	34,#10111101B	;CLEAR INTERRUPTS
 3003:      0ABF 01 13          	AJMP	ILOOP		;EXECUTE
 3004:      0AC1 A2 2B          SGT21:	MOV	C,ISAV
 3005:      0AC3 92 11          	MOV	INPROG,C
 3006:      0AC5 01 13          	AJMP	ILOOP		;RESTORE INTERRUPTS AND RET
 3007:                          	;
 3008:                          	;
 3009:                          	;**************************************
 3010:                          	;
 3011:                          RTST:	; Test for ZERO
 3012:                          	;
 3013:                          	;**************************************
 3014:                          	;
 3015:      0AC7 F1 43          	ACALL	EXPRB		;EVALUATE EXPRESSION
 3016:      0AC9 12 12 4F       	CALL	INC_ASTKA	;BUMP ARG STACK
 3017:      0ACC 60 02          	JZ	RTST1		;EXIT WITH ZERO OR 0FFH
 3018:      0ACE 74 FF          	MOV	A,#0FFH
 3019:      0AD0 22             RTST1:	RET
 3020:                          	;
 3021:                          	;
 3022:                          	;**************************************
 3023:                          	;
 3024:                          	; GLN - get the line number in R2:R0, r
 3025:                          	;
 3026:                          	;**************************************
 3027:                          	;
 3028:      0AD1 D1 9B          GLN:	ACALL	DP_B		;GET THE BEGINNING ADDR
 3029:                          	;
 3030:      0AD3 E0             FL1:	MOVX	A,@DPTR 	;GET THE LENGTH
 3031:      0AD4 FF             	MOV	R7,A		;SAVE THE LENGTH
 3032:      0AD5 DF 05          	DJNZ	R7,FL3		;SEE IF END OF FILE
 3033:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 56



 Line    I  Addr Code           Source

 3034:      0AD7 90 1F B5       FL11:	MOV	DPTR,#E10X	;NO LINE NUMBER
 3035:      0ADA 81 0E          	AJMP	EK		;HANDLE THE ERROR
 3036:                          	;
 3037:      0ADC 20 E7 F8       FL3:	JB	ACC.7,FL11	;CHECK FOR BIT 7
 3038:      0ADF A3             	INC	DPTR		;POINT AT HIGH BYTE
 3039:      0AE0 E0             	MOVX	A,@DPTR 	;GET HIGH BYTE
 3040:      0AE1 B5 02 08       	CJNE	A,R2B0,FL2	;SEE IF MATCH
 3041:      0AE4 A3             	INC	DPTR		;BUMP TO LOW BYTE
 3042:      0AE5 1F             	DEC	R7		;ADJUST AGAIN
 3043:      0AE6 E0             	MOVX	A,@DPTR 	;GET THE LOW BYTE
 3044:      0AE7 B5 00 02       	CJNE	A,R0B0,FL2	;SEE IF LOW BYTE MATCH
 3045:      0AEA A3             	INC	DPTR		;POINT AT FIRST CHARACTER
 3046:      0AEB 22             	RET			;FOUND IT
 3047:                          	;
 3048:      0AEC EF             FL2:	MOV	A,R7		;GET THE LENGTH COUNTER
 3049:      0AED 12 05 DE       	CALL	ADDPTR		;ADD A TO DATA POINTER
 3050:      0AF0 80 E1          	SJMP	FL1		;LOOP
 3051:                          	;
 3052:                          	;
 3053:                          	;**************************************
 3054:                          	;
 3055:                          	;RLINE - Read in ASCII string, get line
 3056:                          	;
 3057:                          	;**************************************
 3058:                          	;
 3059:      0AF2 F1 30          RLINE:	ACALL	INTERR		;GET THE INTEGER
 3060:                          	;
 3061:      0AF4 51 D1          RL1:	ACALL	GLN
 3062:      0AF6 E1 17          	AJMP	CLN_UP
 3063:                          	;
 3064:                          	;
 3065:      0AF8 51 D1          D_L1:	ACALL	GLN		;GET THE LINE
 3066:      0AFA 41 AC          	AJMP	SGT1		;EXECUTE THE LINE
 3067:                          	;
 3068:                          	;**************************************
 3069:                          	;
 3070:                          	; The statement action routines WHILE a
 3071:                          	;
 3072:                          	;**************************************
 3073:                          	;
 3074:      0AFC 51 C7          SWHILE: ACALL	RTST		;EVALUATE RELATIONAL
 3075:      0AFE F4             	CPL	A
 3076:      0AFF 80 02          	SJMP	S_WU
 3077:                          	;
 3078:      0B01 51 C7          SUNTIL: ACALL	RTST		;EVALUATE RELATIONAL
 3079:                          	;
 3080:      0B03 7C 03          S_WU:	MOV	R4,#DTYPE	;DO EXPECTED
 3081:      0B05 FD             	MOV	R5,A		;SAVE R_OP RESULT
 3082:      0B06 80 0C          	SJMP	SR0		;GO PROCESS
 3083:                          	;
 3084:                          	;
 3085:                          	;**************************************
 3086:                          	;
 3087:                          CNULL:	; The Command Action Routine - NU
 3088:                          	;
 3089:                          	;**************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 57



 Line    I  Addr Code           Source

 3090:                          	;
 3091:      0B08 F1 30          	ACALL	INTERR		;GET AN INTEGER FOLLOWING
 3092:      0B0A 88 15          	MOV	NULLCT,R0	;SAVE THE NULLCOUNT
 3093:      0B0C 01 55          	AJMP	CMNDLK		;JUMP TO COMMAND MODE
 3094:                          	;
 3095:                          	;**************************************
 3096:                          	;
 3097:                          	; The statement action routine - RETI
 3098:                          	;
 3099:                          	;**************************************
 3100:                          	;
 3101:      0B0E D2 25          SRETI:	SETB	RETBIT		;SAYS THAT RETI HAS 
 3102:                          	;
 3103:                          	;**************************************
 3104:                          	;
 3105:                          	; The statement action routine - RETURN
 3106:                          	;
 3107:                          	;**************************************
 3108:                          	;
 3109:      0B10 7C 02          SRETRN: MOV	R4,#GTYPE	;MAKE SURE OF GOSU
 3110:      0B12 7D 55          	MOV	R5,#55H 	;TYPE RETURN TYPE
 3111:                          	;
 3112:      0B14 71 4B          SR0:	ACALL	CSETUP		;SET UP CONTROL STACK
 3113:      0B16 E2             	MOVX	A,@R0		;GET RETURN TEXT ADDRESS
 3114:      0B17 F5 83          	MOV	DPH,A
 3115:      0B19 08             	INC	R0
 3116:      0B1A E2             	MOVX	A,@R0
 3117:      0B1B F5 82          	MOV	DPL,A
 3118:      0B1D 08             	INC	R0		;POP CONTROL STACK
 3119:      0B1E E0             	MOVX	A,@DPTR 	;SEE IF GOSUB WAS THE LAS
 3120:      0B1F B4 01 02       	CJNE	A,#EOF,SR01
 3121:      0B22 01 55          	AJMP	CMNDLK
 3122:      0B24 ED             SR01:	MOV	A,R5		;GET TYPE
 3123:      0B25 60 85          	JZ	SGT1		;EXIT IF ZERO
 3124:      0B27 88 11          	MOV	CSTKA,R0	;POP THE STACK
 3125:      0B29 F4             	CPL	A		;OPTION TEST, 00H, 55H, 0FFH, NO
 3126:      0B2A 70 80          	JNZ	SGT1		;MUST BE GOSUB
 3127:      0B2C 22             	RET			;NORMAL FALL THRU EXIT FOR NO MAT
 3128:                          	;
 3129:                          	;**************************************
 3130:                          	;
 3131:                          	; The statement action routine - GOSUB
 3132:                          	;
 3133:                          	;**************************************
 3134:                          	;
 3135:      0B2D 51 F2          SGOSUB: ACALL	RLINE		;NEW TXA IN DPTR
 3136:                          	;
 3137:      0B2F 7C 02          SGS0:	MOV	R4,#GTYPE
 3138:      0B31 71 35          	ACALL	SGS1		;SET EVERYTHING UP
 3139:      0B33 41 72          	AJMP	SF3		;EXIT
 3140:                          	;
 3141:      0B35 74 FD          SGS1:	MOV	A,#-3		;ALLOCATE 3 BYTES ON CO
 3142:      0B37 71 B1          	ACALL	PUSHCS
 3143:                          	;
 3144:      0B39 75 A0 00       T_X_S:	MOV	P2,#CSTKAH	;SET UP PORT FOR C
 3145:      0B3C E5 08          	MOV	A,TXAL		;GET RETURN ADDRESS AND SAV

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 58



 Line    I  Addr Code           Source

 3146:      0B3E F2             	MOVX	@R0,A
 3147:      0B3F 18             	DEC	R0
 3148:      0B40 E5 0A          	MOV	A,TXAH
 3149:      0B42 F2             	MOVX	@R0,A
 3150:      0B43 18             	DEC	R0
 3151:      0B44 EC             	MOV	A,R4		;GET TYPE
 3152:      0B45 F2             	MOVX	@R0,A		;SAVE TYPE
 3153:      0B46 22             	RET			;EXIT
 3154:                          	;
 3155:                          	;
 3156:      0B47 74 03          CS1:	MOV	A,#3		;POP 3 BYTES
 3157:      0B49 71 B1          	ACALL	PUSHCS
 3158:                          	;
 3159:      0B4B A8 11          CSETUP: MOV	R0,CSTKA	;GET CONTROL STACK
 3160:      0B4D 75 A0 00       	MOV	P2,#CSTKAH
 3161:      0B50 E2             	MOVX	A,@R0		;GET BYTE
 3162:      0B51 B5 04 02       	CJNE	A,R4B0,CSETUP1	;SEE IF TYPE MATCH
 3163:      0B54 08             	INC	R0
 3164:      0B55 22             	RET
 3165:      0B56 60 69          CSETUP1:JZ	E4XX		;EXIT IF STACK UNDERFLO
 3166:      0B58 B4 01 EC       	CJNE	A,#FTYPE,CS1	;SEE IF FOR TYPE
 3167:      0B5B 71 AF          	ACALL	XXI3		;WASTE THE FOR TYPE
 3168:      0B5D 80 EC          	SJMP	CSETUP		;LOOP
 3169:                          	;
 3170:                          	;**************************************
 3171:                          	;
 3172:                          	; The statement action routine - NEXT
 3173:                          	;
 3174:                          	;**************************************
 3175:                          	;
 3176:      0B5F 7C 01          SNEXT:	MOV	R4,#FTYPE	;FOR TYPE
 3177:      0B61 71 4B          	ACALL	CSETUP		;SETUP CONTROL STACK
 3178:      0B63 88 0F          	MOV	TEMP5,R0	;SAVE CONTROL VARIABLE ADD
 3179:      0B65 79 0B          	MOV	R1,#TEMP1	;SAVE VAR + RETURN IN TEM
 3180:                          	;
 3181:      0B67 E2             XXI:	MOVX	A,@R0		;LOOP UNTIL DONE
 3182:      0B68 F7             	MOV	@R1,A
 3183:      0B69 09             	INC	R1
 3184:      0B6A 08             	INC	R0
 3185:      0B6B B9 0F F9       	CJNE	R1,#TEMP5,XXI
 3186:                          	;
 3187:      0B6E B1 65          	ACALL	VAR		;SEE IF THE USER HAS A VARIA
 3188:      0B70 50 04          	JNC	XXI1
 3189:      0B72 AA 0B          	MOV	R2,TEMP1
 3190:      0B74 A8 0C          	MOV	R0,TEMP2
 3191:      0B76 EA             XXI1:	MOV	A,R2		;SEE IF VAR'S AGREE
 3192:      0B77 B5 0B 47       	CJNE	A,TEMP1,E4XX
 3193:      0B7A E8             	MOV	A,R0
 3194:      0B7B B5 0C 43       	CJNE	A,TEMP2,E4XX
 3195:      0B7E F1 DD          	ACALL	PUSHAS		;PUT CONTROL VARIABLE ON 
 3196:      0B80 74 0E          	MOV	A,#FPSIZ+FPSIZ+2;COMPUTE ADDRESS TO
 3197:      0B82 25 0F          	ADD	A,TEMP5 	;ADD IT TO BASE OF STACK
 3198:      0B84 F8             	MOV	R0,A		;SAVE IN R0
 3199:      0B85 7A 00          	MOV	R2,#CSTKAH	;SET UP TO PUSH STEP VAL
 3200:      0B87 8A A0          	MOV	P2,R2		;SET UP PORT
 3201:      0B89 E2             	MOVX	A,@R0		;GET SIGN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 59



 Line    I  Addr Code           Source

 3202:      0B8A 08             	INC	R0		;BACK TO EXPONENT
 3203:      0B8B C0 E0          	PUSH	ACC		;SAVE SIGN OF STEP
 3204:      0B8D F1 DD          	ACALL	PUSHAS		;PUT STEP VALUE ON STACK
 3205:      0B8F C0 00          	PUSH	R0B0		;SAVE LIMIT VALUE LOCATION
 3206:      0B91 12 17 41       	CALL	AADD		;ADD STEP VALUE TO VARIABLE
 3207:      0B94 12 14 2C       	CALL	CSTAKA		;COPY STACK
 3208:      0B97 AB 0B          	MOV	R3,TEMP1	;GET CONTROL VARIABLE
 3209:      0B99 A9 0C          	MOV	R1,TEMP2
 3210:      0B9B F1 D3          	ACALL	POPAS		;SAVE THE RESULT
 3211:      0B9D 7A 00          	MOV	R2,#CSTKAH	;RESTORE LIMIT LOCATION
 3212:      0B9F D0 00          	POP	R0B0
 3213:      0BA1 F1 DD          	ACALL	PUSHAS		;PUT LIMIT ON STACK
 3214:      0BA3 12 19 73       	CALL	FP_BASE2	;DO THE COMPARE
 3215:      0BA6 D0 E0          	POP	ACC		;GET LIMIT SIGN BACK
 3216:      0BA8 60 01          	JZ	XXI2		;IF SIGN NEGATIVE, TEST "BACKW
 3217:      0BAA B3             	CPL	C
 3218:      0BAB 72 D5          XXI2:	ORL	C,F0		;SEE IF EQUAL
 3219:      0BAD 40 17          	JC	N4		;STILL SMALLER THAN LIMIT?
 3220:      0BAF 74 11          XXI3:	MOV	A,#FSIZE	;REMOVE CONTROL STACK
 3221:                          	;
 3222:                          	; Fall thru to PUSHCS
 3223:                          	;
 3224:                          	;**************************************
 3225:                          	;
 3226:                          	; PUSHCS - push frame onto control stac
 3227:                          	;	   acc has - number of bytes, also te
 3228:                          	;
 3229:                          	;**************************************
 3230:                          	;
 3231:      0BB1 25 11          PUSHCS: ADD	A,CSTKA 	;BUMP CONTROL STACK
 3232:      0BB3 B4 61 00       	CJNE	A,#CONVT+17,PUSHCS1 ;SEE IF OVERFL
 3233:      0BB6 40 09          PUSHCS1:JC	E4XX		;EXIT IF STACK OVERFLOW
 3234:      0BB8 C5 11          	XCH	A,CSTKA 	;STORE NEW CONTROL STACK V
 3235:      0BBA 14             	DEC	A		;BUMP OLD VALUE
 3236:      0BBB F8             	MOV	R0,A		;PUT OLD-1 IN R0
 3237:                          	;
 3238:      0BBC 22             PUSHCS2:RET			;EXIT
 3239:                          	;
 3240:      0BBD F1 17          CSC:	ACALL	CLN_UP		;FINISH OFF THE LINE
 3241:      0BBF 50 FB          	JNC	PUSHCS2 	;EXIT IF NO TERMINATOR
 3242:                          	;
 3243:      0BC1 90 03 83       E4XX:	MOV	DPTR,#EXC	;CONTROL STACK ERROR
 3244:      0BC4 81 0E          	AJMP	EK		;STACK ERROR
 3245:                          	;
 3246:      0BC6 85 0D 0A       N4:	MOV	TXAH,TEMP3	;GET TEXT POINTER
 3247:      0BC9 85 0E 08       	MOV	TXAL,TEMP4
 3248:      0BCC 01 13          	AJMP	ILOOP		;EXIT
 3249:                          	;
 3250:                          	;**************************************
 3251:                          	;
 3252:                          	; The statement action routine - RESTOR
 3253:                          	;
 3254:                          	;**************************************
 3255:                          	;
 3256:      0BCE 71 D6          SRESTR: ACALL	X_TR		;SWAP POINTERS
 3257:      0BD0 D1 9B          SRESTR1:ACALL	DP_B		;GET THE STARTING AD

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 60



 Line    I  Addr Code           Source

 3258:      0BD2 D1 B8          	ACALL	T_DP		;PUT STARTING ADDRESS IN TE
 3259:      0BD4 F1 23          	ACALL	B_TXA		;BUMP TXA
 3260:                          	;
 3261:                          	; Fall thru
 3262:                          	;
 3263:                          X_TR:	;swap txa and rtxa
 3264:                          	;
 3265:      0BD6 C5 0A          	XCH	A,TXAH
 3266:      0BD8 C5 12          	XCH	A,RTXAH
 3267:      0BDA C5 0A          	XCH	A,TXAH
 3268:      0BDC C5 08          	XCH	A,TXAL
 3269:      0BDE C5 10          	XCH	A,RTXAL
 3270:      0BE0 C5 08          	XCH	A,TXAL
 3271:      0BE2 22             	RET			;EXIT
 3272:                          	;
 3273:                          	;**************************************
 3274:                          	;
 3275:                          	; The statement action routine - READ
 3276:                          	;
 3277:                          	;**************************************
 3278:                          	;
 3279:      0BE3 71 D6          SREAD:	ACALL	X_TR		;SWAP POINTERS
 3280:                          	;
 3281:      0BE5 D1 C6          SRD0:	ACALL	C_TST		;CHECK FOR COMMA
 3282:      0BE7 40 16          	JC	SRD4		;SEE WHAT IT IS
 3283:                          	;
 3284:      0BE9 F1 43          SRD:	ACALL	EXPRB		;EVALUATE THE EXPRESSI
 3285:      0BEB D1 CD          	ACALL	GC		;GET THE CHARACTER AFTER EXPR
 3286:      0BED B4 2C 02       	CJNE	A,#',',SRD1     ;SEE IF MORE DATA
 3287:      0BF0 80 02          	SJMP	SRD2		;BYBASS CLEAN UP IF A COMMA
 3288:                          	;
 3289:      0BF2 F1 17          SRD1:	ACALL	CLN_UP		;FINISH OFF THE LINE
 3290:                          	;
 3291:      0BF4 71 D6          SRD2:	ACALL	X_TR		;RESTORE POINTERS
 3292:      0BF6 F1 01          	ACALL	VAR_ER		;GET VARIABLE ADDRESS
 3293:      0BF8 F1 D1          	ACALL	XPOP		;FLIP THE REGISTERS FOR POP
 3294:      0BFA D1 C6          	ACALL	C_TST		;SEE IF A COMMA
 3295:      0BFC 50 E5          	JNC	SREAD		;READ AGAIN IF A COMMA
 3296:      0BFE 22             SRD21:	RET			;EXIT IF NOT
 3297:                          	;
 3298:      0BFF B4 9C 04       SRD4:	CJNE	A,#T_DATA,SRD5	;SEE IF DATA
 3299:      0C02 D1 D7          	ACALL	GCI1		;BUMP POINTER
 3300:      0C04 80 E3          	SJMP	SRD
 3301:                          	;
 3302:      0C06 B4 01 08       SRD5:	CJNE	A,#EOF,SRD6	;SEE IF YOU BLEW 
 3303:      0C09 71 D6          SRD51:	ACALL	X_TR		;GET THE TEXT POINTER
 3304:      0C0B 90 1F 81       	MOV	DPTR,#E14X	;READ ERROR
 3305:                          	;
 3306:      0C0E 02 18 8F       EK:	LJMP	ERROR
 3307:                          	;
 3308:      0C11 D1 EC          SRD6:	ACALL	FINDCR		;WASTE THIS LINE
 3309:      0C13 F1 17          	ACALL	CLN_UP		;CLEAN IT UP
 3310:      0C15 40 F2          	JC	SRD51		;ERROR IF AT END
 3311:      0C17 80 CC          	SJMP	SRD0
 3312:                          	;
 3313:      0C19 D1 CD          NUMC:	ACALL	GC		;GET A CHARACTER

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 61



 Line    I  Addr Code           Source

 3314:      0C1B B4 23 04       	CJNE	A,#'#',NUMC1    ;SEE IF A #
 3315:      0C1E D2 1B          	SETB	COB		;VALID LINE PRINT
 3316:      0C20 C1 CB          	AJMP	IGC		;BUMP THE TEXT POINTER
 3317:                          	;
 3318:      0C22 B4 40 D9       NUMC1:	CJNE	A,#'@',SRD21    ;EXIT IF NO 
 3319:      0C25 D2 19          	SETB	LPB
 3320:      0C27 C1 CB          	AJMP	IGC
 3321:                          	;
 3322:                          	;**************************************
 3323:                          	;
 3324:                          	; The statement action routine - PRINT
 3325:                          	;
 3326:                          	;**************************************
 3327:                          	;
 3328:      0C29 D2 36          SPH0:	SETB	ZSURP		;NO ZEROS
 3329:                          	;
 3330:      0C2B D2 37          SPH1:	SETB	HMODE		;HEX MODE
 3331:                          	;
 3332:      0C2D 91 19          SPRINT: ACALL	NUMC		;TEST FOR A LINE PRI
 3333:      0C2F 91 38          	ACALL	SPRINT2 	;PROCEED
 3334:      0C31 53 23 F5       SPRINT1:ANL	35,#11110101B	;CLEAR COB AND
 3335:      0C34 53 26 3F       	ANL	38,#00111111B	;NO HEX MODE
 3336:                          	;
 3337:      0C37 22             	RET
 3338:                          	;
 3339:      0C38 D1 E1          SPRINT2:ACALL	DELTST		;CHECK FOR A DELIM
 3340:      0C3A 40 07          	JC	SP1
 3341:                          	;
 3342:      0C3C 02 06 A5       SP0:	JMP	CRLF		;EXIT WITH A CR IF SO
 3343:                          	;
 3344:      0C3F D1 C6          SP2:	ACALL	C_TST		;CHECK FOR A COMMA
 3345:      0C41 40 F9          	JC	SP0		;EXIT IF NO COMMA
 3346:                          	;
 3347:      0C43 D1 A9          SP1:	ACALL	CPS		;SEE IF A STRING TO PRIN
 3348:      0C45 50 F8          	JNC	SP2		;IF A STRING, CHECK FOR A COMM
 3349:                          	;
 3350:      0C47 B4 A4 08       SP4:	CJNE	A,#T_TAB,SP6
 3351:      0C4A D1 95          	ACALL	I_PI		;ALWAYS CLEARS CARRY
 3352:      0C4C 95 16          	SUBB	A,PHEAD 	;TAKE DELTA BETWEEN TAB A
 3353:      0C4E 40 EF          	JC	SP2		;EXIT IF PHEAD > TAB
 3354:      0C50 80 05          	SJMP	SP7		;OUTPUT SPACES
 3355:                          	;
 3356:      0C52 B4 A9 0A       SP6:	CJNE	A,#T_SPC,SM
 3357:      0C55 D1 95          	ACALL	I_PI		;SET UP PAREN VALUE
 3358:                          	;
 3359:      0C57 60 E6          SP7:	JZ	SP2
 3360:      0C59 12 07 0F       	LCALL	STEROT		;OUTPUT A SPACE
 3361:      0C5C 14             	DEC	A		;DECREMENT COUNTER
 3362:      0C5D 80 F8          	SJMP	SP7		;LOOP
 3363:                          	;
 3364:      0C5F B4 D3 13       SM:	CJNE	A,#T_CHR,SP8
 3365:      0C62 D1 CB          	ACALL	IGC
 3366:      0C64 B4 24 06       	CJNE	A,#'$',SM01
 3367:      0C67 F1 F9          	ACALL	CNX		;PUT THE CHARACTER ON THE ST
 3368:      0C69 D1 90          	ACALL	IFIXL		;PUT THE CHARACTER IN R1
 3369:      0C6B 80 04          	SJMP	SM02

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 62



 Line    I  Addr Code           Source

 3370:      0C6D D1 8E          SM01:	ACALL	ONE		;EVALUATE THE EXPRESSIO
 3371:      0C6F 91 E3          	ACALL	ERPAR
 3372:      0C71 AD 01          SM02:	MOV	R5,R1B0 	;BYTE TO OUTPUT
 3373:      0C73 80 07          	SJMP	SQ
 3374:                          	;
 3375:      0C75 B4 AA 09       SP8:	CJNE	A,#T_CR,SX
 3376:      0C78 D1 D7          	ACALL	GCI1		;EAT THE TOKEN
 3377:      0C7A 7D 0D          	MOV	R5,#CR
 3378:                          	;
 3379:      0C7C 12 07 11       SQ:	CALL	TEROT
 3380:      0C7F 80 BE          	SJMP	SP2		;OUTPUT A CR AND DO IT AGAIN
 3381:                          	;
 3382:      0C81 B4 D2 53       SX:	CJNE	A,#T_USE,SP9	;USING TOKEN
 3383:      0C84 D1 CB          	ACALL	IGC		;GE THE CHARACTER AFTER THE 
 3384:      0C86 B4 46 16       	CJNE	A,#'F',U4       ;SEE IF FLOATING
 3385:      0C89 75 17 F0       	MOV	FORMAT,#0F0H	;SET FLOATING
 3386:      0C8C D1 CB          	ACALL	IGC		;BUMP THE POINTER AND GET TH
 3387:      0C8E D1 D7          	ACALL	GCI1		;BUMP IT AGAIN
 3388:      0C90 54 0F          	ANL	A,#0FH		;STRIP OFF ASCII BIAS
 3389:      0C92 60 07          	JZ	U3		;EXIT IF ZERO
 3390:      0C94 B4 03 00       	CJNE	A,#3,SX1	;SEE IF AT LEAST A THREE
 3391:      0C97 50 02          SX1:	JNC	U3		;FORCE A THREE IF NOT A THR
 3392:      0C99 74 03          	MOV	A,#3
 3393:                          	;
 3394:      0C9B 42 17          U3:	ORL	FORMAT,A	;PUT DIGIT IN FORMAT
 3395:      0C9D 80 2A          	SJMP	U8		;CLEAN UP END
 3396:                          	;
 3397:      0C9F B4 30 07       U4:	CJNE	A,#'0',U5
 3398:      0CA2 75 17 00       	MOV	FORMAT,#0	;FREE FORMAT
 3399:      0CA5 D1 D7          	ACALL	GCI1		;BUMP THE POINTER
 3400:      0CA7 80 20          	SJMP	U8
 3401:                          	;
 3402:      0CA9 B4 23 1D       U5:	CJNE	A,#'#',U8       ;SEE IF INTGER 
 3403:      0CAC 91 CD          	ACALL	U6
 3404:      0CAE 8F 17          	MOV	FORMAT,R7	;SAVE THE FORMAT
 3405:      0CB0 B4 2E 11       	CJNE	A,#'.',U8A      ;SEE IF TERMINATOR
 3406:      0CB3 D1 CB          	ACALL	IGC		;BUMP PAST .
 3407:      0CB5 91 CD          	ACALL	U6		;LOOP AGAIN
 3408:      0CB7 EF             	MOV	A,R7		;GET COUNT
 3409:      0CB8 25 17          	ADD	A,FORMAT	;SEE IF TOO BIG
 3410:      0CBA 24 F7          	ADD	A,#0F7H
 3411:      0CBC 50 02          	JNC	U5A
 3412:                          	;
 3413:      0CBE 21 38          SE0:	AJMP	INTERX		;ERROR, BAD SYNTAX
 3414:                          	;
 3415:      0CC0 EF             U5A:	MOV	A,R7		;GET THE COUNT BACK
 3416:      0CC1 C4             	SWAP	A		;ADJUST
 3417:      0CC2 42 17          	ORL	FORMAT,A	;GET THE COUNT
 3418:                          	;
 3419:      0CC4 E5 17          U8A:	MOV	A,FORMAT
 3420:                          	;
 3421:      0CC6 C4             U8B:	SWAP	A		;GET THE FORMAT RIGHT
 3422:      0CC7 F5 17          	MOV	FORMAT,A
 3423:                          	;
 3424:      0CC9 91 E3          U8:	ACALL	ERPAR
 3425:      0CCB 81 3F          	AJMP	SP2		;DONE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 63



 Line    I  Addr Code           Source

 3426:                          	;
 3427:      0CCD 7F 00          U6:	MOV	R7,#0		;SET COUNTER
 3428:                          	;
 3429:      0CCF B4 23 0C       U7:	CJNE	A,#'#',SP9A     ;EXIT IF NOT A 
 3430:      0CD2 0F             	INC	R7		;BUMP COUNTER
 3431:      0CD3 D1 CB          	ACALL	IGC		;GET THE NEXT CHARACTER
 3432:      0CD5 80 F8          	SJMP	U7		;LOOP
 3433:                          	;
 3434:      0CD7 D1 E3          SP9:	ACALL	DELTST1 	;CHECK FOR DELIMITER
 3435:      0CD9 50 03          	JNC	SP9A		;EXIT IF A DELIMITER
 3436:                          	;
 3437:      0CDB B4 A8 34       	CJNE	A,#T_ELSE,SS
 3438:                          	;
 3439:      0CDE 22             SP9A:	RET			;EXIT IF ELSE TOKEN
 3440:                          	;
 3441:                          	;**************************************
 3442:                          	;
 3443:                          	; P_E - Evaluate an expression in paren
 3444:                          	;
 3445:                          	;**************************************
 3446:                          	;
 3447:      0CDF 7F E0          P_E:	MOV	R7,#T_LPAR
 3448:      0CE1 F1 41          	ACALL	WE
 3449:                          	;
 3450:      0CE3 7F 29          ERPAR:	MOV	R7,#')'         ;EAT A RIGHT 
 3451:                          	;
 3452:      0CE5 D1 D5          EATC:	ACALL	GCI		;GET THE CHARACTER
 3453:      0CE7 B5 07 D4       	CJNE	A,R7B0,SE0	;ERROR IF NOT THE SAME
 3454:      0CEA 22             	RET
 3455:                          	;
 3456:                          	;**************************************
 3457:                          	;
 3458:                          S_ON:	; ON Statement
 3459:                          	;
 3460:                          	;**************************************
 3461:                          	;
 3462:      0CEB D1 8E          	ACALL	ONE		;GET THE EXPRESSION
 3463:      0CED D1 D5          	ACALL	GCI		;GET THE NEXT CHARACTER
 3464:      0CEF B4 83 04       	CJNE	A,#T_GOTO,C0
 3465:      0CF2 91 FD          	ACALL	C1		;EAT THE COMMAS
 3466:      0CF4 41 72          	AJMP	SF3		;DO GOTO
 3467:                          	;
 3468:      0CF6 B4 9F C5       C0:	CJNE	A,#T_GOSB,SE0
 3469:      0CF9 91 FD          	ACALL	C1
 3470:      0CFB 61 2F          	AJMP	SGS0		;DO GOSUB
 3471:                          	;
 3472:      0CFD B9 00 06       C1:	CJNE	R1,#0,C2
 3473:      0D00 F1 30          	ACALL	INTERR		;GET THE LINE NUMBER
 3474:      0D02 D1 EC          	ACALL	FINDCR
 3475:      0D04 41 F4          	AJMP	RL1		;FINISH UP THIS LINE
 3476:                          	;
 3477:      0D06 7F 2C          C2:	MOV	R7,#','
 3478:      0D08 D1 EE          	ACALL	FINDC
 3479:      0D0A B4 2C B1       	CJNE	A,#',',SE0      ;ERROR IF NOT A CO
 3480:      0D0D 19             	DEC	R1
 3481:      0D0E D1 D7          	ACALL	GCI1		;BUMP PAST COMMA

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 64



 Line    I  Addr Code           Source

 3482:      0D10 80 EB          	SJMP	C1
 3483:                          	;
 3484:      0D12 D1 BF          SS:	ACALL	S_C		;SEE IF A STRING
 3485:      0D14 40 05          	JC	SA		;NO STRING IF CARRY IS SET
 3486:      0D16 12 06 BF       	LCALL	UPRNT		;PUT POINTER IN DPTR
 3487:      0D19 81 3F          	AJMP	SP2		;SEE IF MORE
 3488:                          	;
 3489:      0D1B F1 43          SA:	ACALL	EXPRB		;MUST BE AN EXPRESSION
 3490:      0D1D 74 48          	MOV	A,#72
 3491:      0D1F B5 16 00       	CJNE	A,PHEAD,SA1	;CHECK PHEAD POSITION
 3492:      0D22 50 02          SA1:	JNC	SA2
 3493:      0D24 91 3C          	ACALL	SP0		;FORCE A CRLF
 3494:      0D26 30 37 14       SA2:	JNB	HMODE,S13	;HEX MODE?
 3495:      0D29 12 12 02       	CALL	FCMP		;SEE IF TOS IS < 0FFFH
 3496:      0D2C 40 0F          	JC	S13		;EXIT IF GREATER
 3497:      0D2E 12 13 8F       	CALL	AABS		;GET THE SIGN
 3498:      0D31 70 07          	JNZ	OOPS		;WASTE IF NEGATIVE
 3499:      0D33 D1 90          	ACALL	IFIXL
 3500:      0D35 12 19 85       	CALL	FP_BASE11	;PRINT HEXMODE
 3501:      0D38 81 3F          	AJMP	SP2
 3502:      0D3A 12 13 A1       OOPS:	CALL	ANEG		;MAKE IT NEGATIVE
 3503:                          	;
 3504:      0D3D 12 19 7D       S13:	CALL	FP_BASE7	;DO FP OUTPUT
 3505:      0D40 74 01          	MOV	A,#1		;OUTPUT A SPACE
 3506:      0D42 81 57          	AJMP	SP7
 3507:                          	;
 3508:                          	;**************************************
 3509:                          	;
 3510:                          	; ANU -  Get variable name from text - 
 3511:                          	;	 if succeeds returns variable in R7:R
 3512:                          	;	 R6 = 0 if no digit in name
 3513:                          	;
 3514:                          	;**************************************
 3515:                          	;
 3516:      0D44 D1 CB          ANU:	ACALL	IGC		;INCREMENT AND GET CHARA
 3517:      0D46 12 1F ED       	LCALL	DIGIT_CHECK	;CHECK FOR DIGIT
 3518:      0D49 40 0C          	JC	AL2		;EXIT IF VALID DIGIT
 3519:      0D4B B4 5F 01       	CJNE	A,#'_',AL       ;SEE IF A _
 3520:      0D4E 22             	RET
 3521:                          	;
 3522:      0D4F B4 41 00       AL:	CJNE	A,#'A',AL1      ;IS IT AN ASCII
 3523:      0D52 40 04          AL1:	JC	AL3		;EXIT IF CARRY IS SET
 3524:      0D54 B4 5B 00       	CJNE	A,#'Z'+1,AL2    ;IS IT LESS THAN A
 3525:      0D57 B3             AL2:	CPL	C		;FLIP CARRY
 3526:      0D58 22             AL3:	RET
 3527:                          	;
 3528:      0D59 30 D5 3E       SD01:	JNB	F0,VAR2
 3529:                          	;
 3530:      0D5C 90 17 61       SD0:	MOV	DPTR,#E6X
 3531:      0D5F 81 0E          	AJMP	EK
 3532:                          	;
 3533:      0D61 D2 D5          SDIMX:	SETB	F0		;SAYS DOING A DIMENSION
 3534:      0D63 80 02          	SJMP	VAR1
 3535:                          	;
 3536:      0D65 C2 D5          VAR:	CLR	F0		;SAYS DOING A VARIABLE
 3537:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 65



 Line    I  Addr Code           Source

 3538:      0D67 D1 CD          VAR1:	ACALL	GC		;GET THE CHARACTER
 3539:      0D69 B1 4F          	ACALL	AL		;CHECK FOR ALPHA
 3540:      0D6B 50 04          	JNC	VAR11		;ERROR IF IN DIM
 3541:      0D6D 20 D5 EC       	JB	F0,SD0
 3542:      0D70 22             	RET
 3543:      0D71 FF             VAR11:	MOV	R7,A		;SAVE ALPHA CHARACTER
 3544:      0D72 E4             	CLR	A		;ZERO IN CASE OF FAILURE
 3545:      0D73 FD             	MOV	R5,A		;SAVE IT
 3546:                          	;
 3547:      0D74 FE             VY:	MOV	R6,A
 3548:      0D75 B1 44          	ACALL	ANU		;CHECK FOR ALPHA OR NUMBER
 3549:      0D77 40 07          	JC	VX		;EXIT IF NO ALPHA OR NUM
 3550:                          	;
 3551:      0D79 CF             	XCH	A,R7
 3552:      0D7A 2D             	ADD	A,R5		;NUMBER OF CHARACTERS IN ALPH
 3553:      0D7B CF             	XCH	A,R7		;PUT IT BACK
 3554:      0D7C 7D 1A          	MOV	R5,#26		;FOR THE SECOND TIME AROUND
 3555:      0D7E 80 F4          	SJMP	VY
 3556:                          	;
 3557:      0D80 C2 15          VX:	CLR	LINEB		;TELL EDITOR A VARIABLE I
 3558:      0D82 B4 E0 2F       	CJNE	A,#T_LPAR,V4	;SEE IF A LEFT PAREN
 3559:                          	;
 3560:      0D85 43 06 80       	ORL	R6B0,#80H	;SET BIT 7 TO SIGINIFY MA
 3561:      0D88 12 06 19       	CALL	F_VAR		;FIND THE VARIABLE
 3562:      0D8B C0 02          	PUSH	R2B0		;SAVE THE LOCATION
 3563:      0D8D C0 00          	PUSH	R0B0
 3564:      0D8F 50 C8          	JNC	SD01		;DEFAULT IF NOT IN TABLE
 3565:      0D91 20 D5 28       	JB	F0,SDI		;NO DEFAULT FOR DIMENSION
 3566:      0D94 79 0A          	MOV	R1,#10
 3567:      0D96 7B 00          	MOV	R3,#0
 3568:      0D98 B1 CC          	ACALL	D_CHK
 3569:                          	;
 3570:      0D9A D1 97          VAR2:	ACALL	PAREN_INT	;EVALUATE INTEGER 
 3571:      0D9C BB 00 BD       	CJNE	R3,#0,SD0	;ERROR IF R3<>0
 3572:      0D9F D0 82          	POP	DPL		;GET VAR FOR LOOKUP
 3573:      0DA1 D0 83          	POP	DPH
 3574:      0DA3 E0             	MOVX	A,@DPTR 	;GET DIMENSION
 3575:      0DA4 14             	DEC	A		;BUMP OFFSET
 3576:      0DA5 99             	SUBB	A,R1		;A MUST BE > R1
 3577:      0DA6 40 B4          	JC	SD0
 3578:      0DA8 12 05 C0       	LCALL	DECDP2		;BUMP POINTER TWICE
 3579:      0DAB 51 0D          	ACALL	VARB		;CALCULATE THE BASE
 3580:                          	;
 3581:      0DAD C9             X3120:	XCH	A,R1		;SWAP R2:R0, R3:R1
 3582:      0DAE C8             	XCH	A,R0
 3583:      0DAF C9             	XCH	A,R1
 3584:      0DB0 CB             	XCH	A,R3
 3585:      0DB1 CA             	XCH	A,R2
 3586:      0DB2 CB             	XCH	A,R3
 3587:      0DB3 22             	RET
 3588:                          	;
 3589:      0DB4 20 D5 A5       V4:	JB	F0,SD0		;ERROR IF NO LPAR FOR DIM
 3590:      0DB7 12 06 19       	LCALL	F_VAR		;GET SCALAR VARIABLE
 3591:      0DBA C3             	CLR	C
 3592:      0DBB 22             	RET
 3593:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 66



 Line    I  Addr Code           Source

 3594:      0DBC D1 97          SDI:	ACALL	PAREN_INT	;EVALUATE PAREN EXP
 3595:      0DBE BB 00 9B       	CJNE	R3,#0,SD0	;ERROR IF NOT ZERO
 3596:      0DC1 D0 00          	POP	R0B0		;SET UP R2:R0
 3597:      0DC3 D0 02          	POP	R2B0
 3598:      0DC5 B1 CC          	ACALL	D_CHK		;DO DIM
 3599:      0DC7 D1 C6          	ACALL	C_TST		;CHECK FOR COMMA
 3600:      0DC9 50 96          	JNC	SDIMX		;LOOP IF COMMA
 3601:      0DCB 22             	RET			;RETURN IF NO COMMA
 3602:                          	;
 3603:      0DCC 09             D_CHK:	INC	R1		;BUMP FOR TABLE LOOKUP
 3604:      0DCD E9             	MOV	A,R1
 3605:      0DCE 60 8C          	JZ	SD0		;ERROR IF 0FFFFH
 3606:      0DD0 FC             	MOV	R4,A		;SAVE FOR LATER
 3607:      0DD1 90 01 08       	MOV	DPTR,#MT_ALL	;GET MATRIX ALLOCATION
 3608:      0DD4 51 0D          	ACALL	VARB		;DO THE CALCULATION
 3609:      0DD6 AF 83          	MOV	R7,DPH		;SAVE MATRIX ALLOCATION
 3610:      0DD8 AE 82          	MOV	R6,DPL
 3611:      0DDA 90 01 06       	MOV	DPTR,#ST_ALL	;SEE IF TOO MUCH MEMOR
 3612:      0DDD 12 15 B0       	CALL	FUL1		;ST_ALL SHOULD BE > R3:R1
 3613:      0DE0 90 01 08       	MOV	DPTR,#MT_ALL	;SAVE THE NEW MATRIX P
 3614:      0DE3 12 06 05       	CALL	S31DP
 3615:      0DE6 88 82          	MOV	DPL,R0		;GET VARIABLE ADDRESS
 3616:      0DE8 8A 83          	MOV	DPH,R2
 3617:      0DEA EC             	MOV	A,R4		;DIMENSION SIZE
 3618:      0DEB F0             	MOVX	@DPTR,A 	;SAVE IT
 3619:      0DEC 12 05 C0       	CALL	DECDP2		;SAVE TARGET ADDRESS
 3620:                          	;
 3621:      0DEF EF             R76S:	MOV	A,R7
 3622:      0DF0 F0             	MOVX	@DPTR,A
 3623:      0DF1 A3             	INC	DPTR
 3624:      0DF2 EE             	MOV	A,R6		;ELEMENT SIZE
 3625:      0DF3 F0             	MOVX	@DPTR,A
 3626:      0DF4 22             	RET			;R2:R0 STILL HAS SYMBOL TABLE ADD
 3627:                          	;
 3628:                          	;**************************************
 3629:                          	;
 3630:                          	; The statement action routine - INPUT
 3631:                          	;
 3632:                          	;**************************************
 3633:                          	;
 3634:      0DF5 D1 A9          SINPUT: ACALL	CPS		;PRINT STRING IF THER
 3635:                          	;
 3636:      0DF7 D1 C6          	ACALL	C_TST		;CHECK FOR A COMMA
 3637:      0DF9 50 07          	JNC	IN2A		;NO CRLF
 3638:      0DFB 91 3C          	ACALL	SP0		;DO A CRLF
 3639:                          	;
 3640:      0DFD 7D 3F          IN2:	MOV	R5,#'?'         ;OUTPUT A ?
 3641:      0DFF 12 07 11       	CALL	TEROT
 3642:                          	;
 3643:      0E02 D2 22          IN2A:	SETB	INP_B		;DOING INPUT
 3644:      0E04 12 06 D8       	CALL	INLINE		;INPUT THE LINE
 3645:      0E07 C2 22          	CLR	INP_B
 3646:      0E09 75 0F 00       	MOV	TEMP5,#HIGH IBUF
 3647:      0E0C 75 0E 07       	MOV	TEMP4,#LOW IBUF
 3648:                          	;
 3649:      0E0F D1 BF          IN3:	ACALL	S_C		;SEE IF A STRING

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 67



 Line    I  Addr Code           Source

 3650:      0E11 40 0D          	JC	IN3A		;IF CARRY IS SET, NO STRING
 3651:      0E13 B1 AD          	ACALL	X3120		;FLIP THE ADDRESSES
 3652:      0E15 AB 0F          	MOV	R3,TEMP5
 3653:      0E17 A9 0E          	MOV	R1,TEMP4
 3654:      0E19 31 9D          	ACALL	SSOOP
 3655:      0E1B D1 C6          	ACALL	C_TST		;SEE IF MORE TO DO
 3656:      0E1D 50 DE          	JNC	IN2
 3657:      0E1F 22             	RET
 3658:                          	;
 3659:      0E20 12 18 4D       IN3A:	CALL	DTEMP		;GET THE USER LOCATION
 3660:      0E23 12 19 57       	CALL	GET_NUM 	;GET THE USER SUPPLIED NU
 3661:      0E26 70 18          	JNZ	IN5		;ERROR IF NOT ZERO
 3662:      0E28 12 18 54       	CALL	TEMPD		;SAVE THE DATA POINTER
 3663:      0E2B F1 01          	ACALL	VAR_ER		;GET THE VARIABLE
 3664:      0E2D F1 D1          	ACALL	XPOP		;SAVE THE VARIABLE
 3665:      0E2F 12 18 4D       	CALL	DTEMP		;GET DPTR BACK FROM VAR_ER
 3666:      0E32 D1 C6          	ACALL	C_TST		;SEE IF MORE TO DO
 3667:      0E34 40 13          	JC	IN6		;EXIT IF NO COMMA
 3668:      0E36 E0             	MOVX	A,@DPTR 	;GET INPUT TERMINATOR
 3669:      0E37 B4 2C 06       	CJNE	A,#',',IN5      ;IF NOT A COMMA DO
 3670:      0E3A A3             	INC	DPTR		;BUMP PAST COMMA AND READ NEX
 3671:      0E3B 12 18 54       	CALL	TEMPD
 3672:      0E3E 80 CF          	SJMP	IN3
 3673:                          	;
 3674:      0E40 90 00 F3       IN5:	MOV	DPTR,#IAN	;PRINT INPUT A NUMBER
 3675:      0E43 12 06 AD       	CALL	CRP		;DO A CR, THEN, PRINT FROM RO
 3676:      0E46 02 18 44       	LJMP	CC1		;TRY IT AGAIN
 3677:                          	;
 3678:      0E49 E0             IN6:	MOVX	A,@DPTR
 3679:      0E4A B4 0D 01       	CJNE	A,#CR,EIGP
 3680:      0E4D 22             	RET
 3681:                          	;
 3682:      0E4E 90 03 6D       EIGP:	MOV	DPTR,#EIG
 3683:      0E51 12 06 AD       	CALL	CRP		;PRINT THE MESSAGE AND EXIT
 3684:      0E54 81 3C          	AJMP	SP0		;EXIT WITH A CRLF
 3685:                          	;
 3686:                          	;**************************************
 3687:                          	;
 3688:                          SOT:	; On timer interrupt
 3689:                          	;
 3690:                          	;**************************************
 3691:                          	;
 3692:      0E56 D1 85          	ACALL	TWO		;GET THE NUMBERS
 3693:      0E58 8B 4B          	MOV	SP_H,R3
 3694:      0E5A 89 4C          	MOV	SP_L,R1
 3695:      0E5C 90 01 26       	MOV	DPTR,#TIV	;SAVE THE NUMBER
 3696:      0E5F D2 10          	SETB	OTS
 3697:      0E61 A1 EF          	AJMP	R76S		;EXIT
 3698:                          	;
 3699:                          	;
 3700:                          	;**************************************
 3701:                          	;
 3702:                          SCALL:	; Call a user rountine
 3703:                          	;
 3704:                          	;**************************************
 3705:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 68



 Line    I  Addr Code           Source

 3706:      0E63 F1 30          	ACALL	INTERR		;CONVERT INTEGER
 3707:      0E65 BA 00 0A       	CJNE	R2,#0,S_C_1	;SEE IF TRAP
 3708:      0E68 E8             	MOV	A,R0
 3709:      0E69 20 E7 06       	JB	ACC.7,S_C_1
 3710:      0E6C 28             	ADD	A,R0
 3711:      0E6D 90 41 00       	MOV	DPTR,#4100H
 3712:      0E70 F5 82          	MOV	DPL,A
 3713:                          	;
 3714:      0E72 31 6C          S_C_1:	ACALL	AC1		;JUMP TO USER PROGRAM
 3715:      0E74 53 D0 E7       	ANL	PSW,#11100111B	;BACK TO BANK 0
 3716:      0E77 22             	RET			;EXIT
 3717:                          	;
 3718:                          	;**************************************
 3719:                          	;
 3720:                          THREE:	; Save value for timer function
 3721:                          	;
 3722:                          	;**************************************
 3723:                          	;
 3724:      0E78 D1 8E          	ACALL	ONE		;GET THE FIRST INTEGER
 3725:      0E7A 12 16 7B       	CALL	CBIAS		;BIAS FOR TIMER LOAD
 3726:      0E7D 8B 40          	MOV	T_HH,R3
 3727:      0E7F 89 41          	MOV	T_LL,R1
 3728:      0E81 7F 2C          	MOV	R7,#','         ;WASTE A COMMA
 3729:      0E83 91 E5          	ACALL	EATC		;FALL THRU TO TWO
 3730:                          	;
 3731:                          	;**************************************
 3732:                          	;
 3733:                          TWO:	; Get two values seperated by a com
 3734:                          	;
 3735:                          	;**************************************
 3736:                          	;
 3737:      0E85 F1 43          	ACALL	EXPRB
 3738:      0E87 7F 2C          	MOV	R7,#','         ;WASTE THE COMMA
 3739:      0E89 F1 41          	ACALL	WE
 3740:      0E8B 02 14 A1       	JMP	TWOL		;EXIT
 3741:                          	;
 3742:                          	;**************************************
 3743:                          	;
 3744:                          ONE:	; Evaluate an expression and get an
 3745:                          	;
 3746:                          	;**************************************
 3747:                          	;
 3748:      0E8E F1 43          	ACALL	EXPRB		;EVALUATE EXPERSSION
 3749:                          	;
 3750:      0E90 12 12 23       IFIXL:	CALL	IFIX		;INTEGERS IN R3:R1
 3751:      0E93 E9             	MOV	A,R1
 3752:      0E94 22             	RET
 3753:                          	;
 3754:                          	;
 3755:                          	;**************************************
 3756:                          	;
 3757:                          I_PI:	; Increment text pointer then get 
 3758:                          	;
 3759:                          	;**************************************
 3760:                          	;
 3761:      0E95 D1 D7          	ACALL	GCI1		;BUMP TEXT, THEN GET INTEGE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 69



 Line    I  Addr Code           Source

 3762:                          	;
 3763:                          PAREN_INT:; Get an integer in parens ( )
 3764:                          	;
 3765:      0E97 91 DF          	ACALL	P_E
 3766:      0E99 80 F5          	SJMP	IFIXL
 3767:                          	;
 3768:      0E9B 85 13 83       DP_B:	MOV	DPH,BOFAH
 3769:      0E9E 85 14 82       	MOV	DPL,BOFAL
 3770:      0EA1 22             	RET
 3771:                          	;
 3772:      0EA2 85 0A 83       DP_T:	MOV	DPH,TXAH
 3773:      0EA5 85 08 82       	MOV	DPL,TXAL
 3774:      0EA8 22             	RET
 3775:                          	;
 3776:      0EA9 D1 CD          CPS:	ACALL	GC		;GET THE CHARACTER
 3777:      0EAB B4 22 73       	CJNE	A,#'"',NOPASS   ;EXIT IF NO STRING
 3778:      0EAE D1 A2          	ACALL	DP_T		;GET TEXT POINTER
 3779:      0EB0 A3             	INC	DPTR		;BUMP PAST "
 3780:      0EB1 7C 22          	MOV	R4,#'"'
 3781:      0EB3 12 06 C3       	CALL	PN0		;DO THE PRINT
 3782:      0EB6 A3             	INC	DPTR		;GO PAST QUOTE
 3783:      0EB7 C3             	CLR	C		;PASSED TEST
 3784:                          	;
 3785:      0EB8 85 83 0A       T_DP:	MOV	TXAH,DPH	;TEXT POINTER GETS DP
 3786:      0EBB 85 82 08       	MOV	TXAL,DPL
 3787:      0EBE 22             	RET
 3788:                          	;
 3789:                          	;**************************************
 3790:                          	;
 3791:                          S_C:	; Check for a string
 3792:                          	;
 3793:                          	;**************************************
 3794:                          	;
 3795:      0EBF D1 CD          	ACALL	GC		;GET THE CHARACTER
 3796:      0EC1 B4 24 5D       	CJNE	A,#'$',NOPASS   ;SET CARRY IF NOT 
 3797:      0EC4 21 E7          	AJMP	IST_CAL 	;CLEAR CARRY, CALCULATE O
 3798:                          	;
 3799:                          	;
 3800:                          	;
 3801:                          	;**************************************
 3802:                          	;
 3803:      0EC6 D1 CD          C_TST:	ACALL	GC		;GET A CHARACTER
 3804:      0EC8 B4 2C 56       	CJNE	A,#',',NOPASS   ;SEE IF A COMMA
 3805:                          	;
 3806:                          	;**************************************
 3807:                          	;
 3808:                          	;GC AND GCI - GET A CHARACTER FROM TEXT
 3809:                          	;	      PUT CHARACTER IN THE ACC
 3810:                          	;
 3811:                          	;**************************************
 3812:                          	;
 3813:      0ECB D1 D7          IGC:	ACALL	GCI1		;BUMP POINTER, THEN GET
 3814:                          	;
 3815:      0ECD D2 D3          GC:	SETB	RS0		;USE BANK 1
 3816:      0ECF 8A A0          	MOV	P2,R2		;SET UP PORT 2
 3817:      0ED1 E2             	MOVX	A,@R0		;GET EXTERNAL BYTE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 70



 Line    I  Addr Code           Source

 3818:      0ED2 C2 D3          	CLR	RS0		;BACK TO BANK 0
 3819:      0ED4 22             	RET			;EXIT
 3820:                          	;
 3821:      0ED5 D1 CD          GCI:	ACALL	GC
 3822:                          	;
 3823:                          	; This routine bumps txa by one and alw
 3824:                          	;
 3825:      0ED7 D2 D3          GCI1:	SETB	RS0		;BANK 1
 3826:      0ED9 08             	INC	R0		;BUMP TXA
 3827:      0EDA B8 00 01       	CJNE	R0,#0,GCI11
 3828:      0EDD 0A             	INC	R2
 3829:      0EDE C2 D3          GCI11:	CLR	RS0
 3830:      0EE0 22             	RET			;EXIT
 3831:                          	;
 3832:                          	;**************************************
 3833:                          	;
 3834:                          	; Check delimiters
 3835:                          	;
 3836:                          	;**************************************
 3837:                          	;
 3838:      0EE1 D1 CD          DELTST: ACALL	GC		;GET A CHARACTER
 3839:      0EE3 B4 0D 02       DELTST1:CJNE	A,#CR,DT1	;SEE IF A CR
 3840:      0EE6 E4             	CLR	A
 3841:      0EE7 22             	RET
 3842:                          	;
 3843:      0EE8 B4 3A 36       DT1:	CJNE	A,#':',NOPASS   ;SET CARRY IF 
 3844:                          	;
 3845:      0EEB 22             L_RET:	RET
 3846:                          	;
 3847:                          	;
 3848:                          	;**************************************
 3849:                          	;
 3850:                          	; FINDC - Find the character in R7, upd
 3851:                          	;
 3852:                          	;**************************************
 3853:                          	;
 3854:      0EEC 7F 0D          FINDCR: MOV	R7,#CR		;KILL A STATEMENT LI
 3855:                          	;
 3856:      0EEE D1 E1          FINDC:	ACALL	DELTST
 3857:      0EF0 50 F9          	JNC	L_RET
 3858:                          	;
 3859:      0EF2 B5 07 01       	CJNE	A,R7B0,FNDCL2	;MATCH?
 3860:      0EF5 22             	RET
 3861:                          	;
 3862:      0EF6 D1 D7          FNDCL2: ACALL	GCI1
 3863:      0EF8 80 F4          	SJMP	FINDC		;LOOP
 3864:                          	;
 3865:      0EFA D1 D7          FNDCL3: ACALL	GCI1
 3866:                          	;
 3867:      0EFC D1 E1          WCR:	ACALL	DELTST		;WASTE UNTIL A "REAL"
 3868:      0EFE 70 FA          	JNZ	FNDCL3
 3869:      0F00 22             	RET
 3870:                          	;
 3871:                          	;**************************************
 3872:                          	;
 3873:                          	; VAR_ER - Check for a variable, exit i

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 71



 Line    I  Addr Code           Source

 3874:                          	;
 3875:                          	;**************************************
 3876:                          	;
 3877:      0F01 B1 65          VAR_ER: ACALL	VAR
 3878:      0F03 80 2D          	SJMP	INTERR1
 3879:                          	;
 3880:                          	;
 3881:                          	;**************************************
 3882:                          	;
 3883:                          	; S_D0 - The Statement Action Routine D
 3884:                          	;
 3885:                          	;**************************************
 3886:                          	;
 3887:      0F05 71 BD          S_DO:	ACALL	CSC		;FINISH UP THE LINE
 3888:      0F07 7C 03          	MOV	R4,#DTYPE	;TYPE FOR STACK
 3889:      0F09 71 35          	ACALL	SGS1		;SAVE ON STACK
 3890:      0F0B 01 13          	AJMP	ILOOP		;EXIT
 3891:                          	;
 3892:                          	;**************************************
 3893:                          	;
 3894:                          	; CLN_UP - Clean up the end of a statem
 3895:                          	;	   file, eat character and line count
 3896:                          	;
 3897:                          	;**************************************
 3898:                          	;
 3899:      0F0D B4 3A 02       C_2:	CJNE	A,#':',C_1      ;SEE IF A TERM
 3900:      0F10 C1 D7          	AJMP	GCI1		;BUMP POINTER AND EXIT, IF S
 3901:                          	;
 3902:      0F12 B4 A8 6D       C_1:	CJNE	A,#T_ELSE,EP5
 3903:      0F15 D1 FC          	ACALL	WCR		;WASTE UNTIL A CR
 3904:                          	;
 3905:      0F17 D1 CD          CLN_UP: ACALL	GC		;GET THE CHARACTER
 3906:      0F19 B4 0D F1       	CJNE	A,#CR,C_2	;SEE IF A CR
 3907:      0F1C D1 CB          	ACALL	IGC		;GET THE NEXT CHARACTER
 3908:      0F1E B4 01 02       	CJNE	A,#EOF,B_TXA	;SEE IF TERMINATOR
 3909:                          	;
 3910:      0F21 D3             NOPASS: SETB	C
 3911:      0F22 22             	RET
 3912:                          	;
 3913:      0F23 C5 08          B_TXA:	XCH	A,TXAL		;BUMP TXA BY THREE
 3914:      0F25 24 03          	ADD	A,#3
 3915:      0F27 C5 08          	XCH	A,TXAL
 3916:      0F29 10 D7 01       	JBC	CY,B_TXA1
 3917:      0F2C 22             	RET
 3918:      0F2D 05 0A          B_TXA1: INC	TXAH
 3919:      0F2F 22             	RET
 3920:                          	;
 3921:                          	;**************************************
 3922:                          	;
 3923:                          	;	  Get an INTEGER from the text
 3924:                          	;	  sets CARRY if not found
 3925:                          	;	  returns the INTGER value in DPTR an
 3926:                          	;	  returns the terminator in ACC
 3927:                          	;
 3928:                          	;**************************************
 3929:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 72



 Line    I  Addr Code           Source

 3930:      0F30 F1 35          INTERR: ACALL	INTGER		;GET THE INTEGER
 3931:      0F32 40 4E          INTERR1:JC	EP5		;ERROR IF NOT FOUND
 3932:      0F34 22             	RET			;EXIT IF FOUND
 3933:                          	;
 3934:      0F35 D1 A2          INTGER: ACALL	DP_T
 3935:      0F37 12 19 81       	CALL	FP_BASE9	;CONVERT THE INTEGER
 3936:      0F3A D1 B8          	ACALL	T_DP
 3937:      0F3C 8A 83          	MOV	DPH,R2		;PUT THE RETURNED VALUE IN 
 3938:      0F3E 88 82          	MOV	DPL,R0
 3939:                          	;
 3940:      0F40 22             ITRET:	RET			;EXIT
 3941:                          	;
 3942:                          	;
 3943:      0F41 91 E5          WE:	ACALL	EATC		;WASTE THE CHARACTER
 3944:                          	;
 3945:                          	; Fall thru to evaluate the expression
 3946:                          	;
 3947:                          	;**************************************
 3948:                          	;
 3949:                          	; EXPRB - Evaluate an expression
 3950:                          	;
 3951:                          	;**************************************
 3952:                          	;
 3953:      0F43 7A CF          EXPRB:	MOV	R2,#LOW OPBOL	;BASE PRECEDENC
 3954:                          	;
 3955:      0F45 C0 02          EP1:	PUSH	R2B0		;SAVE OPERATOR PRECEDENC
 3956:      0F47 C2 24          	CLR	ARGF		;RESET STACK DESIGNATOR
 3957:                          	;
 3958:      0F49 E5 81          EP2:	MOV	A,SP		;GET THE STACK POINTER
 3959:      0F4B 24 0C          	ADD	A,#12		;NEED AT LEAST 12 BYTES
 3960:      0F4D 50 03          	JNC	EP21
 3961:      0F4F 02 18 8C       	LJMP	E1XX2
 3962:      0F52 E5 09          EP21:	MOV	A,ASTKA 	;GET THE ARG STACK
 3963:      0F54 94 38          	SUBB	A,#LOW TM_TOP+12;NEED 12 BYTES ALS
 3964:      0F56 50 03          	JNC	EP22
 3965:      0F58 02 12 1A       	LJMP	E4YY
 3966:      0F5B 20 24 13       EP22:	JB	ARGF,EP4	;MUST BE AN OPERATOR, 
 3967:      0F5E B1 65          	ACALL	VAR		;IS THE VALUE A VARIABLE?
 3968:      0F60 50 0D          	JNC	EP3		;PUT VARIABLE ON STACK
 3969:                          	;
 3970:      0F62 F1 EF          	ACALL	CONST		;IS THE VALUE A NUMERIC CO
 3971:      0F64 50 0B          	JNC	EP4		;IF SO, CONTINUE, IF NOT, SEE 
 3972:      0F66 D1 CD          	CALL	GC		;GET THE CHARACTER
 3973:      0F68 B4 E0 06       	CJNE	A,#T_LPAR,EP4	;SEE IF A LEFT PAREN
 3974:      0F6B 74 D0          	MOV	A,#(LOW OPBOL+1)
 3975:      0F6D 80 55          	SJMP	XLPAR		;PROCESS THE LEFT PAREN
 3976:                          	;
 3977:      0F6F F1 DD          EP3:	ACALL	PUSHAS		;SAVE VAR ON STACK
 3978:                          	;
 3979:      0F71 D1 CD          EP4:	ACALL	GC		;GET THE OPERATOR
 3980:                          	;
 3981:      0F73 B4 E0 00       	CJNE	A,#T_LPAR,EP41	;IS IT AN OPERATOR
 3982:      0F76 50 0E          EP41:	JNC	XOP		;PROCESS OPERATOR
 3983:      0F78 B4 B0 00       	CJNE	A,#T_UOP,EP42	;IS IT A UNARY OPERA
 3984:      0F7B 50 3B          EP42:	JNC	XBILT		;PROCESS UNARY (BUILT I
 3985:      0F7D D0 02          	POP	R2B0		;GET BACK PREVIOUS OPERATOR P

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 73



 Line    I  Addr Code           Source

 3986:      0F7F 20 24 BE       	JB	ARGF,ITRET	;OK IF ARG FLAG IS SET
 3987:                          	;
 3988:      0F82 C3             EP5:	CLR	C		;NO RECOVERY
 3989:      0F83 02 18 87       	LJMP	E1XX1
 3990:                          	;
 3991:                          	; Process the operator
 3992:                          	;
 3993:      0F86 54 1F          XOP:	ANL	A,#1FH		;STRIP OFF THE TOKE BIT
 3994:      0F88 20 24 05       	JB	ARGF,XOP1	;IF ARG FLAG IS SET, PROCE
 3995:      0F8B B4 05 3C       	CJNE	A,#T_SUB-T_LPAR,XOP3
 3996:      0F8E 74 09          	MOV	A,#T_NEG-T_LPAR
 3997:                          	;
 3998:      0F90 24 D0          XOP1:	ADD	A,#LOW OPBOL+1	;BIAS THE TABLE
 3999:      0F92 FA             	MOV	R2,A
 4000:      0F93 90 00 00       	MOV	DPTR,#00H
 4001:      0F96 93             	MOVC	A,@A+DPTR	;GET THE CURRENT PRECEDE
 4002:      0F97 FC             	MOV	R4,A
 4003:      0F98 D0 E0          	POP	ACC		;GET THE PREVIOUS PRECEDENCE
 4004:      0F9A FD             	MOV	R5,A		;SAVE THE PREVIOUS PRECEDENCE
 4005:      0F9B 93             	MOVC	A,@A+DPTR	;GET IT
 4006:      0F9C B5 04 04       	CJNE	A,R4B0,XOP11	;SEE WHICH HAS HIGHER
 4007:      0F9F B4 0C 9E       	CJNE	A,#12,ITRET	;SEE IF ANEG
 4008:      0FA2 D3             	SETB	C
 4009:      0FA3 50 9B          XOP11:	JNC	ITRET		;PROCESS NON-INCREASIN
 4010:                          	;
 4011:                          	; Save increasing precedence
 4012:                          	;
 4013:      0FA5 C0 05          	PUSH	R5B0		;SAVE OLD PRECEDENCE ADDRESS
 4014:      0FA7 C0 02          	PUSH	R2B0		;SAVE NEW PRECEDENCE ADDRESS
 4015:      0FA9 D1 D7          	ACALL	GCI1		;EAT THE OPERATOR
 4016:      0FAB F1 45          	ACALL	EP1		;EVALUATE REMAINING EXPRESSI
 4017:      0FAD D0 E0          XOP12:	POP	ACC
 4018:                          	;
 4019:                          	; R2 has the action address, now setup 
 4020:                          	;
 4021:      0FAF 90 00 57       XOP2:	MOV	DPTR,#OPTAB
 4022:      0FB2 24 30          	ADD	A,#LOW (NOT OPBOL)
 4023:      0FB4 31 5C          	CALL	ISTA1		;SET UP TO RETURN TO EP2
 4024:      0FB6 E1 49          	AJMP	EP2		;JUMP TO EVALUATE EXPRESSION
 4025:                          	;
 4026:                          	; Built-in operator processing
 4027:                          	;
 4028:      0FB8 D1 D7          XBILT:	ACALL	GCI1		;EAT THE TOKEN
 4029:      0FBA 24 30          	ADD	A,#LOW (50H+LOW UOPBOL)
 4030:      0FBC 20 24 C3       	JB	ARGF,EP5	;XBILT MUST COME AFTER AN O
 4031:      0FBF B4 EE 00       	CJNE	A,#STP,XBILT1
 4032:      0FC2 50 EB          XBILT1: JNC	XOP2
 4033:                          	;
 4034:      0FC4 C0 E0          XLPAR:	PUSH	ACC		;PUT ADDRESS ON THE STA
 4035:      0FC6 91 DF          	ACALL	P_E
 4036:      0FC8 80 E3          	SJMP	XOP12		;PERFORM OPERATION
 4037:                          	;
 4038:      0FCA B4 03 B5       XOP3:	CJNE	A,#T_ADD-T_LPAR,EP5
 4039:      0FCD D1 D7          	ACALL	GCI1
 4040:      0FCF E1 49          	AJMP	EP2		;WASTE + SIGN
 4041:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 74



 Line    I  Addr Code           Source

 4042:      0FD1 B1 AD          XPOP:	ACALL	X3120		;FLIP ARGS THEN POP
 4043:                          	;
 4044:                          	;**************************************
 4045:                          	;
 4046:                          	; POPAS - Pop arg stack and copy variab
 4047:                          	;
 4048:                          	;**************************************
 4049:                          	;
 4050:      0FD3 12 12 4F       POPAS:	LCALL	INC_ASTKA
 4051:      0FD6 02 14 72       	JMP	VARCOP		;COPY THE VARIABLE
 4052:                          	;
 4053:      0FD9 7A 01          AXTAL:	MOV	R2,#HIGH CXTAL
 4054:      0FDB 78 13          	MOV	R0,#LOW CXTAL
 4055:                          	;
 4056:                          	; fall thru
 4057:                          	;
 4058:                          	;**************************************
 4059:                          	;
 4060:                          PUSHAS: ; Push the Value addressed by R2
 4061:                          	;
 4062:                          	;**************************************
 4063:                          	;
 4064:      0FDD 12 12 0B       	CALL	DEC_ASTKA
 4065:      0FE0 D2 24          	SETB	ARGF		;SAYS THAT SOMTHING IS ON TH
 4066:      0FE2 02 14 72       	LJMP	VARCOP
 4067:                          	;
 4068:                          	;
 4069:                          	;**************************************
 4070:                          	;
 4071:                          ST_A:	; Store at expression
 4072:                          	;
 4073:                          	;**************************************
 4074:                          	;
 4075:      0FE5 D1 8E          	ACALL	ONE		;GET THE EXPRESSION
 4076:      0FE7 80 EA          	SJMP	POPAS		;SAVE IT
 4077:                          	;
 4078:                          	;
 4079:                          	;**************************************
 4080:                          	;
 4081:                          LD_A:	; Load at expression
 4082:                          	;
 4083:                          	;**************************************
 4084:                          	;
 4085:      0FE9 D1 8E          	ACALL	ONE		;GET THE EXPRESSION
 4086:      0FEB B1 AD          	ACALL	X3120		;FLIP ARGS
 4087:      0FED 80 EE          	SJMP	PUSHAS
 4088:                          	;
 4089:                          	;**************************************
 4090:                          	;
 4091:                          CONST:	; Get a constant fron the text
 4092:                          	;
 4093:                          	;**************************************
 4094:                          	;
 4095:      0FEF D1 CD          	CALL	GC		;FIRST SEE IF LITERAL
 4096:      0FF1 B4 D1 31       	CJNE	A,#T_ASC,C0C	;SEE IF ASCII TOKEN
 4097:      0FF4 D1 CB          	CALL	IGC		;GET THE CHARACTER AFTER TOKE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 75



 Line    I  Addr Code           Source

 4098:      0FF6 B4 24 05       	CJNE	A,#'$',CN0      ;SEE IF A STRING
 4099:                          	;
 4100:      0FF9 51 1E          CNX:	CALL	CSY		;CALCULATE IT
 4101:      0FFB 02 13 C0       	JMP	AXBYTE1 	;SAVE IT ON THE STACK
 4102:                          ;
 4103:                          ;***************************************
 4104:                          ;****** Correct ASC(x) bug *************
 4105:                          ;****** Wulf 5 *************************
 4106:                          ;
 4107:                          ;
 4108:      0FFE 30 E7 1B       CN0:	jnb	acc.7,cn0t	;jump if possibly as
 4109:      1001 90 01 75       	mov	dptr,#toktab
 4110:      1004 FE             	mov	r6,a		;save search token
 4111:      1005 F4             cn0t1:	cpl	a
 4112:      1006 60 13          	jz	cn0t4		;jump if EOT
 4113:      1008 E4             	clr	a
 4114:      1009 93             	movc	a,@a+dptr	;read token from token t
 4115:      100A A3             	inc	dptr
 4116:      100B B5 06 F7       	cjne	a,r6b0,cn0t1	;jump if wrong entry
 4117:                          	;
 4118:      100E FD             	mov	r5,a		;save search token
 4119:      100F E4             	clr	a
 4120:      1010 93             cn0t2:	movc	a,@a+dptr
 4121:      1011 FE             	mov	r6,a		;save first ascii of token te
 4122:                          	;
 4123:      1012 E4             cn0t3:	clr	a
 4124:      1013 93             	movc	a,@a+dptr
 4125:      1014 A3             	inc	dptr
 4126:      1015 30 E7 FA       	jnb	acc.7,cn0t3	;jump if possibly ascii
 4127:                          	;
 4128:      1018 6D             	xrl	a,r5
 4129:      1019 60 F5          	jz	cn0t2		;jump if same search token ag
 4130:                          	;
 4131:      101B EE             cn0t4:	mov	a,r6		;get saved ascii
 4132:      101C 12 14 B1       CN0t:	CALL	TWO_R2		;PUT IT ON THE STACK
 4133:                          ;
 4134:                          ;****** continue with original code: ***
 4135:                          ;
 4136:      101F 12 0E D7       	CALL	GCI1		;BUMP THE POINTER
 4137:      1022 02 0C E3       	JMP	ERPAR		;WASTE THE RIGHT PAREN
 4138:                          	;
 4139:      1025 12 0E A2       C0C:	CALL	DP_T		;GET THE TEXT POINTER
 4140:      1028 12 19 57       	CALL	GET_NUM 	;GET THE NUMBER
 4141:      102B B4 FF 02       	CJNE	A,#0FFH,C1C	;SEE IF NO NUMBER
 4142:      102E D3             	SETB	C
 4143:      102F 22             C2C:	RET
 4144:                          	;
 4145:      1030 70 06          C1C:	JNZ	FPTST
 4146:      1032 C3             	CLR	C
 4147:      1033 D2 24          	SETB	ARGF
 4148:                          	;
 4149:      1035 02 0E B8       C3C:	JMP	T_DP
 4150:                          	;
 4151:      1038 54 0B          FPTST:	ANL	A,#00001011B	;CHECK FOR ERROR
 4152:      103A 60 F3          	JZ	C2C		;EXIT IF ZERO
 4153:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 76



 Line    I  Addr Code           Source

 4154:                          	; Handle the error condition
 4155:                          	;
 4156:      103C 90 17 51       	MOV	DPTR,#E2X	;DIVIDE BY ZERO
 4157:      103F 30 E0 03       	JNB	ACC.0,FPTST1	;UNDERFLOW
 4158:      1042 90 18 04       	MOV	DPTR,#E7X
 4159:      1045 30 E1 03       FPTST1: JNB	ACC.1,FPTS	;OVERFLOW
 4160:      1048 90 1F 89       	MOV	DPTR,#E11X
 4161:                          	;
 4162:      104B 02 18 8F       FPTS:	JMP	ERROR
 4163:                          	;
 4164:                          	;**************************************
 4165:                          	;
 4166:                          	; The Command action routine - LIST
 4167:                          	;
 4168:                          	;**************************************
 4169:                          	;
 4170:      104E 12 0C 19       CLIST:	CALL	NUMC		;SEE IF TO LINE PORT
 4171:      1051 71 CB          	ACALL	FSTK		;PUT 0FFFFH ON THE STACK
 4172:      1053 12 0F 35       	CALL	INTGER		;SEE IF USER SUPPLIES LN
 4173:      1056 E4             	CLR	A		;LN = 0 TO START
 4174:      1057 FB             	MOV	R3,A
 4175:      1058 F9             	MOV	R1,A
 4176:      1059 40 14          	JC	CL1		;START FROM ZERO
 4177:                          	;
 4178:      105B 12 18 54       	CALL	TEMPD		;SAVE THE START ADDTESS
 4179:      105E 12 0E D5       	CALL	GCI		;GET THE CHARACTER AFTER LIST
 4180:      1061 B4 E5 07       	CJNE	A,#T_SUB,CLIST1 ;CHECK FOR TERMINA
 4181:      1064 51 4F          	ACALL	INC_ASTKA	;WASTE 0FFFFH
 4182:      1066 12 0F 30       	LCALL	INTERR		;GET TERMINATION ADDRESS
 4183:      1069 91 B4          	ACALL	TWO_EY		;PUT TERMINATION ON THE A
 4184:      106B AB 0F          CLIST1: MOV	R3,TEMP5	;GET THE START ADDT
 4185:      106D A9 0E          	MOV	R1,TEMP4
 4186:                          	;
 4187:      106F 12 05 8C       CL1:	CALL	GETLIN		;GET THE LINE NO IN R3
 4188:      1072 60 1E          	JZ	CL3		;RET IF AT END
 4189:                          	;
 4190:      1074 11 35          CL2:	ACALL	C3C		;SAVE THE ADDRESS
 4191:      1076 A3             	INC	DPTR		;POINT TO LINE NUMBER
 4192:      1077 D1 52          	ACALL	PMTOP1		;PUT LINE NUMBER ON THE S
 4193:      1079 51 08          	ACALL	CMPLK		;COMPARE LN TO END ADDRESS
 4194:      107B 40 15          	JC	CL3		;EXIT IF GREATER
 4195:      107D 12 07 8D       	CALL	BCK		;CHECK FOR A CONTROL C
 4196:      1080 51 0B          	ACALL	DEC_ASTKA	;SAVE THE COMPARE ADDRE
 4197:      1082 12 0E A2       	CALL	DP_T		;RESTORE ADDRESS
 4198:      1085 11 A3          	ACALL	UPPL		;UN-PROCESS THE LINE
 4199:      1087 11 35          	ACALL	C3C		;SAVE THE CR ADDRESS
 4200:      1089 11 94          	ACALL	CL6		;PRINT IT
 4201:      108B A3             	INC	DPTR		;BUMP POINTER TO NEXT LINE
 4202:      108C E0             	MOVX	A,@DPTR 	;GET LIN LENGTH
 4203:      108D D5 E0 E4       	DJNZ	ACC,CL2 	;LOOP
 4204:      1090 51 4F          	ACALL	INC_ASTKA	;WASTE THE COMPARE BYTE
 4205:                          	;
 4206:      1092 E1 87          CL3:	AJMP	CMND1		;BACK TO COMMAND PROCES
 4207:                          	;
 4208:      1094 90 00 07       CL6:	MOV	DPTR,#IBUF	;PRINT IBUF
 4209:      1097 12 06 C1       	CALL	PRNTCR		;PRINT IT

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 77



 Line    I  Addr Code           Source

 4210:      109A 12 0E A2       	CALL	DP_T
 4211:                          	;
 4212:      109D 02 06 A5       CL7:	JMP	CRLF
 4213:                          	;
 4214:      10A0 12 05 79       UPPL0:	LCALL	X31DP
 4215:                          	;
 4216:                          	;**************************************
 4217:                          	;
 4218:                          	;UPPL - UN PREPROCESS A LINE ADDRESSED 
 4219:                          	;	RETURN SOURCE ADDRESS OF CR IN DPTR O
 4220:                          	;
 4221:                          	;**************************************
 4222:                          	;
 4223:      10A3 7B 00          UPPL:	MOV	R3,#HIGH IBUF	;POINT R3 AT HIG
 4224:      10A5 79 07          	MOV	R1,#LOW IBUF	;POINT R1 AT IBUF
 4225:      10A7 A3             	INC	DPTR		;SKIP OVER LINE LENGTH
 4226:                          ;
 4227:                          ;***************************************
 4228:                          ;****** Elektor 1 Patch ****************
 4229:                          ;
 4230:                          ;	ACALL	C3C		;SAVE THE DPTR (DP_T)
 4231:                          ;	CALL	L20DPI		;PUT LINE NUMBER IN R2:R0
 4232:                          ;	CALL	FP_BASE8	;CONVERT R2:R0 TO INTEGE
 4233:                          ;	CALL	DP_T
 4234:                          ;	INC	DPTR		;BUMP DPTR PAST THE LINE NUM
 4235:                          ;
 4236:                          ;****** Proper code starts here: *******
 4237:                          ;
 4238:      10A8 12 05 73       	lcall	L20DPI		;PUT LINE NUMBER IN R2:R0
 4239:      10AB 12 19 7F       	lcall	FP_BASE8	;CONVERT R2:R0 TO INTEGE
 4240:                          ;
 4241:                          ;****** continue with original code: ***
 4242:                          ;
 4243:      10AE B9 0D 00       UPP0:	CJNE	R1,#LOW IBUF+6,UPP01
 4244:      10B1 40 22          UPP01:	JC	UPP91		;PUT SPACES IN TEXT
 4245:      10B3 A3             	INC	DPTR		;BUMP PAST LN HIGH
 4246:      10B4 E0             	MOVX	A,@DPTR 	;GET USER TEXT
 4247:      10B5 FE             	MOV	R6,A		;SAVE A IN R6 FOR TOKE COMPAR
 4248:      10B6 20 E7 24       	JB	ACC.7,UPP1	;IF TOKEN, PROCESS
 4249:      10B9 B4 20 00       	CJNE	A,#20H,UPP02	;TRAP THE USER TOKENS
 4250:      10BC 50 03          UPP02:	JNC	UPP03
 4251:      10BE B4 0D 1C       	CJNE	A,#CR,UPP1	;DO IT IF NOT A CR
 4252:      10C1 B4 22 09       UPP03:	CJNE	A,#'"',UPP9     ;SEE IF STRI
 4253:      10C4 31 21          	ACALL	UPP7		;SAVE IT
 4254:      10C6 31 23          UPP04:	ACALL	UPP8		;GET THE NEXT CHARACT
 4255:      10C8 B4 22 FB       	CJNE	A,#'"',UPP04    ;LOOP ON QUOTES
 4256:      10CB 80 E1          	SJMP	UPP0
 4257:                          	;
 4258:      10CD B4 3A 09       UPP9:	CJNE	A,#':',UPP1A    ;PUT A SPACE 
 4259:      10D0 31 1F          	ACALL	UPP7A
 4260:      10D2 EE             	MOV	A,R6
 4261:      10D3 31 21          	ACALL	UPP7
 4262:      10D5 31 1F          UPP91:	ACALL	UPP7A
 4263:      10D7 80 D5          	SJMP	UPP0
 4264:                          	;
 4265:      10D9 31 25          UPP1A:	ACALL	UPP81		;SAVE THE CHARACTER,

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 78



 Line    I  Addr Code           Source

 4266:      10DB 80 D1          	SJMP	UPP0		;EXIT IF A CR, ELSE LOOP
 4267:                          	;
 4268:      10DD 11 35          UPP1:	ACALL	C3C		;SAVE THE TEXT POINTER
 4269:      10DF A2 2D          	MOV	C,XBIT
 4270:      10E1 92 D5          	MOV	F0,C		;SAVE XBIT IN F0
 4271:      10E3 90 01 75       UPP11:	MOV	DPTR,#TOKTAB	;POINT AT TOKEN 
 4272:      10E6 30 D5 03       	JNB	F0,UPP2
 4273:      10E9 12 20 78       	LCALL	2078H		;SET UP DPTR FOR LOOKUP
 4274:                          	;
 4275:      10EC E4             UPP2:	CLR	A		;ZERO A FOR LOOKUP
 4276:      10ED 93             	MOVC	A,@A+DPTR	;GET TOKEN
 4277:      10EE A3             	INC	DPTR		;ADVANCE THE TOKEN POINTER
 4278:      10EF B4 FF 05       	CJNE	A,#0FFH,UP_2	;SEE IF DONE
 4279:      10F2 10 D5 EE       	JBC	F0,UPP11	;NOW DO NORMAL TABLE
 4280:      10F5 E1 87          	AJMP	CMND1		;EXIT IF NOT FOUND
 4281:                          	;
 4282:      10F7 B5 06 F2       UP_2:	CJNE	A,R6B0,UPP2	;LOOP UNTIL THE S
 4283:                          	;
 4284:      10FA B4 B0 00       UP_3:	CJNE	A,#T_UOP,UP_4
 4285:      10FD 50 02          UP_4:	JNC	UPP3
 4286:      10FF 31 1F          	ACALL	UPP7A		;PRINT THE SPACE IF OK
 4287:                          	;
 4288:      1101 E4             UPP3:	CLR	A		;DO LOOKUP
 4289:      1102 93             	MOVC	A,@A+DPTR
 4290:      1103 20 E7 07       	JB	ACC.7,UPP4	;EXIT IF DONE, ELSE SAVE
 4291:      1106 60 05          	JZ	UPP4		;DONE IF ZERO
 4292:      1108 31 21          	ACALL	UPP7		;SAVE THE CHARACTER
 4293:      110A A3             	INC	DPTR
 4294:      110B 80 F4          	SJMP	UPP3		;LOOP
 4295:                          	;
 4296:      110D 12 0E A2       UPP4:	CALL	DP_T		;GET IT BACK
 4297:      1110 EE             	MOV	A,R6		;SEE IF A REM TOKEN
 4298:      1111 64 96          	XRL	A,#T_REM
 4299:      1113 70 04          	JNZ	UPP42
 4300:      1115 31 23          UPP41:	ACALL	UPP8
 4301:      1117 80 FC          	SJMP	UPP41
 4302:      1119 50 93          UPP42:	JNC	UPP0		;START OVER AGAIN IF NO
 4303:      111B 31 1F          	ACALL	UPP7A		;PRINT THE SPACE IF OK
 4304:      111D 80 8F          	SJMP	UPP0		;DONE
 4305:                          	;
 4306:      111F 74 20          UPP7A:	MOV	A,#' '          ;OUTPUT A SPA
 4307:                          	;
 4308:      1121 C1 44          UPP7:	AJMP	PPL91		;SAVE A
 4309:                          	;
 4310:      1123 A3             UPP8:	INC	DPTR
 4311:      1124 E0             	MOVX	A,@DPTR
 4312:      1125 B4 0D F9       UPP81:	CJNE	A,#CR,UPP7
 4313:      1128 C1 30          	AJMP	PPL71
 4314:                          	;
 4315:                          	;**************************************
 4316:                          	;
 4317:                          	; This table contains all of the floati
 4318:                          	;
 4319:                          	; The constants in ROM are stored "back
 4320:                          	; basic normally treats floating point 
 4321:                          	; loading from the exponent and decreme

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 79



 Line    I  Addr Code           Source

 4322:                          	; ROM constants pointers load from the 
 4323:                          	; digits and increment the pointers. Th
 4324:                          	; arg stack loading faster and 2) compe
 4325:                          	; no decrement data pointer instruction
 4326:                          	;
 4327:                          	; The numbers are stored as follows:
 4328:                          	;
 4329:                          	; BYTE X+5    = MOST SIGNIFICANT DIGITS
 4330:                          	; BYTE X+4    = NEXT MOST SIGNIFICANT D
 4331:                          	; BYTE X+3    = NEXT LEAST SIGNIFICANT 
 4332:                          	; BYTE X+2    = LEAST SIGNIFICANT DIGIT
 4333:                          	; BYTE X+1    = SIGN OF THE ABOVE MANTI
 4334:                          	; BYTE X      = EXPONENT IN TWO'S COMPL
 4335:                          	;		ZERO EXPONENT = THE NUMBER ZERO
 4336:                          	;
 4337:                          	;**************************************
 4338:                          	;
 4339:      112A 7E             ATTAB:	DB	128-2		; ARCTAN LOOKUP
 4340:      112B 00             	DB	00H
 4341:      112C 57             	DB	57H
 4342:      112D 22             	DB	22H
 4343:      112E 66             	DB	66H
 4344:      112F 28             	DB	28H
 4345:                          	;
 4346:      1130 7F             	DB	128-1
 4347:      1131 01             	DB	01H
 4348:      1132 37             	DB	37H
 4349:      1133 57             	DB	57H
 4350:      1134 16             	DB	16H
 4351:      1135 16             	DB	16H
 4352:                          	;
 4353:      1136 7F             	DB	128-1
 4354:      1137 00             	DB	00H
 4355:      1138 14             	DB	14H
 4356:      1139 96             	DB	96H
 4357:      113A 90             	DB	90H
 4358:      113B 42             	DB	42H
 4359:                          	;
 4360:      113C 7F             	DB	128-1
 4361:      113D 01             	DB	01H
 4362:      113E 40             	DB	40H
 4363:      113F 96             	DB	96H
 4364:      1140 28             	DB	28H
 4365:      1141 75             	DB	75H
 4366:                          	;
 4367:      1142 80             	DB	128
 4368:      1143 00             	DB	00H
 4369:      1144 64             	DB	64H
 4370:      1145 62             	DB	62H
 4371:      1146 65             	DB	65H
 4372:      1147 10             	DB	10H
 4373:                          	;
 4374:      1148 80             	DB	128
 4375:      1149 01             	DB	01H
 4376:      114A 99             	DB	99H
 4377:      114B 88             	DB	88H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 80



 Line    I  Addr Code           Source

 4378:      114C 20             	DB	20H
 4379:      114D 14             	DB	14H
 4380:                          	;
 4381:      114E 80             	DB	128
 4382:      114F 00             	DB	00H
 4383:      1150 51             	DB	51H
 4384:      1151 35             	DB	35H
 4385:      1152 99             	DB	99H
 4386:      1153 19             	DB	19H
 4387:                          	;
 4388:      1154 80             	DB	128
 4389:      1155 01             	DB	01H
 4390:      1156 45             	DB	45H
 4391:      1157 31             	DB	31H
 4392:      1158 33             	DB	33H
 4393:      1159 33             	DB	33H
 4394:                          	;
 4395:      115A 81             	DB	129
 4396:      115B 00             	DB	00H
 4397:      115C 00             	DB	00H
 4398:      115D 00             	DB	00H
 4399:      115E 00             	DB	00H
 4400:      115F 10             	DB	10H
 4401:                          	;
 4402:      1160 FF             	DB	0FFH		;END OF TABLE
 4403:                          	;
 4404:      1161 81             NTWO:	DB	129
 4405:      1162 00             	DB	0
 4406:      1163 00             	DB	0
 4407:      1164 00             	DB	0
 4408:      1165 00             	DB	0
 4409:      1166 20             	DB	20H
 4410:                          ;
 4411:                          ;***************************************
 4412:                          ;****** Use XTAL up to 47 MHz **********
 4413:                          ;****** Wulf 2 *************************
 4414:                          ;
 4415:                          ;TTIME: DB	128-4		; CLOCK CALCULATION
 4416:                          ;	DB	00H
 4417:                          ;	DB	00H
 4418:                          ;	DB	00H
 4419:                          ;	DB	04H
 4420:                          ;	DB	13H
 4421:                          ;
 4422:      1167 7B             ttime:	db	128-5		;New clock calculation 
 4423:      1168 00             	db	00H		;16 bit mode
 4424:      1169 42             	db	42H
 4425:      116A 60             	db	60H
 4426:      116B 27             	db	27H
 4427:      116C 16             	db	16H
 4428:                          ;
 4429:                          ;***************************************
 4430:                          ;
 4431:                          	;**************************************
 4432:                          	;
 4433:                          	; COSINE - Add pi/2 to stack, then fall

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 81



 Line    I  Addr Code           Source

 4434:                          	;
 4435:                          	;**************************************
 4436:                          	;
 4437:      116D 31 92          ACOS:	ACALL	POTWO		;PUT PI/2 ON THE STAC
 4438:      116F F1 41          	ACALL	AADD		;TOS = TOS+PI/2
 4439:                          	;
 4440:                          	;**************************************
 4441:                          	;
 4442:                          	; SINE - use taylor series to calculate
 4443:                          	;
 4444:                          	;**************************************
 4445:                          	;
 4446:      1171 91 7F          ASIN:	ACALL	PIPI		;PUT PI ON THE STACK
 4447:      1173 31 B5          	ACALL	RV		;REDUCE THE VALUE
 4448:      1175 E5 46          	MOV	A,MT2		;CALCULATE THE SIGN
 4449:      1177 54 01          	ANL	A,#01H		;SAVE LSB
 4450:      1179 62 45          	XRL	MT1,A		;SAVE SIGN IN MT1
 4451:      117B 91 2C          	ACALL	CSTAKA		;NOW CONVERT TO ONE QUADR
 4452:      117D 31 92          	ACALL	POTWO
 4453:      117F 51 08          	ACALL	CMPLK		;DO COMPARE
 4454:      1181 40 04          	JC	ASIN1
 4455:      1183 91 7F          	ACALL	PIPI
 4456:      1185 F1 1C          	ACALL	ASUB
 4457:      1187 71 8F          ASIN1:	ACALL	AABS
 4458:      1189 90 16 CE       	MOV	DPTR,#SINTAB	;SET UP LOOKUP TABLE
 4459:      118C 31 9B          	ACALL	POLYC		;CALCULATE THE POLY
 4460:      118E 31 DA          	ACALL	STRIP
 4461:      1190 21 FC          	AJMP	SIN0
 4462:                          	;
 4463:                          	; Put PI/2 on the stack
 4464:                          	;
 4465:      1192 91 7F          POTWO:	ACALL	PIPI		;PUT PI ON THE STACK,
 4466:                          	;
 4467:      1194 90 11 61       DBTWO:	MOV	DPTR,#NTWO
 4468:      1197 91 33          	ACALL	PUSHC
 4469:                          	;MOV	A,#2		;BY TWO
 4470:                          	;ACALL	TWO_R2
 4471:      1199 81 0A          	AJMP	ADIV
 4472:                          	;
 4473:                          	;**************************************
 4474:                          	;
 4475:                          POLYC:	; Expand a power series to calcul
 4476:                          	;
 4477:                          	;**************************************
 4478:                          	;
 4479:      119B 91 2A          	ACALL	CSTAKA2 	;COPY THE STACK
 4480:      119D 31 B0          	ACALL	AMUL		;SQUARE THE STACK
 4481:      119F 91 48          	ACALL	POP_T1		;SAVE X*X
 4482:      11A1 91 33          	ACALL	PUSHC		;PUT CONSTANT ON STACK
 4483:                          	;
 4484:      11A3 91 4F          POLY1:	ACALL	PUSH_T1 	;PUT COMPUTED VALU
 4485:      11A5 31 B0          	ACALL	AMUL		;MULTIPLY CONSTANT AND COMP
 4486:      11A7 91 33          	ACALL	PUSHC		;PUT NEXT CONSTANT ON STAC
 4487:      11A9 F1 41          	ACALL	AADD		;ADD IT TO THE OLD VALUE
 4488:      11AB E4             	CLR	A		;CHECK TO SEE IF DONE
 4489:      11AC 93             	MOVC	A,@A+DPTR

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 82



 Line    I  Addr Code           Source

 4490:      11AD B4 FF F3       	CJNE	A,#0FFH,POLY1	;LOOP UNTIL DONE
 4491:                          	;
 4492:      11B0 12 19 75       AMUL:	LCALL	FP_BASE3
 4493:      11B3 01 38          	AJMP	FPTST
 4494:                          	;
 4495:                          	;**************************************
 4496:                          	;
 4497:                          RV:	; Reduce a value for Trig and A**X f
 4498:                          	;
 4499:                          	; value = (value/x - INT(value/x)) * x
 4500:                          	;
 4501:                          	;**************************************
 4502:                          	;
 4503:      11B5 91 6C          	ACALL	C2_T2		;COPY TOS TO T2
 4504:      11B7 91 0A          	ACALL	ADIV		;TOS = TOS/TEMP2
 4505:      11B9 71 8F          	ACALL	AABS		;MAKE THE TOS A POSITIVE NU
 4506:      11BB F5 45          	MOV	MT1,A		;SAVE THE SIGN
 4507:      11BD 91 2A          	ACALL	CSTAKA2 	;COPY THE STACK TWICE
 4508:      11BF 51 23          	ACALL	IFIX		;PUT THE NUMBER IN R3:R1
 4509:      11C1 C0 03          	PUSH	R3B0		;SAVE R3
 4510:      11C3 89 46          	MOV	MT2,R1		;SAVE THE LS BYTE IN MT2
 4511:      11C5 71 6D          	ACALL	AINT		;MAKE THE TOS AN INTEGER
 4512:      11C7 F1 1C          	ACALL	ASUB		;TOS = TOS/T2 - INT(TOS/T2)
 4513:      11C9 91 56          	ACALL	P_T2		;TOS = T2
 4514:      11CB 31 B0          	ACALL	AMUL		;TOS = T2*(TOS/T2 - INT(TOS
 4515:      11CD D0 03          	POP	R3B0		;RESTORE R3
 4516:      11CF 22             	RET			;EXIT
 4517:                          	;
 4518:                          	;**************************************
 4519:                          	;
 4520:                          	; TAN
 4521:                          	;
 4522:                          	;**************************************
 4523:                          	;
 4524:      11D0 91 2C          ATAN:	ACALL	CSTAKA		;DUPLACATE STACK
 4525:      11D2 31 71          	ACALL	ASIN		;TOS = SIN(X)
 4526:      11D4 91 5A          	ACALL	SWAP_ASTKA	;TOS = X
 4527:      11D6 31 6D          	ACALL	ACOS		;TOS = COS(X)
 4528:      11D8 81 0A          	AJMP	ADIV		;TOS = SIN(X)/COS(X)
 4529:                          	;
 4530:      11DA 51 53          STRIP:	ACALL	SETREG		;SETUP R0
 4531:      11DC 7B 01          	MOV	R3,#1		;LOOP COUNT
 4532:      11DE 61 81          	AJMP	AI11		;WASTE THE LSB
 4533:                          	;
 4534:                          	;**************************************
 4535:                          	;
 4536:                          	; ARC TAN
 4537:                          	;
 4538:                          	;**************************************
 4539:                          	;
 4540:      11E0 71 8F          AATAN:	ACALL	AABS
 4541:      11E2 F5 45          	MOV	MT1,A		;SAVE THE SIGN
 4542:      11E4 51 53          	ACALL	SETREG		;GET THE EXPONENT
 4543:      11E6 24 7F          	ADD	A,#7FH		;BIAS THE EXPONENT
 4544:      11E8 92 2A          	MOV	UBIT,C		;SAVE CARRY STATUS
 4545:      11EA 50 02          	JNC	AATAN1		;SEE IF > 1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 83



 Line    I  Addr Code           Source

 4546:      11EC 51 7C          	ACALL	RECIP		;IF > 1, TAKE RECIP
 4547:      11EE 90 11 2A       AATAN1: MOV	DPTR,#ATTAB	;SET UP TO CALCU
 4548:      11F1 31 9B          	ACALL	POLYC		;CALCULATE THE POLY
 4549:      11F3 30 2A 06       	JNB	UBIT,SIN0	;JUMP IF NOT SET
 4550:      11F6 71 A1          	ACALL	ANEG		;MAKE X POLY NEGATIVE
 4551:      11F8 31 92          	ACALL	POTWO		;SUBTRACT PI/2
 4552:      11FA F1 41          	ACALL	AADD
 4553:                          	;
 4554:      11FC E5 45          SIN0:	MOV	A,MT1		;GET THE SIGN
 4555:      11FE 60 19          	JZ	SRT
 4556:      1200 61 A1          	AJMP	ANEG
 4557:                          	;
 4558:                          	;**************************************
 4559:                          	;
 4560:                          	; FCOMP - COMPARE 0FFFFH TO TOS
 4561:                          	;
 4562:                          	;**************************************
 4563:                          	;
 4564:      1202 91 2C          FCMP:	ACALL	CSTAKA		;COPY THE STACK
 4565:      1204 71 CB          	ACALL	FSTK		;MAKE THE TOS = 0FFFFH
 4566:      1206 91 5A          	ACALL	SWAP_ASTKA	;NOW COMPARE IS 0FFFFH
 4567:                          	;
 4568:      1208 02 19 73       CMPLK:	JMP	FP_BASE2	;DO THE COMPARE
 4569:                          	;
 4570:                          	;**************************************
 4571:                          	;
 4572:                          DEC_ASTKA:	;Push ARG STACK and check for
 4573:                          	;
 4574:                          	;**************************************
 4575:                          	;
 4576:      120B 74 FA          	MOV	A,#-FPSIZ
 4577:      120D 25 09          	ADD	A,ASTKA
 4578:      120F B4 32 00       	CJNE	A,#LOW TM_TOP+6,DEC_ASTKA1
 4579:                          DEC_ASTKA1:
 4580:      1212 40 06          	JC	E4YY
 4581:      1214 F5 09          	MOV	ASTKA,A
 4582:      1216 F9             	MOV	R1,A
 4583:      1217 7B 01          	MOV	R3,#ASTKAH
 4584:                          	;
 4585:      1219 22             SRT:	RET
 4586:                          	;
 4587:      121A 90 03 7B       E4YY:	MOV	DPTR,#EXA
 4588:      121D 01 4B          	AJMP	FPTS		;ARG STACK ERROR
 4589:                          	;
 4590:                          	;
 4591:      121F 91 33          AXTAL3: ACALL	PUSHC		;PUSH CONSTANT, THE
 4592:      1221 31 B0          	ACALL	AMUL
 4593:                          	;
 4594:                          	; Fall thru to IFIX
 4595:                          	;
 4596:                          	;**************************************
 4597:                          	;
 4598:                          IFIX:	; Convert a floating point number 
 4599:                          	;
 4600:                          	;**************************************
 4601:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 84



 Line    I  Addr Code           Source

 4602:      1223 E4             	CLR	A		;RESET THE START
 4603:      1224 FB             	MOV	R3,A
 4604:      1225 F9             	MOV	R1,A
 4605:      1226 A8 09          	MOV	R0,ASTKA	;GET THE ARG STACK
 4606:      1228 75 A0 01       	MOV	P2,#ASTKAH
 4607:      122B E2             	MOVX	A,@R0		;READ EXPONENT
 4608:      122C C3             	CLR	C
 4609:      122D 94 81          	SUBB	A,#81H		;BASE EXPONENT
 4610:      122F FC             	MOV	R4,A		;SAVE IT
 4611:      1230 18             	DEC	R0		;POINT AT SIGN
 4612:      1231 E2             	MOVX	A,@R0		;GET THE SIGN
 4613:      1232 70 56          	JNZ	SQ_ERR		;ERROR IF NEGATIVE
 4614:      1234 40 19          	JC	INC_ASTKA	;EXIT IF EXPONENT IS < 81H
 4615:      1236 0C             	INC	R4		;ADJUST LOOP COUNTER
 4616:      1237 E8             	MOV	A,R0		;BUMP THE POINTER REGISTER
 4617:      1238 94 05          	SUBB	A,#FPSIZ-1
 4618:      123A F8             	MOV	R0,A
 4619:                          	;
 4620:      123B 08             I2:	INC	R0		;POINT AT DIGIT
 4621:      123C E2             	MOVX	A,@R0		;GET DIGIT
 4622:      123D C4             	SWAP	A		;FLIP
 4623:      123E 12 19 83       	CALL	FP_BASE10	;ACCUMULATE
 4624:      1241 40 47          	JC	SQ_ERR
 4625:      1243 DC 02          	DJNZ	R4,I21
 4626:      1245 80 08          	SJMP	INC_ASTKA
 4627:      1247 E2             I21:	MOVX	A,@R0		;GET DIGIT
 4628:      1248 12 19 83       	CALL	FP_BASE10
 4629:      124B 40 3D          	JC	SQ_ERR
 4630:      124D DC EC          	DJNZ	R4,I2
 4631:                          	;
 4632:                          	;**************************************
 4633:                          	;
 4634:                          INC_ASTKA:	; Pop the ARG STACK and check
 4635:                          	;
 4636:                          	;**************************************
 4637:                          	;
 4638:      124F 74 06          	MOV	A,#FPSIZ	;NUMBER TO POP
 4639:      1251 80 01          	SJMP	SETREG1
 4640:                          	;
 4641:      1253 E4             SETREG: CLR	A		;DON'T POP ANYTHING
 4642:      1254 A8 09          SETREG1:MOV	R0,ASTKA
 4643:      1256 7A 01          	MOV	R2,#ASTKAH
 4644:      1258 8A A0          	MOV	P2,R2
 4645:      125A 28             	ADD	A,R0
 4646:      125B 40 BD          	JC	E4YY
 4647:      125D F5 09          	MOV	ASTKA,A
 4648:      125F E2             	MOVX	A,@R0
 4649:      1260 22             A_D:	RET
 4650:                          	;
 4651:                          	;**************************************
 4652:                          	;
 4653:                          	; EBIAS - Bias a number for E to the X 
 4654:                          	;
 4655:                          	;**************************************
 4656:                          	;
 4657:      1261 91 43          EBIAS:	ACALL	PUSH_ONE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 85



 Line    I  Addr Code           Source

 4658:      1263 31 B5          	ACALL	RV
 4659:      1265 BB 00 22       	CJNE	R3,#00H,SQ_ERR	;ERROR IF R3 <> 0
 4660:      1268 91 6C          	ACALL	C2_T2		;TEMP 2 GETS FRACTIONS
 4661:      126A 51 4F          	ACALL	INC_ASTKA
 4662:      126C 91 48          	ACALL	POP_T1
 4663:      126E 91 43          	ACALL	PUSH_ONE
 4664:                          	;
 4665:      1270 E5 46          AELP:	MOV	A,MT2
 4666:      1272 70 0E          	JNZ	AEL1
 4667:                          	;
 4668:      1274 E5 45          	MOV	A,MT1
 4669:      1276 60 E8          	JZ	A_D
 4670:      1278 90 01 1E       	MOV	DPTR,#FPT2-1
 4671:      127B F0             	MOVX	@DPTR,A 	;MAKE THE FRACTIONS NEGAT
 4672:                          	;
 4673:      127C 91 43          RECIP:	ACALL	PUSH_ONE
 4674:      127E 91 5A          	ACALL	SWAP_ASTKA
 4675:      1280 81 0A          	AJMP	ADIV
 4676:                          	;
 4677:      1282 15 46          AEL1:	DEC	MT2
 4678:      1284 91 4F          	ACALL	PUSH_T1
 4679:      1286 31 B0          	ACALL	AMUL
 4680:      1288 80 E6          	SJMP	AELP
 4681:                          	;
 4682:      128A 02 09 BD       SQ_ERR: LJMP	E3XX		;LINK TO BAD ARG
 4683:                          	;
 4684:                          	;**************************************
 4685:                          	;
 4686:                          	; SQUARE ROOT
 4687:                          	;
 4688:                          	;**************************************
 4689:                          	;
 4690:      128D 71 8F          ASQR:	ACALL	AABS		;GET THE SIGN
 4691:      128F 70 F9          	JNZ	SQ_ERR		;ERROR IF NEGATIVE
 4692:      1291 91 6C          	ACALL	C2_T2		;COPY VARIABLE TO T2
 4693:      1293 91 48          	ACALL	POP_T1		;SAVE IT IN T1
 4694:      1295 78 19          	MOV	R0,#LOW FPT1
 4695:      1297 E2             	MOVX	A,@R0		;GET EXPONENT
 4696:      1298 60 24          	JZ	SQR41		;EXIT IF ZERO
 4697:      129A 24 80          	ADD	A,#128		;BIAS THE EXPONENT
 4698:      129C 50 05          	JNC	SQR1		;SEE IF < 80H
 4699:      129E 03             	RR	A
 4700:      129F 54 7F          	ANL	A,#127
 4701:      12A1 80 07          	SJMP	SQR2
 4702:                          	;
 4703:      12A3 F4             SQR1:	CPL	A		;FLIP BITS
 4704:      12A4 04             	INC	A
 4705:      12A5 03             	RR	A
 4706:      12A6 54 7F          	ANL	A,#127		;STRIP MSB
 4707:      12A8 F4             	CPL	A
 4708:      12A9 04             	INC	A
 4709:                          	;
 4710:      12AA 24 80          SQR2:	ADD	A,#128		;BIAS EXPONENT
 4711:      12AC F2             	MOVX	@R0,A		;SAVE IT
 4712:                          	;
 4713:                          	; NEWGUESS = ( X/OLDGUESS + OLDGUESS) /

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 86



 Line    I  Addr Code           Source

 4714:                          	;
 4715:      12AD 91 56          SQR4:	ACALL	P_T2		;TOS = X
 4716:      12AF 91 4F          	ACALL	PUSH_T1 	;PUT NUMBER ON STACK
 4717:      12B1 91 0A          	ACALL	ADIV		;TOS = X/GUESS
 4718:      12B3 91 4F          	ACALL	PUSH_T1 	;PUT ON AGAIN
 4719:      12B5 F1 41          	ACALL	AADD		;TOS = X/GUESS + GUESS
 4720:      12B7 31 94          	ACALL	DBTWO		;TOS = ( X/GUESS + GUESS )
 4721:      12B9 71 1C          	ACALL	TEMP_COMP	;SEE IF DONE
 4722:      12BB 30 D5 EF       	JNB	F0,SQR4
 4723:                          	;
 4724:      12BE 81 4F          SQR41:	AJMP	PUSH_T1 	;PUT THE ANSWER ON 
 4725:                          	;
 4726:                          	;**************************************
 4727:                          	;
 4728:                          	; NATURAL LOG
 4729:                          	;
 4730:                          	;**************************************
 4731:                          	;
 4732:      12C0 71 8F          ALN:	ACALL	AABS		;MAKE SURE THAT NUM IS 
 4733:      12C2 70 C6          	JNZ	SQ_ERR		;ERROR IF NOT
 4734:      12C4 F5 46          	MOV	MT2,A		;CLEAR FOR LOOP
 4735:      12C6 08             	INC	R0		;POINT AT EXPONENT
 4736:      12C7 E2             	MOVX	A,@R0		;READ THE EXPONENT
 4737:      12C8 60 C0          	JZ	SQ_ERR		;ERROR IF EXPONENT IS ZERO
 4738:      12CA B4 81 00       	CJNE	A,#81H,ALN1	;SEE IF NUM >= 1
 4739:      12CD 92 2A          ALN1:	MOV	UBIT,C		;SAVE CARRY STATUS
 4740:      12CF 40 02          	JC	ALNL		;TAKE RECIP IF >= 1
 4741:      12D1 51 7C          	ACALL	RECIP
 4742:                          	;
 4743:                          	; Loop to reduce
 4744:                          	;
 4745:      12D3 91 2C          ALNL:	ACALL	CSTAKA		;COPY THE STACK FOR 
 4746:      12D5 91 43          	ACALL	PUSH_ONE	;COMPARE NUM TO ONE
 4747:      12D7 51 08          	ACALL	CMPLK
 4748:      12D9 50 1D          	JNC	ALNO		;EXIT IF DONE
 4749:      12DB 51 53          	ACALL	SETREG		;GET THE EXPONENT
 4750:      12DD 24 85          	ADD	A,#85H		;SEE HOW BIG IT IS
 4751:      12DF 50 0E          	JNC	ALN11		;BUMP BY EXP(11) IF TOO SMAL
 4752:      12E1 91 30          	ACALL	PLNEXP		;PUT EXP(1) ON STACK
 4753:      12E3 74 01          	MOV	A,#1		;BUMP COUNT
 4754:                          	;
 4755:      12E5 25 46          ALNE:	ADD	A,MT2
 4756:      12E7 40 A1          	JC	SQ_ERR
 4757:      12E9 F5 46          	MOV	MT2,A
 4758:      12EB 31 B0          	ACALL	AMUL		;BIAS THE NUMBER
 4759:      12ED 80 E4          	SJMP	ALNL
 4760:                          	;
 4761:      12EF 90 17 F2       ALN11:	MOV	DPTR,#EXP11	;PUT EXP(11) ON S
 4762:      12F2 91 33          	ACALL	PUSHC
 4763:      12F4 74 0B          	MOV	A,#11
 4764:      12F6 80 ED          	SJMP	ALNE
 4765:                          	;
 4766:      12F8 91 6C          ALNO:	ACALL	C2_T2		;PUT NUM IN TEMP 2
 4767:      12FA 91 43          	ACALL	PUSH_ONE	;TOS = 1
 4768:      12FC F1 1C          	ACALL	ASUB		;TOS = X - 1
 4769:      12FE 91 56          	ACALL	P_T2		;TOS = X

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 87



 Line    I  Addr Code           Source

 4770:      1300 91 43          	ACALL	PUSH_ONE	;TOS = 1
 4771:      1302 F1 41          	ACALL	AADD		;TOS = X + 1
 4772:      1304 91 0A          	ACALL	ADIV		;TOS = (X-1)/(X+1)
 4773:      1306 90 16 A9       	MOV	DPTR,#LNTAB	;LOG TABLE
 4774:      1309 31 9B          	ACALL	POLYC
 4775:      130B A3             	INC	DPTR		;POINT AT LN(10)
 4776:      130C 91 33          	ACALL	PUSHC
 4777:      130E 31 B0          	ACALL	AMUL
 4778:      1310 E5 46          	MOV	A,MT2		;GET THE COUNT
 4779:      1312 91 B1          	ACALL	TWO_R2		;PUT IT ON THE STACK
 4780:      1314 F1 1C          	ACALL	ASUB		;INT - POLY
 4781:      1316 31 DA          	ACALL	STRIP
 4782:      1318 30 2A 74       	JNB	UBIT,AABS
 4783:                          	;
 4784:      131B 22             LN_D:	RET
 4785:                          	;
 4786:                          	;**************************************
 4787:                          	;
 4788:                          TEMP_COMP:	; Compare FPTEMP1 to TOS, FPT
 4789:                          	;
 4790:                          	;**************************************
 4791:                          	;
 4792:      131C 91 4F          	ACALL	PUSH_T1 	;SAVE THE TEMP
 4793:      131E 91 5A          	ACALL	SWAP_ASTKA	;TRADE WITH THE NEXT N
 4794:      1320 91 2C          	ACALL	CSTAKA		;COPY THE STACK
 4795:      1322 91 48          	ACALL	POP_T1		;SAVE THE NEW NUMBER
 4796:      1324 02 19 73       	JMP	FP_BASE2	;DO THE COMPARE
 4797:                          	;
 4798:      1327 91 30          AETOX:	ACALL	PLNEXP		;EXP(1) ON TOS
 4799:      1329 91 5A          	ACALL	SWAP_ASTKA	;X ON TOS
 4800:                          	;
 4801:                          AEXP:	;EXPONENTIATION
 4802:                          	;
 4803:      132B 51 61          	ACALL	EBIAS		;T1=BASE,T2=FRACTIONS,TOS=
 4804:      132D 90 01 1F       	MOV	DPTR,#FPT2	;POINT AT FRACTIONS
 4805:      1330 E0             	MOVX	A,@DPTR 	;READ THE EXP OF THE FRAC
 4806:      1331 60 E8          	JZ	LN_D		;EXIT IF ZERO
 4807:      1333 91 56          	ACALL	P_T2		;TOS = FRACTIONS
 4808:      1335 91 4F          	ACALL	PUSH_T1 	;TOS = BASE
 4809:      1337 51 53          	ACALL	SETREG		;SEE IF BASE IS ZERO
 4810:      1339 60 02          	JZ	AEXP1
 4811:      133B 51 C0          	ACALL	ALN		;TOS = LN(BASE)
 4812:      133D 31 B0          AEXP1:	ACALL	AMUL		;TOS = FRACTIONS * LN
 4813:      133F 91 30          	ACALL	PLNEXP		;TOS = EXP(1)
 4814:      1341 91 5A          	ACALL	SWAP_ASTKA	;TOS = FRACTIONS * LN(
 4815:      1343 51 61          	ACALL	EBIAS		;T2 = FRACTIONS, TOS = INT
 4816:      1345 75 46 00       	MOV	MT2,#00H	;NOW CALCULATE E**X
 4817:      1348 91 43          	ACALL	PUSH_ONE
 4818:      134A 91 2C          	ACALL	CSTAKA
 4819:      134C 91 48          	ACALL	POP_T1		;T1 = 1
 4820:                          	;
 4821:      134E 91 56          AEXL:	ACALL	P_T2		;TOS = FRACTIONS
 4822:      1350 31 B0          	ACALL	AMUL		;TOS = FRACTIONS * ACCUMLAT
 4823:      1352 05 46          	INC	MT2		;DO THE DEMONIATOR
 4824:      1354 E5 46          	MOV	A,MT2
 4825:      1356 91 B1          	ACALL	TWO_R2

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 88



 Line    I  Addr Code           Source

 4826:      1358 91 0A          	ACALL	ADIV
 4827:      135A 91 2C          	ACALL	CSTAKA		;SAVE THE ITERATION
 4828:      135C 91 4F          	ACALL	PUSH_T1 	;NOW ACCUMLATE
 4829:      135E F1 41          	ACALL	AADD		;ADD ACCUMLATION
 4830:      1360 71 1C          	ACALL	TEMP_COMP
 4831:      1362 30 D5 E9       	JNB	F0,AEXL 	;LOOP UNTIL DONE
 4832:                          	;
 4833:      1365 51 4F          	ACALL	INC_ASTKA
 4834:      1367 91 4F          	ACALL	PUSH_T1
 4835:      1369 31 B0          	ACALL	AMUL		;LAST INT MULTIPLIED
 4836:                          	;
 4837:      136B 21 B0          MU1:	AJMP	AMUL		;FIRST INT MULTIPLIED
 4838:                          	;
 4839:                          	;**************************************
 4840:                          	;
 4841:                          	; integer operator - INT
 4842:                          	;
 4843:                          	;**************************************
 4844:                          	;
 4845:      136D 51 53          AINT:	ACALL	SETREG		;SET UP THE REGISTER
 4846:      136F 94 81          	SUBB	A,#129		;SUBTRACT EXPONENT BIAS
 4847:      1371 50 07          	JNC	AI1		;JUMP IF ACC > 81H
 4848:                          	;
 4849:                          	; Force the number to be a zero
 4850:                          	;
 4851:      1373 51 4F          	ACALL	INC_ASTKA	;BUMP THE STACK
 4852:                          	;
 4853:      1375 90 04 E0       P_Z:	MOV	DPTR,#ZRO	;PUT ZERO ON THE STAC
 4854:      1378 81 33          	AJMP	PUSHC
 4855:                          	;
 4856:      137A 94 07          AI1:	SUBB	A,#7
 4857:      137C 50 10          	JNC	AI3
 4858:      137E F4             	CPL	A
 4859:      137F 04             	INC	A
 4860:      1380 FB             	MOV	R3,A
 4861:      1381 18             AI11:	DEC	R0		;POINT AT SIGN
 4862:                          	;
 4863:      1382 18             AI2:	DEC	R0		;NOW AT LSB'S
 4864:      1383 E2             	MOVX	A,@R0		;READ BYTE
 4865:      1384 54 F0          	ANL	A,#0F0H 	;STRIP NIBBLE
 4866:      1386 F2             	MOVX	@R0,A		;WRITE BYTE
 4867:      1387 DB 01          	DJNZ	R3,AI21
 4868:      1389 22             	RET
 4869:      138A E4             AI21:	CLR	A
 4870:      138B F2             	MOVX	@R0,A		;CLEAR THE LOCATION
 4871:      138C DB F4          	DJNZ	R3,AI2
 4872:                          	;
 4873:      138E 22             AI3:	RET			;EXIT
 4874:                          	;
 4875:                          	;**************************************
 4876:                          	;
 4877:                          AABS:	; Absolute value - Make sign of nu
 4878:                          	;		   return sign in ACC
 4879:                          	;
 4880:                          	;**************************************
 4881:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 89



 Line    I  Addr Code           Source

 4882:      138F 71 A1          	ACALL	ANEG		;CHECK TO SEE IF + OR -
 4883:      1391 70 19          	JNZ	ALPAR		;EXIT IF NON ZERO, BECAUSE T
 4884:      1393 F2             	MOVX	@R0,A		;MAKE A POSITIVE SIGN
 4885:      1394 22             	RET
 4886:                          	;
 4887:                          	;**************************************
 4888:                          	;
 4889:                          ASGN:	; Returns the sign of the number 1
 4890:                          	;
 4891:                          	;**************************************
 4892:                          	;
 4893:      1395 51 4F          	ACALL	INC_ASTKA	;POP STACK, GET EXPONEN
 4894:      1397 60 DC          	JZ	P_Z		;EXIT IF ZERO
 4895:      1399 18             	DEC	R0		;BUMP TO SIGN
 4896:      139A E2             	MOVX	A,@R0		;GET THE SIGN
 4897:      139B FF             	MOV	R7,A		;SAVE THE SIGN
 4898:      139C 91 43          	ACALL	PUSH_ONE	;PUT A ONE ON THE STACK
 4899:      139E EF             	MOV	A,R7		;GET THE SIGN
 4900:      139F 60 0B          	JZ	ALPAR		;EXIT IF ZERO
 4901:                          	;
 4902:                          	; Fall thru to ANEG
 4903:                          	;
 4904:                          	;**************************************
 4905:                          	;
 4906:                          ANEG:	; Flip the sign of the number on t
 4907:                          	;
 4908:                          	;**************************************
 4909:                          	;
 4910:      13A1 51 53          	ACALL	SETREG
 4911:      13A3 18             	DEC	R0		;POINT AT THE SIGN OF THE NUMBE
 4912:      13A4 60 06          	JZ	ALPAR		;EXIT IF ZERO
 4913:      13A6 E2             	MOVX	A,@R0
 4914:      13A7 64 01          	XRL	A,#01H		;FLIP THE SIGN
 4915:      13A9 F2             	MOVX	@R0,A
 4916:      13AA 64 01          	XRL	A,#01H		;RESTORE THE SIGN
 4917:                          	;
 4918:      13AC 22             ALPAR:	RET
 4919:                          	;
 4920:                          	;**************************************
 4921:                          	;
 4922:                          ACBYTE: ; Read the ROM
 4923:                          	;
 4924:                          	;**************************************
 4925:                          	;
 4926:      13AD 51 23          	ACALL	IFIX		;GET EXPRESSION
 4927:      13AF 12 05 79       	CALL	X31DP		;PUT R3:R1 INTO THE DP
 4928:      13B2 E4             	CLR	A
 4929:      13B3 93             	MOVC	A,@A+DPTR
 4930:      13B4 81 B1          	AJMP	TWO_R2
 4931:                          	;
 4932:                          	;**************************************
 4933:                          	;
 4934:                          ADBYTE: ; Read internal memory
 4935:                          	;
 4936:                          	;**************************************
 4937:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 90



 Line    I  Addr Code           Source

 4938:      13B6 51 23          	ACALL	IFIX		;GET THE EXPRESSION
 4939:      13B8 12 09 D5       	CALL	R3CK		;MAKE SURE R3 = 0
 4940:      13BB E7             	MOV	A,@R1
 4941:      13BC 81 B1          	AJMP	TWO_R2
 4942:                          	;
 4943:                          	;**************************************
 4944:                          	;
 4945:                          AXBYTE: ; Read external memory
 4946:                          	;
 4947:                          	;**************************************
 4948:                          	;
 4949:      13BE 51 23          	ACALL	IFIX		;GET THE EXPRESSION
 4950:      13C0 8B A0          AXBYTE1:MOV	P2,R3
 4951:      13C2 E3             	MOVX	A,@R1
 4952:      13C3 81 B1          	AJMP	TWO_R2
 4953:                          	;
 4954:                          	;**************************************
 4955:                          	;
 4956:                          	; The relational operators - EQUAL			  
 4957:                          	;			     GREATER THAN		  (>)
 4958:                          	;			     LESS THAN			  (<)
 4959:                          	;			     GREATER THAN OR EQUAL	  (>=)
 4960:                          	;			     LESS THAN OR EQUAL 	  (<=)
 4961:                          	;			     NOT EQUAL			  (<>)
 4962:                          	;
 4963:                          	;**************************************
 4964:                          	;
 4965:      13C5 51 08          AGT:	ACALL	CMPLK
 4966:      13C7 72 D5          	ORL	C,F0		;SEE IF EITHER IS A ONE
 4967:      13C9 40 AA          AGT1:	JC	P_Z
 4968:                          	;
 4969:      13CB 90 13 D0       FSTK:	MOV	DPTR,#FS
 4970:      13CE 81 33          	AJMP	PUSHC
 4971:                          	;
 4972:      13D0 85             FS:	DB	85H
 4973:      13D1 00             	DB	00H
 4974:      13D2 00             	DB	00H
 4975:      13D3 50             	DB	50H
 4976:      13D4 53             	DB	53H
 4977:      13D5 65             	DB	65H
 4978:                          	;
 4979:      13D6 51 08          ALT:	ACALL	CMPLK
 4980:      13D8 B3             ALT1:	CPL	C
 4981:      13D9 80 EE          	SJMP	AGT1
 4982:                          	;
 4983:      13DB 51 08          AEQ:	ACALL	CMPLK
 4984:      13DD A2 D5          AEQ1:	MOV	C,F0
 4985:      13DF 80 F7          	SJMP	ALT1
 4986:                          	;
 4987:      13E1 51 08          ANE:	ACALL	CMPLK
 4988:      13E3 B2 D5          	CPL	F0
 4989:      13E5 80 F6          	SJMP	AEQ1
 4990:                          	;
 4991:      13E7 51 08          AGE:	ACALL	CMPLK
 4992:      13E9 80 DE          	SJMP	AGT1
 4993:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 91



 Line    I  Addr Code           Source

 4994:      13EB 51 08          ALE:	ACALL	CMPLK
 4995:      13ED 72 D5          	ORL	C,F0
 4996:      13EF 80 E7          	SJMP	ALT1
 4997:                          	;
 4998:                          	;**************************************
 4999:                          	;
 5000:                          ARND:	; Generate a random number
 5001:                          	;
 5002:                          	;**************************************
 5003:                          	;
 5004:      13F1 90 01 0C       	MOV	DPTR,#RCELL	;GET THE BINARY SEED
 5005:      13F4 12 05 BA       	CALL	L31DPI
 5006:      13F7 E9             	MOV	A,R1
 5007:      13F8 C3             	CLR	C
 5008:      13F9 13             	RRC	A
 5009:      13FA F8             	MOV	R0,A
 5010:      13FB 74 06          	MOV	A,#6
 5011:      13FD 13             	RRC	A
 5012:      13FE 29             	ADD	A,R1
 5013:      13FF C8             	XCH	A,R0
 5014:      1400 3B             	ADDC	A,R3
 5015:      1401 FA             	MOV	R2,A
 5016:      1402 15 82          	DEC	DPL		;SAVE THE NEW SEED
 5017:      1404 91 24          	ACALL	S20DP
 5018:      1406 91 B4          	ACALL	TWO_EY
 5019:      1408 71 CB          	ACALL	FSTK
 5020:                          	;
 5021:      140A 12 19 77       ADIV:	LCALL	FP_BASE4
 5022:      140D 01 38          	AJMP	FPTST
 5023:                          	;
 5024:                          	;**************************************
 5025:                          	;
 5026:                          SONERR: ; ON ERROR Statement
 5027:                          	;
 5028:                          	;**************************************
 5029:                          	;
 5030:      140F 12 0F 30       	LCALL	INTERR		;GET THE LINE NUMBER
 5031:      1412 D2 13          	SETB	ON_ERR
 5032:      1414 90 01 02       	MOV	DPTR,#ERRNUM	;POINT AT THR ERROR LO
 5033:      1417 80 0B          	SJMP	S20DP
 5034:                          	;
 5035:                          	;
 5036:                          	;**************************************
 5037:                          	;
 5038:                          SONEXT: ; ON EXT1 Statement
 5039:                          	;
 5040:                          	;**************************************
 5041:                          	;
 5042:      1419 12 0F 30       	LCALL	INTERR
 5043:      141C D2 12          	SETB	INTBIT
 5044:      141E 43 A8 84       	ORL	IE,#10000100B	;ENABLE INTERRUPTS
 5045:      1421 90 01 20       	MOV	DPTR,#INTLOC
 5046:                          	;
 5047:      1424 EA             S20DP:	MOV	A,R2		;SAVE R2:R0 @DPTR
 5048:      1425 F0             	MOVX	@DPTR,A
 5049:      1426 A3             	INC	DPTR

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 92



 Line    I  Addr Code           Source

 5050:      1427 E8             	MOV	A,R0
 5051:      1428 F0             	MOVX	@DPTR,A
 5052:      1429 22             	RET
 5053:                          	;
 5054:                          	;**************************************
 5055:                          	;
 5056:                          	; CASTAK - Copy and push another top of
 5057:                          	;
 5058:                          	;**************************************
 5059:                          	;
 5060:      142A 91 2C          CSTAKA2:ACALL	CSTAKA		;COPY STACK TWICE
 5061:                          	;
 5062:      142C 51 53          CSTAKA: ACALL	SETREG		;SET UP R2:R0
 5063:      142E 80 23          	SJMP	PUSH_T12
 5064:                          	;
 5065:      1430 90 17 F8       PLNEXP: MOV	DPTR,#EXP1
 5066:                          	;
 5067:                          	;**************************************
 5068:                          	;
 5069:                          	; PUSHC - Push constant on to the arg s
 5070:                          	;
 5071:                          	;**************************************
 5072:                          	;
 5073:      1433 51 0B          PUSHC:	ACALL	DEC_ASTKA
 5074:      1435 8B A0          	MOV	P2,R3
 5075:      1437 7B 06          	MOV	R3,#FPSIZ	;LOOP COUNTER
 5076:                          	;
 5077:      1439 E4             PCL:	CLR	A		;SET UP A
 5078:      143A 93             	MOVC	A,@A+DPTR	;LOAD IT
 5079:      143B F3             	MOVX	@R1,A		;SAVE IT
 5080:      143C A3             	INC	DPTR		;BUMP POINTERS
 5081:      143D 19             	DEC	R1
 5082:      143E DB F9          	DJNZ	R3,PCL		;LOOP
 5083:                          	;
 5084:      1440 D2 24          	SETB	ARGF
 5085:      1442 22             	RET			;EXIT
 5086:                          	;
 5087:                          PUSH_ONE:;
 5088:                          	;
 5089:      1443 90 16 F2       	MOV	DPTR,#FPONE
 5090:      1446 81 33          	AJMP	PUSHC
 5091:                          	;
 5092:                          POP_T1:
 5093:                          	;
 5094:      1448 7B 01          	MOV	R3,#HIGH FPT1
 5095:      144A 79 19          	MOV	R1,#LOW FPT1
 5096:      144C 02 0F D3       	JMP	POPAS
 5097:                          	;
 5098:                          PUSH_T1:
 5099:                          	;
 5100:      144F 78 19          	MOV	R0,#LOW FPT1
 5101:                          PUSH_T11:
 5102:      1451 7A 01          	MOV	R2,#HIGH FPT1
 5103:                          PUSH_T12:
 5104:      1453 02 0F DD       	LJMP	PUSHAS
 5105:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 93



 Line    I  Addr Code           Source

 5106:      1456 78 1F          P_T2:	MOV	R0,#LOW FPT2
 5107:      1458 80 F7          	SJMP	PUSH_T11		;JUMP TO PUSHAS
 5108:                          	;
 5109:                          	;**************************************
 5110:                          	;
 5111:                          SWAP_ASTKA:	; SWAP TOS<>TOS-1
 5112:                          	;
 5113:                          	;**************************************
 5114:                          	;
 5115:      145A 51 53          	ACALL	SETREG		;SET UP R2:R0 AND P2
 5116:      145C 74 06          	MOV	A,#FPSIZ	;PUT TOS+1 IN R1
 5117:      145E FA             	MOV	R2,A
 5118:      145F 28             	ADD	A,R0
 5119:      1460 F9             	MOV	R1,A
 5120:                          	;
 5121:      1461 E2             S_L:	MOVX	A,@R0
 5122:      1462 FB             	MOV	R3,A
 5123:      1463 E3             	MOVX	A,@R1
 5124:      1464 F2             	MOVX	@R0,A
 5125:      1465 EB             	MOV	A,R3
 5126:      1466 F3             	MOVX	@R1,A
 5127:      1467 19             	DEC	R1
 5128:      1468 18             	DEC	R0
 5129:      1469 DA F6          	DJNZ	R2,S_L
 5130:      146B 22             	RET
 5131:                          	;
 5132:      146C 51 53          C2_T2:	ACALL	SETREG		;SET UP R2:R0
 5133:      146E 7B 01          	MOV	R3,#HIGH FPT2
 5134:      1470 79 1F          	MOV	R1,#LOW FPT2	;TEMP VALUE
 5135:                          	;
 5136:                          	; Fall thru
 5137:                          	;
 5138:                          	;**************************************
 5139:                          	;
 5140:                          	; VARCOP - Copy a variable from R2:R0 t
 5141:                          	;
 5142:                          	;**************************************
 5143:                          	;
 5144:      1472 7C 06          VARCOP: MOV	R4,#FPSIZ	;LOAD THE LOOP COU
 5145:                          	;
 5146:      1474 8A A0          V_C:	MOV	P2,R2		;SET UP THE PORTS
 5147:      1476 E2             	MOVX	A,@R0		;READ THE VALUE
 5148:      1477 8B A0          	MOV	P2,R3		;PORT TIME AGAIN
 5149:      1479 F3             	MOVX	@R1,A		;SAVE IT
 5150:      147A B1 8B          	ACALL	DEC3210 	;BUMP POINTERS
 5151:      147C DC F6          	DJNZ	R4,V_C		;LOOP
 5152:      147E 22             	RET			;EXIT
 5153:                          	;
 5154:      147F 90 17 FE       PIPI:	MOV	DPTR,#PIE
 5155:      1482 81 33          	AJMP	PUSHC
 5156:                          	;
 5157:                          	;**************************************
 5158:                          	;
 5159:                          	; The logical operators ANL, ORL, XRL, 
 5160:                          	;
 5161:                          	;**************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 94



 Line    I  Addr Code           Source

 5162:                          	;
 5163:      1484 91 A1          AANL:	ACALL	TWOL		;GET THE EXPRESSIONS
 5164:      1486 EB             	MOV	A,R3		;DO THE AND
 5165:      1487 5F             	ANL	A,R7
 5166:      1488 FA             	MOV	R2,A
 5167:      1489 E9             	MOV	A,R1
 5168:      148A 5E             	ANL	A,R6
 5169:      148B 80 26          	SJMP	TWO_EX
 5170:                          	;
 5171:      148D 91 A1          AORL:	ACALL	TWOL		;SAME THING FOR OR
 5172:      148F EB             	MOV	A,R3
 5173:      1490 4F             	ORL	A,R7
 5174:      1491 FA             	MOV	R2,A
 5175:      1492 E9             	MOV	A,R1
 5176:      1493 4E             	ORL	A,R6
 5177:      1494 80 1D          	SJMP	TWO_EX
 5178:                          	;
 5179:      1496 71 CB          ANOT:	ACALL	FSTK		;PUT 0FFFFH ON THE STA
 5180:                          	;
 5181:      1498 91 A1          AXRL:	ACALL	TWOL
 5182:      149A EB             	MOV	A,R3
 5183:      149B 6F             	XRL	A,R7
 5184:      149C FA             	MOV	R2,A
 5185:      149D E9             	MOV	A,R1
 5186:      149E 6E             	XRL	A,R6
 5187:      149F 80 12          	SJMP	TWO_EX
 5188:                          	;
 5189:      14A1 51 23          TWOL:	ACALL	IFIX
 5190:      14A3 AF 03          	MOV	R7,R3B0
 5191:      14A5 AE 01          	MOV	R6,R1B0
 5192:      14A7 41 23          	AJMP	IFIX
 5193:                          	;
 5194:                          	;**************************************
 5195:                          	;
 5196:                          AGET:	; READ THE BREAK BYTE AND PUT IT O
 5197:                          	;
 5198:                          	;**************************************
 5199:                          	;
 5200:      14A9 90 01 00       	MOV	DPTR,#GTB	;GET THE BREAK BYTE
 5201:      14AC E0             	MOVX	A,@DPTR
 5202:      14AD 10 18 01       	JBC	GTRD,TWO_R2
 5203:      14B0 E4             	CLR	A
 5204:                          	;
 5205:      14B1 7A 00          TWO_R2: MOV	R2,#00H 	;ACC GOES TO STACK
 5206:                          	;
 5207:                          	;
 5208:      14B3 F8             TWO_EX: MOV	R0,A		;R2:ACC GOES TO STACK
 5209:                          	;
 5210:                          	;
 5211:      14B4 D2 24          TWO_EY: SETB	ARGF		;R2:R0 GETS PUT ON TH
 5212:      14B6 02 19 87       	JMP	FP_BASE12	;DO IT
 5213:                          	;
 5214:                          	;**************************************
 5215:                          	;
 5216:                          	; Put directs onto the stack
 5217:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 95



 Line    I  Addr Code           Source

 5218:                          	;**************************************
 5219:                          	;
 5220:      14B9 E5 A8          A_IE:	MOV	A,IE		;IE
 5221:      14BB 80 F4          	SJMP	TWO_R2
 5222:                          	;
 5223:      14BD E5 B8          A_IP:	MOV	A,IP		;IP
 5224:      14BF 80 F0          	SJMP	TWO_R2
 5225:                          	;
 5226:      14C1 AA 8C          ATIM0:	MOV	R2,TH0		;TIMER 0
 5227:      14C3 A8 8A          	MOV	R0,TL0
 5228:      14C5 80 ED          	SJMP	TWO_EY
 5229:                          	;
 5230:      14C7 AA 8D          ATIM1:	MOV	R2,TH1		;TIMER 1
 5231:      14C9 A8 8B          	MOV	R0,TL1
 5232:      14CB 80 E7          	SJMP	TWO_EY
 5233:                          	;
 5234:      14CD AA CD          ATIM2:	MOV	R2,TH2
 5235:      14CF A8 CC          	MOV	R0,TL2
 5236:                          ;	DB	0AAH		;MOV R2 DIRECT OP CODE
 5237:                          ;	DB	0CDH		;T2 HIGH
 5238:                          ;	DB	0A8H		;MOV R0 DIRECT OP CODE
 5239:                          ;	DB	0CCH		;T2 LOW
 5240:      14D1 80 E1          	SJMP	TWO_EY		;TIMER 2
 5241:                          	;
 5242:      14D3 E5 C8          AT2CON: MOV	A,T2CON
 5243:                          ;	DB	0E5H		;MOV A,DIRECT OPCODE
 5244:                          ;	DB	0C8H		;T2CON LOCATION
 5245:      14D5 80 DA          	SJMP	TWO_R2
 5246:                          	;
 5247:      14D7 E5 88          ATCON:	MOV	A,TCON		;TCON
 5248:      14D9 80 D6          	SJMP	TWO_R2
 5249:                          	;
 5250:      14DB E5 89          ATMOD:	MOV	A,TMOD		;TMOD
 5251:      14DD 80 D2          	SJMP	TWO_R2
 5252:                          	;
 5253:      14DF AA CB          ARCAP2: MOV	R2,RCAPH2
 5254:      14E1 A8 CA          	MOV	R0,RCAPL2
 5255:                          ;	DB	0AAH		;MOV R2, DIRECT OP CODE
 5256:                          ;	DB	0CBH		;RCAP2H LOCATION
 5257:                          ;	DB	0A8H		;MOV R0, DIRECT OP CODE
 5258:                          ;	DB	0CAH		;R2CAPL LOCATION
 5259:      14E3 80 CF          	SJMP	TWO_EY
 5260:                          	;
 5261:      14E5 E5 90          AP1:	MOV	A,P1		;GET P1
 5262:      14E7 80 C8          	SJMP	TWO_R2		;PUT IT ON THE STACK
 5263:                          	;
 5264:      14E9 E5 87          APCON:	MOV	A,PCON
 5265:                          ;	DB	0E5H		;MOV A, DIRECT OP CODE
 5266:                          ;	DB	87H		;ADDRESS OF PCON
 5267:      14EB 80 C4          	SJMP	TWO_R2		;PUT PCON ON THE STACK
 5268:                          	;
 5269:                          	;**************************************
 5270:                          	;
 5271:                          	;THIS IS THE LINE EDITOR
 5272:                          	;
 5273:                          	;TAKE THE PROCESSED LINE IN IBUF AND IN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 96



 Line    I  Addr Code           Source

 5274:                          	;BASIC TEXT FILE.
 5275:                          	;
 5276:                          	;**************************************
 5277:                          	;
 5278:      14ED 02 05 6E       LINE0:	LJMP	NOGO		;CAN'T EDIT A ROM
 5279:                          	;
 5280:      14F0 E5 13          LINE:	MOV	A,BOFAH
 5281:      14F2 B4 02 F8       	CJNE	A,#HIGH PSTART,LINE0
 5282:      14F5 12 05 A9       	CALL	G4		;GET END ADDRESS FOR EDITING
 5283:      14F8 AC 82          	MOV	R4,DPL
 5284:      14FA AD 83          	MOV	R5,DPH
 5285:      14FC AB 0F          	MOV	R3,TEMP5	;GET HIGH ORDER IBLN
 5286:      14FE A9 0E          	MOV	R1,TEMP4	;LOW ORDER IBLN
 5287:                          	;
 5288:      1500 12 05 8C       	CALL	GETLIN		;FIND THE LINE
 5289:      1503 70 12          	JNZ	INSR		;INSERT IF NOT ZERO, ELSE APP
 5290:                          	;
 5291:                          	;APPEND THE LINE AT THE END
 5292:                          	;
 5293:      1505 E5 0D          	MOV	A,TEMP3 	;PUT IBCNT IN THE ACC
 5294:      1507 B4 04 01       	CJNE	A,#4H,LINE1	;SEE IF NO ENTRY
 5295:      150A 22             	RET			;RET IF NO ENTRY
 5296:                          	;
 5297:      150B B1 A8          LINE1:	ACALL	FULL		;SEE IF ENOUGH SPACE 
 5298:      150D AA 05          	MOV	R2,R5B0 	;PUT END ADDRESS A INTO TR
 5299:      150F A8 04          	MOV	R0,R4B0 	;REGISTERS
 5300:      1511 B1 66          	ACALL	IMOV		;DO THE BLOCK MOVE
 5301:                          	;
 5302:      1513 74 01          UE:	MOV	A,#EOF		;SAVE EOF CHARACTER
 5303:      1515 A1 99          	AJMP	TBR
 5304:                          	;
 5305:                          	;INSERT A LINE INTO THE FILE
 5306:                          	;
 5307:      1517 FF             INSR:	MOV	R7,A		;SAVE IT IN R7
 5308:      1518 12 18 54       	CALL	TEMPD		;SAVE INSERATION ADDRESS
 5309:      151B E5 0D          	MOV	A,TEMP3 	;PUT THE COUNT LENGTH IN T
 5310:      151D 40 09          	JC	LTX		;JUMP IF NEW LINE # NOT = OLD L
 5311:      151F B4 04 01       	CJNE	A,#04H,INSR1	;SEE IF NULL
 5312:      1522 E4             	CLR	A
 5313:                          	;
 5314:      1523 9F             INSR1:	SUBB	A,R7		;SUBTRACT LINE COUNT F
 5315:      1524 60 36          	JZ	LIN1		;LINE LENGTHS EQUAL
 5316:      1526 40 1F          	JC	GTX		;SMALLER LINE
 5317:                          	;
 5318:                          	;EXPAND FOR A NEW LINE OR A LARGER LINE
 5319:                          	;
 5320:      1528 FF             LTX:	MOV	R7,A		;SAVE A IN R7
 5321:      1529 E5 0D          	MOV	A,TEMP3 	;GET THE COUNT IN THE ACC
 5322:      152B B4 04 01       	CJNE	A,#04H,LTX1	;DO NO INSERTATION IF 
 5323:      152E 22             	RET			;EXIT IF IT IS
 5324:                          	;
 5325:      152F EF             LTX1:	MOV	A,R7		;GET THE COUNT BACK - DE
 5326:      1530 B1 A8          	ACALL	FULL		;SEE IF ENOUGH MEMORY NEW E
 5327:      1532 12 18 4D       	CALL	DTEMP		;GET INSERATION ADDRESS
 5328:      1535 B1 9D          	ACALL	NMOV		;R7:R6 GETS (EOFA)-DPTR
 5329:      1537 12 0D AD       	CALL	X3120

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 97



 Line    I  Addr Code           Source

 5330:      153A A9 04          	MOV	R1,R4B0 	;EOFA LOW
 5331:      153C AB 05          	MOV	R3,R5B0 	;EOFA HIGH
 5332:      153E 0E             	INC	R6		;INCREMENT BYTE COUNT
 5333:      153F BE 00 01       	CJNE	R6,#00,LTX2	;NEED TO BUMP HIGH BYT
 5334:      1542 0F             	INC	R7
 5335:                          	;
 5336:      1543 B1 81          LTX2:	ACALL	RMOV		;GO DO THE INSERTION
 5337:      1545 80 15          	SJMP	LIN1		;INSERT THE CURRENT LINE
 5338:                          	;
 5339:      1547 F4             GTX:	CPL	A		;FLIP ACC
 5340:      1548 04             	INC	A		;TWOS COMPLEMENT
 5341:      1549 12 05 DE       	CALL	ADDPTR		;DO THE ADDITION
 5342:      154C B1 9D          	ACALL	NMOV		;R7:R6 GETS (EOFA)-DPTR
 5343:      154E A9 82          	MOV	R1,DPL		;SET UP THE REGISTERS
 5344:      1550 AB 83          	MOV	R3,DPH
 5345:      1552 AA 0F          	MOV	R2,TEMP5	;PUT INSERTATION ADDRESS I
 5346:      1554 A8 0E          	MOV	R0,TEMP4
 5347:      1556 60 02          	JZ	GTX1		;IF ACC WAS ZERO FROM NMOV, JU
 5348:      1558 B1 6D          	ACALL	LMOV		;IF NO ZERO DO A LMOV
 5349:                          	;
 5350:      155A B1 13          GTX1:	ACALL	UE		;SAVE NEW END ADDRESS
 5351:                          	;
 5352:      155C AA 0F          LIN1:	MOV	R2,TEMP5	;GET THE INSERTATION 
 5353:      155E A8 0E          	MOV	R0,TEMP4
 5354:      1560 E5 0D          	MOV	A,TEMP3 	;PUT THE COUNT LENGTH IN A
 5355:      1562 B4 04 01       	CJNE	A,#04H,IMOV	;SEE IF NULL
 5356:      1565 22             	RET			;EXIT IF NULL
 5357:                          	;
 5358:                          	;**************************************
 5359:                          	;
 5360:                          	;INSERT A LINE AT ADDRESS R2:R0
 5361:                          	;
 5362:                          	;**************************************
 5363:                          	;
 5364:      1566 E4             IMOV:	CLR	A		;TO SET UP
 5365:      1567 79 04          	MOV	R1,#LOW IBCNT	;INITIALIZE THE REGIS
 5366:      1569 FB             	MOV	R3,A
 5367:      156A AE 0D          	MOV	R6,TEMP3	;PUT THE BYTE COUNT IN R6 
 5368:      156C FF             	MOV	R7,A		;PUT A 0 IN R7 FOR LMOV
 5369:                          	;
 5370:                          	;**************************************
 5371:                          	;
 5372:                          	;COPY A BLOCK FROM THE BEGINNING
 5373:                          	;
 5374:                          	;R2:R0 IS THE DESTINATION ADDRESS
 5375:                          	;R3:R1 IS THE SOURCE ADDRESS
 5376:                          	;R7:R6 IS THE COUNT REGISTER
 5377:                          	;
 5378:                          	;**************************************
 5379:                          	;
 5380:      156D B1 96          LMOV:	ACALL	TBYTE		;TRANSFER THE BYTE
 5381:      156F B1 76          	ACALL	INC3210 	;BUMP THE POINTER
 5382:      1571 D1 47          	ACALL	DEC76		;BUMP R7:R6
 5383:      1573 70 F8          	JNZ	LMOV		;LOOP
 5384:      1575 22             	RET			;GO BACK TO CALLING ROUTINE
 5385:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 98



 Line    I  Addr Code           Source

 5386:      1576 08             INC3210:INC	R0
 5387:      1577 B8 00 01       	CJNE	R0,#00H,INC3211
 5388:      157A 0A             	INC	R2
 5389:                          	;
 5390:      157B 09             INC3211:INC	R1
 5391:      157C B9 00 01       	CJNE	R1,#00H,INC3212
 5392:      157F 0B             	INC	R3
 5393:      1580 22             INC3212:RET
 5394:                          	;
 5395:                          	;**************************************
 5396:                          	;
 5397:                          	;COPY A BLOCK STARTING AT THE END
 5398:                          	;
 5399:                          	;R2:R0 IS THE DESTINATION ADDRESS
 5400:                          	;R3:R1 IS THE SOURCE ADDRESS
 5401:                          	;R6:R7 IS THE COUNT REGISTER
 5402:                          	;
 5403:                          	;**************************************
 5404:                          	;
 5405:      1581 B1 96          RMOV:	ACALL	TBYTE		;TRANSFER THE BYTE
 5406:      1583 B1 8B          	ACALL	DEC3210 	;DEC THE LOCATIONS
 5407:      1585 D1 47          	ACALL	DEC76		;BUMP THE COUNTER
 5408:      1587 70 F8          	JNZ	RMOV		;LOOP
 5409:                          	;
 5410:      1589 00             DEC_R:	NOP			;CREATE EQUAL TIMING
 5411:      158A 22             	RET			;EXIT
 5412:                          	;
 5413:      158B 18             DEC3210:DEC	R0		;BUMP THE POINTER
 5414:      158C B8 FF 01       	CJNE	R0,#0FFH,DEC3212;SEE IF OVERFLOWED
 5415:      158F 1A             DEC3211:DEC	R2		;BUMP THE HIGH BYTE
 5416:      1590 19             DEC3212:DEC	R1		;BUMP THE POINTER
 5417:      1591 B9 FF F5       	CJNE	R1,#0FFH,DEC_R	;SEE IF OVERFLOWED
 5418:      1594 1B             	DEC	R3		;CHANGE THE HIGH BYTE
 5419:      1595 22             	RET			;EXIT
 5420:                          	;
 5421:                          	;**************************************
 5422:                          	;
 5423:                          	;TBYTE - TRANSFER A BYTE
 5424:                          	;
 5425:                          	;**************************************
 5426:                          	;
 5427:      1596 8B A0          TBYTE:	MOV	P2,R3		;OUTPUT SOURCE REGISTE
 5428:      1598 E3             	MOVX	A,@R1		;PUT BYTE IN ACC
 5429:                          	;
 5430:      1599 8A A0          TBR:	MOV	P2,R2		;OUTPUT DESTINATION TO P
 5431:      159B F2             	MOVX	@R0,A		;SAVE THE BYTE
 5432:      159C 22             	RET			;EXIT
 5433:                          	;
 5434:                          	;**************************************
 5435:                          	;
 5436:                          	;NMOV - R7:R6 = END ADDRESS - DPTR
 5437:                          	;
 5438:                          	;ACC GETS CLOBBERED
 5439:                          	;
 5440:                          	;**************************************
 5441:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 99



 Line    I  Addr Code           Source

 5442:      159D EC             NMOV:	MOV	A,R4		;THE LOW BYTE OF EOFA
 5443:      159E C3             	CLR	C		;CLEAR THE CARRY FOR SUBB
 5444:      159F 95 82          	SUBB	A,DPL		;SUBTRACT DATA POINTER LOW
 5445:      15A1 FE             	MOV	R6,A		;PUT RESULT IN R6
 5446:      15A2 ED             	MOV	A,R5		;HIGH BYTE OF EOFA
 5447:      15A3 95 83          	SUBB	A,DPH		;SUBTRACT DATA POINTER HIGH
 5448:      15A5 FF             	MOV	R7,A		;PUT RESULT IN R7
 5449:      15A6 4E             	ORL	A,R6		;SEE IF ZERO
 5450:      15A7 22             NMOV1:	RET			;EXIT
 5451:                          	;
 5452:                          	;**************************************
 5453:                          	;
 5454:                          	;CHECK FOR A FILE OVERFLOW
 5455:                          	;LEAVES THE NEW END ADDRESS IN R3:R1
 5456:                          	;A HAS THE INCREASE IN SIZE
 5457:                          	;
 5458:                          	;**************************************
 5459:                          	;
 5460:      15A8 2C             FULL:	ADD	A,R4		;ADD A TO END ADDRESS
 5461:      15A9 F9             	MOV	R1,A		;SAVE IT
 5462:      15AA E4             	CLR	A
 5463:      15AB 3D             	ADDC	A,R5		;ADD THE CARRY
 5464:      15AC FB             	MOV	R3,A
 5465:      15AD 90 01 04       	MOV	DPTR,#VARTOP	;POINT AT VARTOP
 5466:                          	;
 5467:      15B0 12 05 CC       FUL1:	CALL	DCMPX		;COMPARE THE TWO
 5468:      15B3 40 F2          	JC	NMOV1		;OUT OF ROOM
 5469:                          	;
 5470:      15B5 90 18 16       TB:	MOV	DPTR,#E5X	;OUT OF MEMORY
 5471:      15B8 01 4B          	AJMP	FPTS
 5472:                          	;
 5473:                          	;**************************************
 5474:                          	;
 5475:                          	; PP - Preprocesses the line in IBUF ba
 5476:                          	;      sets F0 if no line number
 5477:                          	;      leaves the correct length of pro
 5478:                          	;      puts the line number in IBLN
 5479:                          	;      wastes the text address TXAL and
 5480:                          	;
 5481:                          	;**************************************
 5482:                          	;
 5483:      15BA F1 6C          PP:	ACALL	T_BUF		;TXA GETS IBUF
 5484:      15BC 12 0F 35       	CALL	INTGER		;SEE IF A NUMBER PRESENT
 5485:      15BF 12 18 54       	CALL	TEMPD		;SAVE THE INTEGER IN TEMP5:
 5486:      15C2 92 D5          	MOV	F0,C		;SAVE INTEGER IF PRESENT
 5487:      15C4 90 00 05       	MOV	DPTR,#IBLN	;SAVE THE LINE NUMBER, E
 5488:      15C7 91 24          	ACALL	S20DP
 5489:      15C9 A8 08          	MOV	R0,TXAL 	;TEXT POINTER
 5490:      15CB 79 07          	MOV	R1,#LOW IBUF	;STORE POINTER
 5491:                          	;
 5492:                          	; Now process the line back into IBUF
 5493:                          	;
 5494:      15CD C2 24          PPL:	CLR	ARGF		;FIRST PASS DESIGNATOR
 5495:      15CF 90 01 75       	MOV	DPTR,#TOKTAB	;POINT DPTR AT LOOK UP
 5496:                          	;
 5497:      15D2 88 05          PPL1:	MOV	R5B0,R0 	;SAVE THE READ POINTE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 100



 Line    I  Addr Code           Source

 5498:      15D4 E4             	CLR	A		;ZERO A FOR LOOKUP
 5499:      15D5 93             	MOVC	A,@A+DPTR	;GET THE TOKEN
 5500:      15D6 FF             	MOV	R7,A		;SAVE TOKEN IN CASE OF MATCH
 5501:                          	;
 5502:      15D7 E2             PPL2:	MOVX	A,@R0		;GET THE USER CHARACTE
 5503:      15D8 FB             	MOV	R3,A		;SAVE FOR REM
 5504:      15D9 B4 61 00       	CJNE	A,#'a',PPL21
 5505:      15DC 40 07          PPL21:	JC	PPX		;CONVERT LOWER TO UPPER C
 5506:      15DE B4 7B 00       	CJNE	A,#('z'+1),PPL22
 5507:      15E1 50 02          PPL22:	JNC	PPX
 5508:      15E3 C2 E5          	CLR	ACC.5
 5509:                          	;
 5510:      15E5 FA             PPX:	MOV	R2,A
 5511:      15E6 F2             	MOVX	@R0,A		;SAVE UPPER CASE
 5512:      15E7 A3             	INC	DPTR		;BUMP THE LOOKUP POINTER
 5513:      15E8 E4             	CLR	A
 5514:      15E9 93             	MOVC	A,@A+DPTR
 5515:      15EA B5 02 03       	CJNE	A,R2B0,PPL3	;LEAVE IF NOT THE SAME
 5516:      15ED 08             	INC	R0		;BUMP THE USER POINTER
 5517:      15EE 80 E7          	SJMP	PPL2		;CONTINUE TO LOOP
 5518:                          	;
 5519:      15F0 20 E7 2F       PPL3:	JB	ACC.7,PPL6	;JUMP IF FOUND MATCH
 5520:      15F3 60 2D          	JZ	PPL6		;USER MATCH
 5521:                          	;
 5522:                          	;
 5523:                          	; Scan to the next TOKTAB entry
 5524:                          	;
 5525:      15F5 A3             PPL4:	INC	DPTR		;ADVANCE THE POINTER
 5526:      15F6 E4             	CLR	A		;ZERO A FOR LOOKUP
 5527:      15F7 93             	MOVC	A,@A+DPTR	;LOAD A WITH TABLE
 5528:      15F8 20 E7 03       	JB	ACC.7,PPL41	;KEEP SCANNING IF NOT A 
 5529:      15FB 70 F8          	JNZ	PPL4
 5530:      15FD A3             	INC	DPTR
 5531:                          	;
 5532:                          	; See if at the end of TOKTAB
 5533:                          	;
 5534:      15FE A8 05          PPL41:	MOV	R0,R5B0 	;RESTORE THE POINTER
 5535:      1600 B4 FF CF       	CJNE	A,#0FFH,PPL1	;SEE IF END OF TABLE
 5536:                          	;
 5537:                          	; Character not in TOKTAB, so see what 
 5538:                          	;
 5539:      1603 BA 20 03       	CJNE	R2,#' ',PPLX    ;SEE IF A SPACE
 5540:      1606 08             	INC	R0		;BUMP USER POINTER
 5541:      1607 80 C4          	SJMP	PPL		;TRY AGAIN
 5542:                          	;
 5543:      1609 30 2D 0A       PPLX:	JNB	XBIT,PPLY	;EXTERNAL TRAP
 5544:      160C 20 24 07       	JB	ARGF,PPLY
 5545:      160F D2 24          	SETB	ARGF		;SAYS THAT THE USER HAS TABL
 5546:      1611 12 20 78       	LCALL	2078H		;SET UP POINTER
 5547:      1614 A1 D2          	AJMP	PPL1
 5548:                          	;
 5549:      1616 D1 2F          PPLY:	ACALL	PPL7		;SAVE CHARACTER, EXIT 
 5550:      1618 B4 22 B2       	CJNE	A,#'"',PPL      ;SEE IF QUOTED STR
 5551:                          	;
 5552:                          	; Just copy a quoted string
 5553:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 101



 Line    I  Addr Code           Source

 5554:      161B D1 2F          PPLY1:	ACALL	PPL7		;SAVE THE CHARACTER, 
 5555:      161D B4 22 FB       	CJNE	A,#'"',PPLY1    ;IS THERE AN ENDQU
 5556:      1620 80 AB          	SJMP	PPL		;DO IT AGAIN IF ENDQUOTE
 5557:                          	;
 5558:      1622 EF             PPL6:	MOV	A,R7		;GET THE TOKEN
 5559:      1623 D1 44          	ACALL	PPL91		;SAVE THE TOKEN
 5560:      1625 B4 96 A5       	CJNE	A,#T_REM,PPL	;SEE IF A REM TOKEN
 5561:      1628 EB             	MOV	A,R3
 5562:      1629 D1 30          	ACALL	PPL71		;WASTE THE REM STATEMENT
 5563:      162B D1 2F          PPL61:	ACALL	PPL7		;LOOP UNTIL A CR
 5564:      162D 80 FC          	SJMP	PPL61
 5565:                          	;
 5566:      162F E2             PPL7:	MOVX	A,@R0		;GET THE CHARACTER
 5567:      1630 B4 0D 10       PPL71:	CJNE	A,#CR,PPL9	;FINISH IF A CR
 5568:      1633 D0 00          	POP	R0B0		;WASTE THE CALLING STACK
 5569:      1635 D0 00          	POP	R0B0
 5570:      1637 F3             	MOVX	@R1,A		;SAVE CR IN MEMORY
 5571:      1638 09             	INC	R1		;SAVE A TERMINATOR
 5572:      1639 74 01          	MOV	A,#EOF
 5573:      163B F3             	MOVX	@R1,A
 5574:      163C E9             	MOV	A,R1		;SUBTRACT FOR LENGTH
 5575:      163D 94 04          	SUBB	A,#4
 5576:      163F F5 0D          	MOV	TEMP3,A 	;SAVE LENGTH
 5577:      1641 79 04          	MOV	R1,#LOW IBCNT	;POINT AT BUFFER COUN
 5578:                          	;
 5579:      1643 08             PPL9:	INC	R0
 5580:      1644 F3             PPL91:	MOVX	@R1,A		;SAVE THE CHARACTER
 5581:      1645 09             	INC	R1		;BUMP THE POINTERS
 5582:      1646 22             	RET			;EXIT TO CALLING ROUTINE
 5583:                          	;
 5584:                          	;
 5585:                          	;**************************************
 5586:                          	;
 5587:                          	;DEC76 - DECREMENT THE REGISTER PAIR R7
 5588:                          	;
 5589:                          	;ACC = ZERO IF R7:R6 = ZERO ; ELSE ACC 
 5590:                          	;
 5591:                          	;**************************************
 5592:                          	;
 5593:      1647 1E             DEC76:	DEC	R6		;BUMP R6
 5594:      1648 BE FF 01       	CJNE	R6,#0FFH,DEC77	;SEE IF RAPPED AROU
 5595:      164B 1F             	DEC	R7
 5596:      164C EF             DEC77:	MOV	A,R7		;SEE IF ZERO
 5597:      164D 4E             	ORL	A,R6
 5598:      164E 22             	RET			;EXIT
 5599:                          	;
 5600:                          	;**************************************
 5601:                          	;
 5602:                          	; MTOP - Get or Put the top of assigned
 5603:                          	;
 5604:                          	;**************************************
 5605:                          	;
 5606:      164F 90 01 0A       PMTOP:	MOV	DPTR,#MEMTOP
 5607:      1652 12 05 73       PMTOP1: CALL	L20DPI
 5608:      1655 81 B4          	AJMP	TWO_EY		;PUT R2:R0 ON THE STACK
 5609:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 102



 Line    I  Addr Code           Source

 5610:                          	;**************************************
 5611:                          	;
 5612:                          	; AXTAL - Crystal value calculations
 5613:                          	;
 5614:                          	;**************************************
 5615:                          	;
 5616:      1657 90 17 EC       AXTAL0: MOV	DPTR,#XTALV	;CRYSTAL VALUE
 5617:      165A 91 33          	ACALL	PUSHC
 5618:                          	;
 5619:      165C 91 2A          AXTAL1: ACALL	CSTAKA2 	;COPY CRYSTAL VAL
 5620:                          ;
 5621:                          ;***************************************
 5622:                          ;****** Disable Intel programming for to
 5623:                          ;
 5624:                          ;	ACALL	CSTAKA		;Copy crystal value the 
 5625:                          ;
 5626:                          ;***************************************
 5627:                          ;
 5628:      165E 90 07 09       	MOV	DPTR,#PTIME	;PROM TIMER
 5629:      1661 D1 79          	ACALL	AXTAL2
 5630:      1663 90 01 28       	MOV	DPTR,#PROGS
 5631:      1666 F1 0E          	ACALL	S31L
 5632:                          ;
 5633:                          ;***************************************
 5634:                          ;****** Disable Intel programming for to
 5635:                          ;
 5636:                          ;	MOV	DPTR,#IPTIME	;IPROM TIMER
 5637:                          ;	ACALL	AXTAL2
 5638:                          ;	MOV	DPTR,#IPROGS
 5639:                          ;	ACALL	S31L
 5640:                          ;
 5641:                          ;***************************************
 5642:                          ;
 5643:      1668 90 11 67       	MOV	DPTR,#TTIME	;CLOCK CALCULATION
 5644:      166B 51 1F          	ACALL	AXTAL3
 5645:      166D E9             	MOV	A,R1
 5646:      166E F4             	CPL	A
 5647:      166F 04             	INC	A
 5648:      1670 F5 4A          	MOV	SAVE_T,A
 5649:      1672 7B 01          	MOV	R3,#HIGH CXTAL
 5650:      1674 79 13          	MOV	R1,#LOW CXTAL
 5651:      1676 02 0F D3       	JMP	POPAS
 5652:                          	;
 5653:      1679 51 1F          AXTAL2: ACALL	AXTAL3
 5654:                          	;
 5655:                          CBIAS:	;Bias the crystal calculations
 5656:                          	;
 5657:      167B E9             	MOV	A,R1		;GET THE LOW COUNT
 5658:      167C F4             	CPL	A		;FLIP IT FOR TIMER LOAD
 5659:      167D 24 0F          	ADD	A,#15		;BIAS FOR CALL AND LOAD TIME
 5660:      167F F9             	MOV	R1,A		;RESTORE IT
 5661:      1680 EB             	MOV	A,R3		;GET THE HIGH COUNT
 5662:      1681 F4             	CPL	A		;FLIP IT
 5663:      1682 34 00          	ADDC	A,#00H		;ADD THE CARRY
 5664:      1684 FB             	MOV	R3,A		;RESTORE IT
 5665:      1685 22             	RET

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 103



 Line    I  Addr Code           Source

 5666:                          	;
 5667:                          	;**************************************
 5668:                          	;
 5669:                          STONE:	; Toggle the I/O port
 5670:                          	;
 5671:                          	;**************************************
 5672:                          	;
 5673:      1686 12 0E 78       	CALL	THREE		;GET THE NUMBERS
 5674:      1689 D1 7B          	ACALL	CBIAS		;BIAS R3:R1 FOR COUNT LOOP
 5675:                          	;
 5676:      168B C2 92          STONE1: CLR	T_BIT		;TOGGLE THE BIT
 5677:      168D C2 8E          	CLR	TR1		;STOP THE TIMER
 5678:      168F 8B 8D          	MOV	TH1,R3		;LOAD THE TIMER
 5679:      1691 89 8B          	MOV	TL1,R1
 5680:      1693 C2 8F          	CLR	TF1		;CLEAR THE OVERFLOW FLAG
 5681:      1695 D2 8E          	SETB	TR1		;TURN IT ON
 5682:      1697 D1 47          	ACALL	DEC76
 5683:      1699 30 8F FD       	JNB	TF1,$		;WAIT
 5684:      169C 71 AC          	ACALL	ALPAR
 5685:      169E D2 92          	SETB	T_BIT		;BACK TO A ONE
 5686:      16A0 12 05 2F       	CALL	TIMER_LOAD1	;LOAD THE HIGH VALUE
 5687:      16A3 30 8F FD       	JNB	TF1,$		;WAIT
 5688:      16A6 70 E3          	JNZ	STONE1		;LOOP
 5689:      16A8 22             	RET
 5690:                          	;
 5691:                          	;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
 5692:                          	;
 5693:                          LNTAB:	; Natural log lookup table
 5694:                          	;
 5695:                          	;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
 5696:                          	;
 5697:      16A9 80             	DB	80H
 5698:      16AA 00             	DB	00H
 5699:      16AB 71             	DB	71H
 5700:      16AC 37             	DB	37H
 5701:      16AD 13             	DB	13H
 5702:      16AE 19             	DB	19H
 5703:                          	;
 5704:      16AF 7F             	DB	7FH
 5705:      16B0 00             	DB	00H
 5706:      16B1 76             	DB	76H
 5707:      16B2 64             	DB	64H
 5708:      16B3 37             	DB	37H
 5709:      16B4 94             	DB	94H
 5710:                          	;
 5711:      16B5 80             	DB	80H
 5712:      16B6 00             	DB	00H
 5713:      16B7 07             	DB	07H
 5714:      16B8 22             	DB	22H
 5715:      16B9 75             	DB	75H
 5716:      16BA 17             	DB	17H
 5717:                          	;
 5718:      16BB 80             	DB	80H
 5719:      16BC 00             	DB	00H
 5720:      16BD 52             	DB	52H
 5721:      16BE 35             	DB	35H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 104



 Line    I  Addr Code           Source

 5722:      16BF 93             	DB	93H
 5723:      16C0 28             	DB	28H
 5724:                          	;
 5725:      16C1 80             	DB	80H
 5726:      16C2 00             	DB	00H
 5727:      16C3 71             	DB	71H
 5728:      16C4 91             	DB	91H
 5729:      16C5 85             	DB	85H
 5730:      16C6 86             	DB	86H
 5731:                          	;
 5732:      16C7 FF             	DB	0FFH
 5733:                          	;
 5734:      16C8 81             	DB	81H
 5735:      16C9 00             	DB	00H
 5736:      16CA 51             	DB	51H
 5737:      16CB 58             	DB	58H
 5738:      16CC 02             	DB	02H
 5739:      16CD 23             	DB	23H
 5740:                          	;
 5741:                          	;SINSINSINSINSINSINSINSINSINSINSINSINSI
 5742:                          	;
 5743:                          SINTAB: ; Sin lookup table
 5744:                          	;
 5745:                          	;SINSINSINSINSINSINSINSINSINSINSINSINSI
 5746:                          	;
 5747:      16CE 77             	DB	128-9
 5748:      16CF 00             	DB	00H
 5749:      16D0 44             	DB	44H
 5750:      16D1 90             	DB	90H
 5751:      16D2 05             	DB	05H
 5752:      16D3 16             	DB	16H
 5753:                          	;
 5754:      16D4 79             	DB	128-7
 5755:      16D5 01             	DB	01H
 5756:      16D6 08             	DB	08H
 5757:      16D7 21             	DB	21H
 5758:      16D8 05             	DB	05H
 5759:      16D9 25             	DB	25H
 5760:                          	;
 5761:      16DA 7B             	DB	128-5
 5762:      16DB 00             	DB	00H
 5763:      16DC 19             	DB	19H
 5764:      16DD 73             	DB	73H
 5765:      16DE 55             	DB	55H
 5766:      16DF 27             	DB	27H
 5767:      16E0 7D             	DB	128-3
 5768:      16E1 01             	DB	01H
 5769:      16E2 70             	DB	70H
 5770:      16E3 12             	DB	12H
 5771:      16E4 84             	DB	84H
 5772:      16E5 19             	DB	19H
 5773:                          	;
 5774:      16E6 7E             	DB	128-2
 5775:      16E7 00             	DB	00H
 5776:      16E8 33             	DB	33H
 5777:      16E9 33             	DB	33H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 105



 Line    I  Addr Code           Source

 5778:      16EA 33             	DB	33H
 5779:      16EB 83             	DB	83H
 5780:                          	;
 5781:      16EC 80             	DB	128
 5782:      16ED 01             	DB	01H
 5783:      16EE 67             	DB	67H
 5784:      16EF 66             	DB	66H
 5785:      16F0 66             	DB	66H
 5786:      16F1 16             	DB	16H
 5787:                          	;
 5788:      16F2 81             FPONE:	DB	128+1
 5789:      16F3 00             	DB	00H
 5790:      16F4 00             	DB	00H
 5791:      16F5 00             	DB	00H
 5792:      16F6 00             	DB	00H
 5793:      16F7 10             	DB	10H
 5794:                          	;
 5795:      16F8 FF             	DB	0FFH		;END OF TABLE
 5796:                          	;
 5797:      16F9 12 0F D9       SBAUD:	CALL	AXTAL		;PUT CRYSTAL ON THE S
 5798:      16FC 12 0F 43       	CALL	EXPRB		;PUT THE NUMBER AFTER BAUD 
 5799:      16FF 74 0C          	MOV	A,#12
 5800:      1701 91 B1          	ACALL	TWO_R2		;TOS = 12
 5801:      1703 31 B0          	ACALL	AMUL		;TOS = 12*BAUD
 5802:      1705 91 0A          	ACALL	ADIV		;TOS = XTAL/(12*BAUD)
 5803:      1707 51 23          	ACALL	IFIX
 5804:      1709 D1 7B          	ACALL	CBIAS
 5805:      170B 90 01 24       	MOV	DPTR,#SPV
 5806:                          	;
 5807:      170E 02 06 05       S31L:	JMP	S31DP
 5808:                          	;
 5809:      1711 D1 4F          AFREE:	CALL	PMTOP		;PUT MTOP ON STACK
 5810:      1713 12 05 A9       	CALL	G4		;GET END ADDRESS
 5811:      1716 A8 82          	MOV	R0,DPL
 5812:      1718 AA 83          	MOV	R2,DPH
 5813:      171A 91 B4          	ACALL	TWO_EY
 5814:                          	;
 5815:      171C 12 19 71       ASUB:	LCALL	FP_BASE1	;DO FP SUB
 5816:      171F 01 38          	AJMP	FPTST
 5817:                          	;
 5818:      1721 12 05 1C       ALEN:	CALL	CCAL		;CALCULATE THE LEN OF T
 5819:      1724 AA 07          	MOV	R2,R7B0 	;SAVE THE HIGH BYTE
 5820:      1726 EE             	MOV	A,R6		;SAVE THE LOW BYTE
 5821:      1727 81 B3          	AJMP	TWO_EX		;PUT IT ON THE STACK
 5822:                          	;
 5823:      1729 A2 AF          ATIME:	MOV	C,EA		;SAVE INTERRUTS
 5824:      172B C2 AF          	CLR	EA
 5825:      172D C0 47          	PUSH	MILLIV		;SAVE MILLI VALUE
 5826:      172F AA 48          	MOV	R2,TVH		;GET THE TIMER
 5827:      1731 E5 49          	MOV	A,TVL
 5828:      1733 92 AF          	MOV	EA,C		;SAVE INTERRUPTS
 5829:      1735 91 B3          	ACALL	TWO_EX		;PUT TIMER ON THE STACK
 5830:      1737 D0 E0          	POP	ACC		;GET MILLI
 5831:      1739 91 B1          	ACALL	TWO_R2		;PUT MILLI ON STACK
 5832:      173B 74 C8          	MOV	A,#200
 5833:      173D 91 B1          	ACALL	TWO_R2		;DIVIDE MILLI BY 200

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 106



 Line    I  Addr Code           Source

 5834:      173F 91 0A          	ACALL	ADIV
 5835:                          	;
 5836:      1741 12 19 6F       AADD:	LCALL	FP_BASE 	;DO FP ADDITION
 5837:      1744 01 38          	AJMP	FPTST		;CHECK FOR ERRORS
 5838:                          	;
 5839:                          	;**************************************
 5840:                          	;
 5841:                          	; Here are some error messages that wer
 5842:                          	;
 5843:                          	;**************************************
 5844:                          	;
 5845:                          	;
 5846:      1746 42 41 44 20    E1X:	DB	'BAD SYNTAX"'
            174A 53 59 4E 54
            174E 41 58 22
 5847:      1751 8A             E2X:	DB	128+10
 5848:      1752 44 49 56 49    	DB	'DIVIDE BY ZERO"'
            1756 44 45 20 42
            175A 59 20 5A 45
            175E 52 4F 22
 5849:                          	;
 5850:      1761 41 52 52 41    E6X:	DB	'ARRAY SIZE"'
            1765 59 20 53 49
            1769 5A 45 22
 5851:                          	;
 5852:                          	;**************************************
 5853:                          	;
 5854:                          T_BUF:	; TXA gets IBUF
 5855:                          	;
 5856:                          	;**************************************
 5857:                          	;
 5858:      176C 75 0A 00       	MOV	TXAH,#HIGH IBUF
 5859:      176F 75 08 07       	MOV	TXAL,#LOW IBUF
 5860:      1772 22             	RET
 5861:                          	;
 5862:                          	;
 5863:                          	;**************************************
 5864:                          	;
 5865:                          CXFER:	; Transfer a program from rom to 
 5866:                          	;
 5867:                          	;**************************************
 5868:                          	;
 5869:      1773 12 05 1C       	CALL	CCAL		;GET EVERYTHING SET UP
 5870:      1776 7A 02          	MOV	R2,#HIGH PSTART
 5871:      1778 78 00          	MOV	R0,#LOW PSTART
 5872:      177A B1 6D          	ACALL	LMOV		;DO THE TRANSFER
 5873:      177C 12 06 64       	CALL	RCLEAR		;CLEAR THE MEMORY
 5874:                          	;
 5875:                          	; Fall thru to CRAM
 5876:                          	;
 5877:                          	;**************************************
 5878:                          	;
 5879:                          CRAM:	; The command action routine - RAM
 5880:                          	;
 5881:                          	;**************************************
 5882:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 107



 Line    I  Addr Code           Source

 5883:      177F C2 17          	CLR	CONB		;CAN'T CONTINUE IF MODE CHANG
 5884:      1781 75 13 02       	MOV	BOFAH,#HIGH PSTART
 5885:      1784 75 14 00       	MOV	BOFAL,#LOW PSTART
 5886:                          	;
 5887:                          	; Fall thru to Command Processor
 5888:                          	;
 5889:                          	;**************************************
 5890:                          	;
 5891:                          CMND1:	; The entry point for the command
 5892:                          	;
 5893:                          	;**************************************
 5894:                          	;
 5895:      1787 12 0C 31       	LCALL	SPRINT1 	;WASTE AT AND HEX
 5896:      178A C2 2D          	CLR	XBIT		;TO RESET IF NEEDED
 5897:                          ;
 5898:                          ;***************************************
 5899:                          ;****** Karmann 1 Bugfix ***************
 5900:                          ;
 5901:      178C F1 E0          	acall	TEST_USER	;check for user command
 5902:                          ;
 5903:                          ;****** continue with original code: ***
 5904:                          ;
 5905:      178E 90 00 FD       	MOV	DPTR,#RDYS	;PRINT THE READY MESSAGE
 5906:      1791 12 06 AD       	CALL	CRP		;DO A CR, THEN, PRINT FROM TH
 5907:                          	;
 5908:      1794 D2 2F          CMNDR:	SETB	DIRF		;SET THE DIRECT INPUT 
 5909:      1796 85 3E 81       	MOV	SP,SPSAV	;LOAD THE STACK
 5910:      1799 11 9D          	ACALL	CL7		;DO A CRLF
 5911:                          	;
 5912:      179B C2 18          CMNX:	CLR	GTRD		;CLEAR BREAK
 5913:      179D 90 00 5E       	MOV	DPTR,#5EH	;DO RUN TRAP
 5914:      17A0 E0             	MOVX	A,@DPTR
 5915:      17A1 64 34          	XRL	A,#52
 5916:      17A3 70 03          	JNZ	CMNX1
 5917:      17A5 02 08 02       	LJMP	CRUN
 5918:      17A8 7D 3E          CMNX1:	MOV	R5,#'>'         ;OUTPUT A PRO
 5919:      17AA 12 07 11       	LCALL	TEROT
 5920:      17AD 12 06 D8       	CALL	INLINE		;INPUT A LINE INTO IBUF
 5921:      17B0 B1 BA          	CALL	PP		;PRE-PROCESS THE LINE
 5922:      17B2 20 D5 0F       	JB	F0,CMND3	;NO LINE NUMBER
 5923:      17B5 91 F0          	CALL	LINE		;PROCESS THE LINE
 5924:      17B7 12 05 E7       	LCALL	LCLR
 5925:      17BA 20 15 DE       	JB	LINEB,CMNX	;DON'T CLEAR MEMORY IF NO
 5926:      17BD D2 15          	SETB	LINEB
 5927:      17BF 12 06 64       	LCALL	RCLEAR		;CLEAR THE MEMORY
 5928:      17C2 80 D7          	SJMP	CMNX		;LOOP BACK
 5929:                          	;
 5930:      17C4 F1 6C          CMND3:	CALL	T_BUF		;SET UP THE TEXT POIN
 5931:      17C6 12 0E E1       	CALL	DELTST		;GET THE CHARACTER
 5932:      17C9 60 C9          	JZ	CMNDR		;IF CR, EXIT
 5933:      17CB 90 01 0F       	MOV	DPTR,#CMNDD	;POINT AT THE COMMAND L
 5934:      17CE B4 F0 00       	CJNE	A,#T_CMND,CMND31;PROCESS STATEMENT
 5935:      17D1 40 0A          CMND31: JC	CMND5
 5936:      17D3 12 0E D7       	CALL	GCI1		;BUMP TXA
 5937:      17D6 54 0F          	ANL	A,#0FH		;STRIP MSB'S FOR LOOKUP
 5938:      17D8 12 09 5C       	LCALL	ISTA1		;PROCESS COMMAND

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 108



 Line    I  Addr Code           Source

 5939:      17DB 80 B7          	SJMP	CMNDR
 5940:                          	;
 5941:      17DD 02 08 13       CMND5:	LJMP	ILOOP		;CHECK FOR A POSSIBLE
 5942:                          ;
 5943:                          ;***************************************
 5944:                          ;****** Karmann 1 Bugfix ***************
 5945:                          ;
 5946:                          TEST_USER:			;check for user command ext
 5947:      17E0 E4             	CLR	A
 5948:      17E1 90 20 02       	MOV	DPTR,#2002H	;CHECK FOR EXTERNAL TRA
 5949:      17E4 93             	MOVC	A,@A+DPTR
 5950:      17E5 B4 5A 03       	CJNE	A,#5AH,CMND11	;test for user comma
 5951:      17E8 12 20 48       	LCALL	2048H		;IF PRESENT JUMP TO LOCATI
 5952:      17EB 22             CMND11: ret
 5953:                          ;
 5954:                          ;****** continue with original code: ***
 5955:                          ;
 5956:                          	;CONSTANTS
 5957:                          	;
 5958:      17EC 88             XTALV:	DB	128+8		; DEFAULT CRYSTAL VALUE
 5959:      17ED 00             	DB	00H
 5960:      17EE 00             	DB	00H
 5961:      17EF 00             	DB	00H
 5962:      17F0 00             	DB	00H
 5963:      17F1 24             	DB	24H
 5964:                          	;
 5965:      17F2 85             EXP11:	DB	85H
 5966:      17F3 00             	DB	00H
 5967:      17F4 42             	DB	42H
 5968:      17F5 41             	DB	41H
 5969:      17F6 87             	DB	87H
 5970:      17F7 59             	DB	59H
 5971:                          	;
 5972:      17F8 81             EXP1:	DB	128+1		; EXP(1)
 5973:      17F9 00             	DB	00H
 5974:      17FA 18             	DB	18H
 5975:      17FB 28             	DB	28H
 5976:      17FC 18             	DB	18H
 5977:      17FD 27             	DB	27H
 5978:                          ;
 5979:                          ;***************************************
 5980:                          ;****** Disable Intel programming for to
 5981:                          ;
 5982:                          ;IPTIME: DB	128-4		;FPROG TIMING
 5983:                          ;	DB	00H
 5984:                          ;	DB	00H
 5985:                          ;	DB	00H
 5986:                          ;	DB	75H
 5987:                          ;	DB	83H
 5988:                          ;
 5989:                          ;***************************************
 5990:                          ;
 5991:      17FE 81             PIE:	DB	128+1		;PI
 5992:      17FF 00             	DB	00H
 5993:      1800 26             	DB	26H
 5994:      1801 59             	DB	59H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 109



 Line    I  Addr Code           Source

 5995:      1802 41             	DB	41H
 5996:      1803 31             	DB	31H		; 3.1415926
 5997:                          	;
 5998:                          	;**************************************
 5999:                          	;
 6000:                          	; The error messages, some have been mo
 6001:                          	;
 6002:                          	;**************************************
 6003:                          	;
 6004:      1804 9E             E7X:	DB	128+30
 6005:      1805 41 52 49 54    	DB	'ARITH. UNDERFLOW"'
            1809 48 2E 20 55
            180D 4E 44 45 52
            1811 46 4C 4F 57
            1815 22
 6006:                          	;
 6007:      1816 4D 45 4D 4F    E5X:	DB	'MEMORY ALLOCATION"'
            181A 52 59 20 41
            181E 4C 4C 4F 43
            1822 41 54 49 4F
            1826 4E 22
 6008:                          	;
 6009:      1828 A8             E3X:	DB	128+40
 6010:      1829 42 41 44 20    	DB	'BAD ARGUMENT"'
            182D 41 52 47 55
            1831 4D 45 4E 54
            1835 22
 6011:                          	;
 6012:      1836 49 2D 53 54    EXI:	DB	'I-STACK"'
            183A 41 43 4B 22
 6013:                          	;
 6014:                          	;**************************************
 6015:                          	;
 6016:                          	; The command action routine - CONTINUE
 6017:                          	;
 6018:                          	;**************************************
 6019:                          	;
 6020:      183E 90 1F A6       CCONT:	MOV	DPTR,#E15X
 6021:      1841 30 17 4B       	JNB	CONB,ERROR	;ERROR IF CONTINUE IS NO
 6022:                          	;
 6023:                          CC1:	;used for input statement entry
 6024:                          	;
 6025:      1844 85 42 0A       	MOV	TXAH,INTXAH	;RESTORE TXA
 6026:      1847 85 43 08       	MOV	TXAL,INTXAL
 6027:      184A 02 08 0F       	JMP	CILOOP		;EXECUTE
 6028:                          	;
 6029:      184D 85 0F 83       DTEMP:	MOV	DPH,TEMP5	;RESTORE DPTR
 6030:      1850 85 0E 82       	MOV	DPL,TEMP4
 6031:      1853 22             	RET
 6032:                          	;
 6033:      1854 85 83 0F       TEMPD:	MOV	TEMP5,DPH
 6034:      1857 85 82 0E       	MOV	TEMP4,DPL
 6035:      185A 22             	RET
 6036:                          	;
 6037:                          	;**************************************
 6038:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 110



 Line    I  Addr Code           Source

 6039:                          I_DL:	; IDLE
 6040:                          	;
 6041:                          	;**************************************
 6042:                          	;
 6043:      185B 20 2F 27       	JB	DIRF,E1XX	;SYNTAX ERROR IN DIRECT IN
 6044:      185E C2 96          	CLR	DACK		;ACK IDLE
 6045:                          	;
 6046:      1860 43 87 01       U_ID1:	ORL	PCON,#01H
 6047:                          ;	DB	01000011B	;ORL DIRECT OP CODE
 6048:                          ;	DB	87H		;PCON ADDRESS
 6049:                          ;	DB	01H		;SET IDLE BIT
 6050:      1863 20 16 0B       	JB	INTPEN,I_RET	;EXIT IF EXTERNAL INTER
 6051:      1866 10 21 08       	JBC	U_IDL,I_RET	;EXIT IF USER WANTS TO
 6052:      1869 30 10 F4       	JNB	OTS,U_ID1	;LOOP IF TIMER NOT ENABLE
 6053:      186C 12 07 E3       	LCALL	T_CMP		;CHECK THE TIMER
 6054:      186F 40 EF          	JC	U_ID1		;LOOP IF TIME NOT BIG ENOUGH
 6055:                          	;
 6056:      1871 D2 96          I_RET:	SETB	DACK		;RESTORE EXECUTION
 6057:      1873 22             	RET			;EXIT IF IT IS
 6058:                          	;
 6059:                          	;
 6060:                          	;
 6061:      1874 A3             ER0:	INC	DPTR		;BUMP TO TEXT
 6062:      1875 20 2F 23       	JB	DIRF,ERROR0	;CAN'T GET OUT OF DIRECT
 6063:      1878 30 13 20       	JNB	ON_ERR,ERROR0	;IF ON ERROR ISN'T SE
 6064:      187B 90 01 01       	MOV	DPTR,#ERRLOC	;SAVE THE ERROR CODE
 6065:      187E 12 06 73       	CALL	RC2		;SAVE ERROR AND SET UP THE ST
 6066:      1881 A3             	INC	DPTR		;POINT AT ERRNUM
 6067:      1882 02 08 44       	JMP	ERL4		;LOAD ERR NUM AND EXIT
 6068:                          	;
 6069:                          	; Syntax error
 6070:                          	;
 6071:      1885 A2 2F          E1XX:	MOV	C,DIRF		;SEE IF IN DIRECT MODE
 6072:      1887 90 17 46       E1XX1:	MOV	DPTR,#E1X	;ERROR MESSAGE
 6073:      188A 80 04          	SJMP	ERROR1		;TRAP ON SET DIRF
 6074:                          	;
 6075:      188C 90 18 36       E1XX2:	MOV	DPTR,#EXI	;STACK ERROR
 6076:                          	;
 6077:                          	; Falls through
 6078:                          	;
 6079:                          	;**************************************
 6080:                          	;
 6081:                          	;ERROR PROCESSOR - PRINT OUT THE ERROR 
 6082:                          	;		   RUN OR COMMAND MODE, FIND AND PRI
 6083:                          	;		   LINE NUMBER IF IN RUN MODE
 6084:                          	;
 6085:                          	;**************************************
 6086:                          	;
 6087:      188F C3             ERROR:	CLR	C		;RESET STACK
 6088:      1890 85 3E 81       ERROR1: MOV	SP,SPSAV	;RESET THE STACK
 6089:      1893 12 0C 31       	LCALL	SPRINT1 	;CLEAR LINE AND AT MODE
 6090:      1896 E4             	CLR	A		;SET UP TO GET ERROR CODE
 6091:      1897 93             	MOVC	A,@A+DPTR
 6092:      1898 10 E7 D9       	JBC	ACC.7,ER0	;PROCESS ERROR
 6093:                          	;
 6094:      189B 11 54          ERROR0: ACALL	TEMPD		;SAVE THE DATA POIN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 111



 Line    I  Addr Code           Source

 6095:      189D 40 03          	JC	ERROR01 	;NO RESET IF CARRY IS SET
 6096:      189F 12 06 6F       	LCALL	RC1		;RESET THE STACKS
 6097:      18A2 12 06 A3       ERROR01:CALL	CRLF2		;DO TWO CARRIAGE RET
 6098:      18A5 90 1F F8       	MOV	DPTR,#ERS	;OUTPUT ERROR MESSAGE
 6099:      18A8 12 06 AF       	CALL	ROM_P
 6100:      18AB 11 4D          	CALL	DTEMP		;GET THE ERROR MESSAGE BACK
 6101:                          	;
 6102:      18AD 12 06 AF       ERRS:	CALL	ROM_P		;PRINT ERROR TYPE
 6103:      18B0 30 2F 05       	JNB	DIRF,ER1	;DO NOT PRINT IN LINE IF D
 6104:                          	;
 6105:      18B3 C2 20          SERR1:	CLR	STOPBIT 	;PRINT STOP THEN EXI
 6106:      18B5 02 17 87       	JMP	CMND1
 6107:                          	;
 6108:      18B8 90 01 03       ER1:	MOV	DPTR,#INS	;OUTPUT IN LINE
 6109:      18BB 12 06 AF       	CALL	ROM_P
 6110:                          	;
 6111:                          	;NOW, FIND THE LINE NUMBER
 6112:                          	;
 6113:                          	;
 6114:      18BE 12 0E 9B       	CALL	DP_B		;GET THE FIRST ADDRESS OF TH
 6115:      18C1 E4             	CLR	A		;FOR INITIALIZATION
 6116:                          	;
 6117:      18C2 11 54          ER2:	ACALL	TEMPD		;SAVE THE DPTR
 6118:      18C4 12 05 DE       	CALL	ADDPTR		;ADD ACC TO DPTR
 6119:      18C7 11 FB          	ACALL	ER4		;R3:R1 = TXA-DPTR
 6120:      18C9 40 06          	JC	ER3		;EXIT IF DPTR>TXA
 6121:      18CB 60 04          	JZ	ER3		;EXIT IF DPTR=TXA
 6122:      18CD E0             	MOVX	A,@DPTR 	;GET LENGTH
 6123:      18CE B4 01 F1       	CJNE	A,#EOF,ER2	;SEE IF AT THE END
 6124:                          	;
 6125:      18D1 11 4D          ER3:	ACALL	DTEMP		;PUT THE LINE IN THE D
 6126:      18D3 11 FB          	ACALL	ER4		;R3:R1 = TXA - BEGINNING OF 
 6127:      18D5 E9             	MOV	A,R1		;GET LENGTH
 6128:      18D6 24 0A          	ADD	A,#10		;ADD 10 TO LENGTH, DPTR STIL
 6129:      18D8 F5 45          	MOV	MT1,A		;SAVE THE COUNT
 6130:      18DA A3             	INC	DPTR		;POINT AT LINE NUMBER HIGH BY
 6131:      18DB 12 16 52       	CALL	PMTOP1		;LOAD R2:R0, PUT IT ON THE
 6132:      18DE 31 7D          	ACALL	FP_BASE7	;OUTPUT IT
 6133:      18E0 20 20 D0       	JB	STOPBIT,SERR1	;EXIT IF STOP BIT SET
 6134:      18E3 12 06 A3       	CALL	CRLF2		;DO SOME CRLF'S
 6135:      18E6 11 4D          	CALL	DTEMP
 6136:      18E8 12 10 A3       	CALL	UPPL		;UNPROCESS THE LINE
 6137:      18EB 12 10 94       	CALL	CL6		;PRINT IT
 6138:      18EE 7D 2D          ER31:	MOV	R5,#'-'         ;OUTPUT DASHES
 6139:      18F0 31 6C          	ACALL	T_L		;PRINT AN X IF ERROR CHARACT
 6140:      18F2 D5 45 F9       	DJNZ	MT1,ER31	;LOOP UNTIL DONE
 6141:      18F5 7D 58          	MOV	R5,#'X'
 6142:      18F7 31 6C          	ACALL	T_L
 6143:      18F9 01 B3          	AJMP	SERR1
 6144:                          	;
 6145:      18FB AB 0A          ER4:	MOV	R3,TXAH 	;GET TEXT POINTER AND 
 6146:      18FD A9 08          	MOV	R1,TXAL
 6147:      18FF 02 0A 02       	JMP	DUBSUB
 6148:                          	;
 6149:                          	;**************************************
 6150:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 112



 Line    I  Addr Code           Source

 6151:                          	; Interrupt driven timer
 6152:                          	;
 6153:                          	;**************************************
 6154:                          	;
 6155:      1902 85 4A 8C       I_DR:	MOV	TH0,SAVE_T	;LOAD THE TIMER
 6156:      1905 C5 47          	XCH	A,MILLIV	;SAVE A, GET MILLI COUNTER
 6157:      1907 04             	INC	A		;BUMP COUNTER
 6158:      1908 B4 C8 08       	CJNE	A,#200,TR	;CHECK OUT TIMER VALUE
 6159:      190B E4             	CLR	A		;FORCE ACC TO BE ZERO
 6160:      190C 05 49          	INC	TVL		;INCREMENT LOW TIMER
 6161:      190E B5 49 02       	CJNE	A,TVL,TR	;CHECK LOW VALUE
 6162:      1911 05 48          	INC	TVH		;BUMP TIMER HIGH
 6163:                          	;
 6164:      1913 C5 47          TR:	XCH	A,MILLIV
 6165:      1915 D0 D0          	POP	PSW
 6166:      1917 32             	RETI
 6167:                          	;
 6168:                          	;**************************************
 6169:                          	;
 6170:                          	; The statement action routine - CLOCK
 6171:                          	;
 6172:                          	;**************************************
 6173:                          	;
 6174:      1918 31 38          SCLOCK: ACALL	OTST		;GET CHARACTER AFTER
 6175:      191A C2 A9          	CLR	ET0
 6176:      191C C2 2E          	CLR	C_BIT
 6177:      191E 50 0D          	JNC	SC_R		;EXIT IF A ZERO
 6178:                          ;
 6179:                          ;***************************************
 6180:                          ;****** Use XTAL up to 47 MHz **********
 6181:                          ;****** Wulf 2 *************************
 6182:                          ;
 6183:                          ;	ANL	TMOD,#0F0H	;SET UP THE MODE
 6184:                          ;
 6185:      1920 53 89 F1       	anl	TMOD,#0F1H	;Set up 16 bit mode for 
 6186:      1923 43 89 01       	orl	TMOD,#01H
 6187:                          ;
 6188:                          ;***************************************
 6189:                          ;
 6190:      1926 D2 2E          	SETB	C_BIT		;USER INTERRUPTS
 6191:      1928 43 A8 82       	ORL	IE,#82H 	;ENABLE ET0 AND EA
 6192:      192B D2 8C          	SETB	TR0		;TURN ON THE TIMER
 6193:                          	;
 6194:      192D 22             SC_R:	RET
 6195:                          	;
 6196:                          	;**************************************
 6197:                          	;
 6198:                          SUI:	; Statement USER IN action routine
 6199:                          	;
 6200:                          	;**************************************
 6201:                          	;
 6202:      192E 31 38          	ACALL	OTST
 6203:      1930 92 1E          	MOV	CIUB,C		;SET OR CLEAR CIUB
 6204:      1932 22             	RET
 6205:                          	;
 6206:                          	;**************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 113



 Line    I  Addr Code           Source

 6207:                          	;
 6208:                          SUO:	; Statement USER OUT action routine
 6209:                          	;
 6210:                          	;**************************************
 6211:                          	;
 6212:      1933 31 38          	ACALL	OTST
 6213:      1935 92 1C          	MOV	COUB,C
 6214:      1937 22             	RET
 6215:                          	;
 6216:                          OTST:	; Check for a one
 6217:                          	;
 6218:      1938 12 0E D5       	LCALL	GCI		;GET THE CHARACTER, CLEARS C
 6219:      193B 94 31          	SUBB	A,#'1'          ;SEE IF A ONE
 6220:      193D B3             	CPL	C		;SETS CARRY IF ONE, CLEARS IT IF
 6221:      193E 22             OTST1:	RET
 6222:                          	;
 6223:                          	;**************************************
 6224:                          	;
 6225:                          	; IBLK - EXECUTE USER SUPPLIED TOKEN
 6226:                          	;
 6227:                          	;**************************************
 6228:                          	;
 6229:      193F 20 D4 FC       IBLK:	JB	PSW.4,OTST1	;EXIT IF REGISTER B
 6230:      1942 20 D3 F9       	JB	PSW.3,OTST1
 6231:      1945 10 E7 06       	JBC	ACC.7,IBLK1	;SEE IF BIT SEVEN IS SE
 6232:      1948 90 00 47       	MOV	DPTR,#USENT	;USER ENTRY LOCATION
 6233:      194B 02 09 5C       	LJMP	ISTA1
 6234:                          	;
 6235:      194E 20 E0 2A       IBLK1:	JB	ACC.0,FP_BASE6	;FLOATING POINT
 6236:      1951 60 19          	JZ	T_L		;DO OUTPUT ON 80H
 6237:      1953 90 19 6D       	MOV	DPTR,#FP_BASE-2
 6238:      1956 73             	JMP	@A+DPTR
 6239:                          	;
 6240:                          	;
 6241:                          	;**************************************
 6242:                          	;
 6243:                          	; GET_NUM - GET A NUMBER, EITHER HEX OR
 6244:                          	;
 6245:                          	;**************************************
 6246:                          	;
 6247:      1957 31 79          GET_NUM:ACALL	FP_BASE5	;SCAN FOR HEX
 6248:      1959 50 20          	JNC	FP_BASE6	;DO FP INPUT
 6249:                          	;
 6250:      195B 31 81          	ACALL	FP_BASE9	;ASCII STRING TO R2:R0
 6251:      195D 70 0C          	JNZ	H_RET
 6252:      195F C0 83          	PUSH	DPH		;SAVE THE DATA_POINTER
 6253:      1961 C0 82          	PUSH	DPL
 6254:      1963 31 87          	ACALL	FP_BASE12	;PUT R2:R0 ON THE STACK
 6255:      1965 D0 82          	POP	DPL		;RESTORE THE DATA_POINTER
 6256:      1967 D0 83          	POP	DPH
 6257:      1969 E4             	CLR	A		;NO ERRORS
 6258:      196A 22             	RET			;EXIT
 6259:                          	;
 6260:                          	;**************************************
 6261:                          	;
 6262:                          	; WB - THE EGO MESSAGE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 114



 Line    I  Addr Code           Source

 6263:                          	;
 6264:                          	;**************************************
 6265:                          ;
 6266:                          ;***************************************
 6267:                          ;****** Sorry - but the ego message had 
 6268:                          ;
 6269:                          ;WB:
 6270:                          ;
 6271:                          ;	DB	'W'+80H,'R'+80H
 6272:                          ;	DB	'I'+80H,'T'+80H,'T','E'+80H,'N'+80H
 6273:                          ;	DB	' ','B'+80H,'Y'+80H,' '
 6274:                          ;	DB	'J'+80H,'O'+80H,'H'+80H,'N'+80H,' '
 6275:                          ;	DB	'K','A'+80H,'T'+80H,'A'+80H,'U'+80H
 6276:                          ;	DB	'S','K'+80H,'Y'+80H
 6277:                          ;	DB	', I','N'+80H,'T'+80H,'E'+80H,'L'+8
 6278:                          ;	DB	' '+80H,'C'+80H,'O'+80H,'R'+80H,'P'
 6279:                          ;	DB	'. 1','9'+80H,'85'
 6280:                          ;
 6281:                          ;***************************************
 6282:                          	;
 6283:      196B 22             H_RET:	RET
 6284:                          	;
 6285:                          ;***************************************
 6286:                          ;
 6287:                          ; This is a complete BCD floating point 
 6288:                          ; controller. It provides 8 digits of ac
 6289:                          ; range from +127 to -127. The mantissa 
 6290:                          ; exponent is expressed in pseudo-twos c
 6291:                          ; is used to express the number ZERO. An
 6292:                          ; greater than means the exponent is pos
 6293:                          ; 81H = E+1, 82H = E+2 and so on. If the
 6294:                          ; the exponent is negative, 7FH = E-1, 7
 6295:                          ; ALL NUMBERS ARE ASSUMED TO BE NORMALIZ
 6296:                          ; normalized after calculation. A normal
 6297:                          ; <=.99999999.
 6298:                          ;
 6299:                          ; The numbers in memory assumed to be st
 6300:                          ;
 6301:                          ; EXPONENT OF ARGUMENT 2   =   VALUE OF 
 6302:                          ; SIGN OF ARGUMENT 2	   =   VALUE OF ARG
 6303:                          ; DIGIT 78 OF ARGUMENT 2   =   VALUE OF 
 6304:                          ; DIGIT 56 OF ARGUMENT 2   =   VALUE OF 
 6305:                          ; DIGIT 34 OF ARGUMENT 2   =   VALUE OF 
 6306:                          ; DIGIT 12 OF ARGUMENT 2   =   VALUE OF 
 6307:                          ;
 6308:                          ; EXPONENT OF ARGUMENT 1   =   VALUE OF 
 6309:                          ; SIGN OF ARGUMENT 1	   =   VALUE OF ARG
 6310:                          ; DIGIT 78 OF ARGUMENT 1   =   VALUE OF 
 6311:                          ; DIGIT 56 OF ARGUMENT 1   =   VALUE OF 
 6312:                          ; DIGIT 34 OF ARGUMENT 1   =   VALUE OF 
 6313:                          ; DIGIT 12 OF ARGUMENT 1   =   VALUE OF 
 6314:                          ;
 6315:                          ; The operations are performed thusly:
 6316:                          ;
 6317:                          ; ARG_STACK+FP_NUMBER_SIZE = ARG_STACK+F
 6318:                          ;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 115



 Line    I  Addr Code           Source

 6319:                          ; Which is ARGUMENT 2 = ARGUMENT 2 # ARG
 6320:                          ;
 6321:                          ; Where # can be ADD, SUBTRACT, MULTIPLY
 6322:                          ;
 6323:                          ; Note that the stack gets popped after 
 6324:                          ;
 6325:                          ; The FP_COMP instruction POPS the ARG_S
 6326:                          ;
 6327:                          ;***************************************
 6328:                          ;
 6329:                          ;***************************************
 6330:                          ;
 6331:                          ; STATUS ON RETURN - After performing an
 6332:                          ;		     the accumulator contains the fol
 6333:                          ;
 6334:                          ; ACCUMULATOR - BIT 0 - FLOATING POINT U
 6335:                          ;
 6336:                          ;	      - BIT 1 - FLOATING POINT OVERFLO
 6337:                          ;
 6338:                          ;	      - BIT 2 - RESULT WAS ZER0
 6339:                          ;
 6340:                          ;	      - BIT 3 - DIVIDE BY ZERO ATTEMPT
 6341:                          ;
 6342:                          ;	      - BIT 4 - NOT USED, 0 RETURNED
 6343:                          ;
 6344:                          ;	      - BIT 5 - NOT USED, 0 RETURNED
 6345:                          ;
 6346:                          ;	      - BIT 6 - NOT USED, 0 RETURNED
 6347:                          ;
 6348:                          ;	      - BIT 7 - NOT USED, 0 RETURNED
 6349:                          ;
 6350:                          ; NOTE: When underflow occures, a ZERO r
 6351:                          ;	When overflow or divide by zero occure
 6352:                          ;	.99999999 E+127 is returned and it is 
 6353:                          ;	to handle these conditions as needed i
 6354:                          ;
 6355:                          ; NOTE: The Compare instruction returns 
 6356:                          ;	and returns a CARRY FLAG = 1 if ARG 1 
 6357:                          ;
 6358:                          ;***************************************
 6359:                          ;
 6360:                          ;***************************************
 6361:                          ;
 6362:                          ; The following values MUST be provided 
 6363:                          ;
 6364:                          ;***************************************
 6365:                          ;
 6366:           N      0009    ARG_STACK	EQU	9	;ARGUMENT STACK POINTER
 6367:           N      0001    ARG_STACK_PAGE	EQU	1
 6368:                          ;OUTPUT 	 EQU	 1990H	 ;CALL LOCATION TO 
 6369:           N      0058    CONVERT 	EQU	58H	;LOCATION TO CONVERT NU
 6370:           B        19    INTGRC		BIT	25	;BIT SET IF INTGER ERROR
 6371:                          ;
 6372:                          ;***************************************
 6373:                          ;
 6374:                          ; The following equates are used interna

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 116



 Line    I  Addr Code           Source

 6375:                          ;
 6376:                          ;***************************************
 6377:                          ;
 6378:           N      0006    FP_NUMBER_SIZE	EQU	6
 6379:           N      0000    UNDERFLOW	EQU	0
 6380:           N      0001    OVERFLOW	EQU	1
 6381:           N      0002    ZERO		EQU	2
 6382:           N      0003    ZERO_DIVIDE	EQU	3
 6383:                          ;
 6384:                          ;***************************************
 6385:                          ;
 6386:                          	;**************************************
 6387:                          	;
 6388:                          	; The following internal locations are 
 6389:                          	; ordering is important and the FP_DIGI
 6390:                          	; addressable
 6391:                          	;
 6392:                          	;**************************************
 6393:                          	;
 6394:           N      0028    FP_STATUS	EQU	28H		;NOT USED
 6395:           N      0029    FP_TEMP 	EQU	FP_STATUS+1	;NOT USED
 6396:           N      002A    FP_CARRY	EQU	FP_STATUS+2	;USED FOR BITS
 6397:           B        23    ADD_IN		BIT	35		;DCMPXZ IN BASIC BACKAGE
 6398:           B        50    XSIGN		BIT	FP_CARRY.0
 6399:           B        51    FOUND_RADIX	BIT	FP_CARRY.1
 6400:           B        52    FIRST_RADIX	BIT	FP_CARRY.2
 6401:           B        53    DONE_LOAD	BIT	FP_CARRY.3
 6402:           N      002B    FP_DIG12	EQU	FP_CARRY+1
 6403:           N      002C    FP_DIG34	EQU	FP_CARRY+2
 6404:           N      002D    FP_DIG56	EQU	FP_CARRY+3
 6405:           N      002E    FP_DIG78	EQU	FP_CARRY+4
 6406:           N      002F    FP_SIGN 	EQU	FP_CARRY+5
 6407:           B        78    MSIGN		BIT	FP_SIGN.0
 6408:           N      0030    FP_EXP		EQU	FP_CARRY+6
 6409:           N      002B    FP_NIB1 	EQU	FP_DIG12
 6410:           N      002C    FP_NIB2 	EQU	FP_NIB1+1
 6411:           N      002D    FP_NIB3 	EQU	FP_NIB1+2
 6412:           N      002E    FP_NIB4 	EQU	FP_NIB1+3
 6413:           N      002F    FP_NIB5 	EQU	FP_NIB1+4
 6414:           N      0030    FP_NIB6 	EQU	FP_NIB1+5
 6415:           N      0031    FP_NIB7 	EQU	FP_NIB1+6
 6416:           N      0032    FP_NIB8 	EQU	FP_NIB1+7
 6417:           N      0033    FP_ACCX 	EQU	FP_NIB1+8
 6418:           N      0034    FP_ACCC 	EQU	FP_NIB1+9
 6419:           N      0035    FP_ACC1 	EQU	FP_NIB1+10
 6420:           N      0036    FP_ACC2 	EQU	FP_NIB1+11
 6421:           N      0037    FP_ACC3 	EQU	FP_NIB1+12
 6422:           N      0038    FP_ACC4 	EQU	FP_NIB1+13
 6423:           N      0039    FP_ACC5 	EQU	FP_NIB1+14
 6424:           N      003A    FP_ACC6 	EQU	FP_NIB1+15
 6425:           N      003B    FP_ACC7 	EQU	FP_NIB1+16
 6426:           N      003C    FP_ACC8 	EQU	FP_NIB1+17
 6427:           N      003D    FP_ACCS 	EQU	FP_NIB1+18
 6428:                          	;
 6429:                          ;	 ORG	 1990H
 6430:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 117



 Line    I  Addr Code           Source

 6431:                          OUTPUT:
 6432:      196C 02 07 11       T_L:	LJMP	TEROT
 6433:                          	;
 6434:                          	;
 6435:                          	;**************************************
 6436:                          	;
 6437:                          	; The floating point entry points and j
 6438:                          	;
 6439:                          	;**************************************
 6440:                          	;
 6441:      196F 21 93          FP_BASE:	AJMP	FLOATING_ADD
 6442:      1971 21 89          FP_BASE1:	AJMP	FLOATING_SUB
 6443:      1973 41 43          FP_BASE2:	AJMP	FLOATING_COMP
 6444:      1975 41 73          FP_BASE3:	AJMP	FLOATING_MUL
 6445:      1977 41 B0          FP_BASE4:	AJMP	FLOATING_DIV
 6446:      1979 81 89          FP_BASE5:	AJMP	HEXSCAN
 6447:      197B 81 C2          FP_BASE6:	AJMP	FLOATING_POINT_INPUT
 6448:      197D A1 7A          FP_BASE7:	AJMP	FLOATING_POINT_OUTPUT
 6449:      197F C1 F7          FP_BASE8:	AJMP	CONVERT_BINARY_TO_ASCII_S
 6450:      1981 C1 9E          FP_BASE9:	AJMP	CONVERT_ASCII_STRING_TO_B
 6451:      1983 C1 D3          FP_BASE10:	AJMP	MULNUM10
 6452:      1985 E1 30          FP_BASE11:	AJMP	HEXOUT
 6453:      1987 81 B6          FP_BASE12:	AJMP	PUSHR2R0
 6454:                          	;
 6455:                          	;
 6456:                          FLOATING_SUB:
 6457:                          	;
 6458:      1989 75 A0 01       	MOV	P2,#ARG_STACK_PAGE
 6459:      198C A8 09          	MOV	R0,ARG_STACK
 6460:      198E 18             	DEC	R0		;POINT TO SIGN
 6461:      198F E2             	MOVX	A,@R0		;READ SIGN
 6462:      1990 B2 E0          	CPL	ACC.0
 6463:      1992 F2             	MOVX	@R0,A
 6464:                          	;
 6465:                          	;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 6466:                          	;
 6467:                          FLOATING_ADD:
 6468:                          	;
 6469:                          	;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 6470:                          	;
 6471:                          	;
 6472:      1993 91 6A          	ACALL	MDES1		;R7=TOS EXP, R6=TOS-1 EXP,
 6473:                          				;R3=TOS-1 SIGN, OPERATION IS R1 # R0
 6474:                          	;
 6475:      1995 EF             	MOV	A,R7		;GET TOS EXPONENT
 6476:      1996 60 0D          	JZ	POP_AND_EXIT	;IF TOS=0 THEN POP AND 
 6477:      1998 BE 00 12       	CJNE	R6,#0,LOAD1	;CLEAR CARRY EXIT IF Z
 6478:                          	;
 6479:                          	;**************************************
 6480:                          	;
 6481:                          SWAP_AND_EXIT:	; Swap external args and 
 6482:                          	;
 6483:                          	;**************************************
 6484:                          	;
 6485:      199B 91 5E          	ACALL	LOAD_POINTERS
 6486:      199D 7F 06          	MOV	R7,#FP_NUMBER_SIZE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 118



 Line    I  Addr Code           Source

 6487:                          	;
 6488:      199F E2             SE1:	MOVX	A,@R0		;SWAP THE ARGUMENTS
 6489:      19A0 F3             	MOVX	@R1,A
 6490:      19A1 18             	DEC	R0
 6491:      19A2 19             	DEC	R1
 6492:      19A3 DF FA          	DJNZ	R7,SE1
 6493:                          	;
 6494:                          POP_AND_EXIT:
 6495:                          	;
 6496:      19A5 E5 09          	MOV	A,ARG_STACK	;POP THE STACK
 6497:      19A7 24 06          	ADD	A,#FP_NUMBER_SIZE
 6498:      19A9 F5 09          	MOV	ARG_STACK,A
 6499:      19AB E4             	CLR	A
 6500:      19AC 22             	RET
 6501:                          	;
 6502:                          	;
 6503:      19AD 9E             LOAD1:	SUBB	A,R6		;A = ARG 1 EXP - ARG 2
 6504:      19AE 8F 30          	MOV	FP_EXP,R7	;SAVE EXPONENT AND SIGN
 6505:      19B0 8C 2F          	MOV	FP_SIGN,R4
 6506:      19B2 50 09          	JNC	LOAD2		;ARG1 EXPONENT IS LARGER OR 
 6507:      19B4 8E 30          	MOV	FP_EXP,R6
 6508:      19B6 8B 2F          	MOV	FP_SIGN,R3
 6509:      19B8 F4             	CPL	A
 6510:      19B9 04             	INC	A		;COMPENSATE FOR EXP DELTA
 6511:      19BA C8             	XCH	A,R0		;FORCE R0 TO POINT AT THE LAR
 6512:      19BB C9             	XCH	A,R1		;EXPONENT
 6513:      19BC C8             	XCH	A,R0
 6514:                          	;
 6515:      19BD FF             LOAD2:	MOV	R7,A		;SAVE THE EXPONENT DELT
 6516:      19BE C2 23          	CLR	ADD_IN
 6517:      19C0 BD 00 02       	CJNE	R5,#0,LOAD21
 6518:      19C3 D2 23          	SETB	ADD_IN
 6519:                          	;
 6520:                          	; Load the R1 mantissa
 6521:                          	;
 6522:      19C5 91 7B          LOAD21: ACALL	LOADR1_MANTISSA ;LOAD THE 
 6523:                          	;
 6524:                          	; Now align the number to the delta exp
 6525:                          	; R4 points to the string of the last d
 6526:                          	;
 6527:      19C7 BF 0B 00       	CJNE	R7,#DIGIT+DIGIT+3,LOAD22
 6528:      19CA 40 02          LOAD22: JC	LOAD23
 6529:      19CC 7F 0A          	MOV	R7,#DIGIT+DIGIT+2
 6530:                          	;
 6531:      19CE 75 2A 00       LOAD23: MOV	FP_CARRY,#00	;CLEAR THE CARR
 6532:      19D1 71 BB          	ACALL	RIGHT		;SHIFT THE NUMBER
 6533:                          	;
 6534:                          	; Set up for addition and subtraction
 6535:                          	;
 6536:      19D3 7F 04          	MOV	R7,#DIGIT	;LOOP COUNT
 6537:      19D5 79 2E          	MOV	R1,#FP_DIG78
 6538:                          ;
 6539:                          ;***************************************
 6540:                          ;****** Elektor 2 Patch ****************
 6541:                          ;****** Floting Point Error, found by D.
 6542:                          ;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 119



 Line    I  Addr Code           Source

 6543:                          ;	MOV	A,#9EH
 6544:                          ;****** Error Number 1
 6545:                          ;
 6546:                          ;****** Value in R4 must be complemented
 6547:                          ;****** first complement
 6548:                          ;
 6549:                          ;	CLR	C
 6550:                          ;	SUBB	A,R4
 6551:                          ;	DA	A
 6552:                          ;	XCH	A,R4
 6553:                          ;	JNZ	LOAD24
 6554:                          ;	MOV	R4,A
 6555:                          ;****** Error Number 2
 6556:                          ;
 6557:                          ;****** With substraction, after reducin
 6558:                          ;****** subtrahend to the same exponents
 6559:                          ;****** that one always has to make a bo
 6560:                          ;****** position of the minuend, not as 
 6561:                          ;****** were it is made only when R4 = 5
 6562:                          ;
 6563:                          ;LOAD24: CJNE	 A,#50H,LOAD25	 ;TEST FOR 
 6564:                          ;LOAD25: JNB	 ADD_IN,SUBLP	 ;DO SUBTRACT
 6565:                          ;
 6566:                          ;***************************************
 6567:                          ;****** Proper code starts here: *******
 6568:                          ;
 6569:      19D7 74 9A          	mov	A,#9AH
 6570:      19D9 C3             	clr	C
 6571:      19DA 9C             	subb	A,R4
 6572:      19DB D4             	da	A
 6573:      19DC CC             	xch	A,R4
 6574:      19DD 30 23 1B       	jnb	ADD_IN,SUBLP
 6575:      19E0 B4 50 00       	cjne	A,#50H,LOAD25
 6576:                          ;
 6577:                          ;****** continue with original code: ***
 6578:                          ;
 6579:      19E3 B3             LOAD25: CPL	C		;FLIP CARRY FOR ADDITION
 6580:      19E4 31 F2          	ACALL	ADDLP		;DO ADDITION
 6581:                          	;
 6582:      19E6 50 08          	JNC	ADD_R
 6583:      19E8 05 2A          	INC	FP_CARRY
 6584:      19EA 7F 01          	MOV	R7,#1
 6585:      19EC 71 BB          	ACALL	RIGHT
 6586:      19EE 71 72          	ACALL	INC_FP_EXP	;SHIFT AND BUMP EXPONE
 6587:                          	;
 6588:      19F0 61 63          ADD_R:	AJMP	STORE_ALIGN_TEST_AND_EXIT
 6589:                          	;
 6590:      19F2 E2             ADDLP:	MOVX	A,@R0
 6591:      19F3 37             	ADDC	A,@R1
 6592:      19F4 D4             	DA	A
 6593:      19F5 F7             	MOV	@R1,A
 6594:      19F6 18             	DEC	R0
 6595:      19F7 19             	DEC	R1
 6596:      19F8 DF F8          	DJNZ	R7,ADDLP	;LOOP UNTIL DONE
 6597:      19FA 22             	RET
 6598:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 120



 Line    I  Addr Code           Source

 6599:      19FB E2             SUBLP:	MOVX	A,@R0		;NOW DO SUBTRACTION
 6600:      19FC FE             	MOV	R6,A
 6601:      19FD E4             	CLR	A
 6602:      19FE 34 99          	ADDC	A,#99H
 6603:      1A00 97             	SUBB	A,@R1
 6604:      1A01 2E             	ADD	A,R6
 6605:      1A02 D4             	DA	A
 6606:      1A03 F7             	MOV	@R1,A
 6607:      1A04 18             	DEC	R0
 6608:      1A05 19             	DEC	R1
 6609:      1A06 DF F3          	DJNZ	R7,SUBLP
 6610:      1A08 40 11          	JC	FSUB6
 6611:                          	;
 6612:                          	; Need to complement the result and sig
 6613:                          	; point accumulator mantissa was larger
 6614:                          	; memory and their signs were equal.
 6615:                          	;
 6616:      1A0A B2 78          	CPL	FP_SIGN.0
 6617:      1A0C 79 2E          	MOV	R1,#FP_DIG78
 6618:      1A0E 7F 04          	MOV	R7,#DIGIT	;LOOP COUNT
 6619:                          	;
 6620:      1A10 74 9A          FSUB5:	MOV	A,#9AH
 6621:      1A12 97             	SUBB	A,@R1
 6622:      1A13 24 00          	ADD	A,#0
 6623:      1A15 D4             	DA	A
 6624:      1A16 F7             	MOV	@R1,A
 6625:      1A17 19             	DEC	R1
 6626:      1A18 B3             	CPL	C
 6627:      1A19 DF F5          	DJNZ	R7,FSUB5	;LOOP
 6628:                          	;
 6629:                          	; Now see how many zeros their are
 6630:                          	;
 6631:      1A1B 78 2B          FSUB6:	MOV	R0,#FP_DIG12
 6632:      1A1D 7F 00          	MOV	R7,#0
 6633:                          	;
 6634:      1A1F E6             FSUB7:	MOV	A,@R0
 6635:      1A20 70 08          	JNZ	FSUB8
 6636:      1A22 0F             	INC	R7
 6637:      1A23 0F             	INC	R7
 6638:      1A24 08             	INC	R0
 6639:      1A25 B8 2F F7       	CJNE	R0,#FP_SIGN,FSUB7
 6640:      1A28 61 AB          	AJMP	ZERO_AND_EXIT
 6641:                          	;
 6642:      1A2A B4 10 00       FSUB8:	CJNE	A,#10H,FSUB81
 6643:      1A2D 50 01          FSUB81: JNC	FSUB9
 6644:      1A2F 0F             	INC	R7
 6645:                          	;
 6646:                          	; Now R7 has the number of leading zero
 6647:                          	;
 6648:      1A30 E5 30          FSUB9:	MOV	A,FP_EXP	;GET THE OLD EXPONEN
 6649:      1A32 C3             	CLR	C
 6650:      1A33 9F             	SUBB	A,R7		;SUBTRACT FROM THE NUMBER OF
 6651:      1A34 60 0B          	JZ	FSUB10
 6652:      1A36 40 09          	JC	FSUB10
 6653:                          	;
 6654:      1A38 F5 30          	MOV	FP_EXP,A	;SAVE THE NEW EXPONENT

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 121



 Line    I  Addr Code           Source

 6655:                          	;
 6656:      1A3A 71 F5          	ACALL	LEFT1		;SHIFT THE FP ACC
 6657:      1A3C 75 2A 00       	MOV	FP_CARRY,#0
 6658:      1A3F 61 63          	AJMP	STORE_ALIGN_TEST_AND_EXIT
 6659:                          	;
 6660:      1A41 61 A5          FSUB10: AJMP	UNDERFLOW_AND_EXIT
 6661:                          	;
 6662:                          	;**************************************
 6663:                          	;
 6664:                          FLOATING_COMP:	; Compare two floating po
 6665:                          		; used for relational operations and i
 6666:                          		; than subtraction. ON RETURN, The car
 6667:                          		; if ARG1 is > ARG2, else carry is not
 6668:                          		; if ARG1 = ARG2, F0 gets set
 6669:                          	;
 6670:                          	;**************************************
 6671:                          	;
 6672:      1A43 91 6A          	ACALL	MDES1		;SET UP THE REGISTERS
 6673:      1A45 E5 09          	MOV	A,ARG_STACK
 6674:      1A47 24 0C          	ADD	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 6675:      1A49 F5 09          	MOV	ARG_STACK,A	;POP THE STACK TWICE, C
 6676:      1A4B EE             	MOV	A,R6		;CHECK OUT EXPONENTS
 6677:      1A4C C2 D5          	CLR	F0
 6678:      1A4E 9F             	SUBB	A,R7
 6679:      1A4F 60 0A          	JZ	EXPONENTS_EQUAL
 6680:      1A51 40 03          	JC	ARG1_EXP_IS_LARGER
 6681:                          	;
 6682:                          	; Now the ARG2 EXPONENT is > ARG1 EXPON
 6683:                          	;
 6684:                          SIGNS_DIFFERENT:
 6685:                          	;
 6686:      1A53 EB             	MOV	A,R3		;SEE IF SIGN OF ARG2 IS POSIT
 6687:      1A54 80 01          	SJMP	ARG1_EXP_IS_LARGER1
 6688:                          	;
 6689:                          ARG1_EXP_IS_LARGER:
 6690:                          	;
 6691:      1A56 EC             	MOV	A,R4		;GET THE SIGN OF ARG1 EXPONEN
 6692:                          ARG1_EXP_IS_LARGER1:
 6693:      1A57 60 01          	JZ	ARG1_EXP_IS_LARGER2
 6694:      1A59 B3             	CPL	C
 6695:                          ARG1_EXP_IS_LARGER2:
 6696:      1A5A 22             	RET
 6697:                          	;
 6698:                          EXPONENTS_EQUAL:
 6699:                          	;
 6700:                          	; First, test the sign, then the mantis
 6701:                          	;
 6702:      1A5B BD 00 F5       	CJNE	R5,#0,SIGNS_DIFFERENT
 6703:                          	;
 6704:                          BOTH_PLUS:
 6705:                          	;
 6706:      1A5E 7F 04          	MOV	R7,#DIGIT	;POINT AT MS DIGIT
 6707:      1A60 18             	DEC	R0
 6708:      1A61 18             	DEC	R0
 6709:      1A62 18             	DEC	R0
 6710:      1A63 19             	DEC	R1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 122



 Line    I  Addr Code           Source

 6711:      1A64 19             	DEC	R1
 6712:      1A65 19             	DEC	R1
 6713:                          	;
 6714:                          	; Now do the compare
 6715:                          	;
 6716:      1A66 E2             CLOOP:	MOVX	A,@R0
 6717:      1A67 FE             	MOV	R6,A
 6718:      1A68 E3             	MOVX	A,@R1
 6719:      1A69 9E             	SUBB	A,R6
 6720:      1A6A 70 EA          	JNZ	ARG1_EXP_IS_LARGER
 6721:      1A6C 08             	INC	R0
 6722:      1A6D 09             	INC	R1
 6723:      1A6E DF F6          	DJNZ	R7,CLOOP
 6724:                          	;
 6725:                          	; If here, the numbers are the same, th
 6726:                          	;
 6727:      1A70 D2 D5          	SETB	F0
 6728:      1A72 22             	RET			;EXIT WITH EQUAL
 6729:                          	;
 6730:                          ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 6731:                          ;
 6732:                          FLOATING_MUL:	; Floating point multiply
 6733:                          ;
 6734:                          ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 6735:                          ;
 6736:      1A73 91 68          	ACALL	MUL_DIV_EXP_AND_SIGN
 6737:                          	;
 6738:                          	; check for zero exponents
 6739:                          	;
 6740:      1A75 BE 00 02       	CJNE	R6,#00,FMUL1	;ARG 2 EXP ZERO?
 6741:      1A78 61 AB          FMUL0:	AJMP	ZERO_AND_EXIT
 6742:                          	;
 6743:                          	; calculate the exponent
 6744:                          	;
 6745:      1A7A 8D 2F          FMUL1:	MOV	FP_SIGN,R5	;SAVE THE SIGN, IN
 6746:                          	;
 6747:      1A7C EF             	MOV	A,R7
 6748:      1A7D 60 F9          	JZ	FMUL0
 6749:      1A7F 2E             	ADD	A,R6		;ADD THE EXPONENTS
 6750:      1A80 20 E7 05       	JB	ACC.7,FMUL_OVER
 6751:      1A83 10 D7 08       	JBC	CY,FMUL21	;SEE IF CARRY IS SET
 6752:                          	;
 6753:      1A86 61 A5          	AJMP	UNDERFLOW_AND_EXIT
 6754:                          	;
 6755:                          FMUL_OVER:
 6756:                          	;
 6757:      1A88 50 02          	JNC	FMUL2		;OK IF SET
 6758:                          	;
 6759:      1A8A 61 94          FOV:	AJMP	OVERFLOW_AND_EXIT
 6760:                          ;***************************************
 6761:                          ;****** Wulf 1 Bugfix 1 ****************
 6762:                          ;****** Multiplication Error, found by D
 6763:                          ;
 6764:                          ; FMUL2: SUBB	 A,#129 	 ;SUBTRACT THE EX
 6765:                          ;
 6766:                          ;***************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 123



 Line    I  Addr Code           Source

 6767:                          ;****** Proper code starts here: *******
 6768:                          ;
 6769:      1A8C D2 28          FMUL2:	setb	mul_underflow	;Flag of multi
 6770:      1A8E 94 83          FMUL21: subb	A,#83H		;exp. multipl. resu
 6771:      1A90 04             	inc	A		;Correct SUBB 83H
 6772:      1A91 04             	inc	A		;to original SUBB 81H
 6773:      1A92 40 02          	jc     NMARK_L		;Limit case
 6774:      1A94 C2 28          	clr	mul_underflow	;No limit case
 6775:                          NMARK_L:
 6776:                          ;
 6777:                          ;****** continue with original code: ***
 6778:                          ;
 6779:      1A96 FE             	MOV	R6,A		;SAVE IT FOR LATER
 6780:                          	;
 6781:                          	; Unpack and load R0
 6782:                          	;
 6783:      1A97 71 7E          	ACALL	UNPACK_R0
 6784:                          	;
 6785:                          	; Now set up for loop multiply
 6786:                          	;
 6787:      1A99 7B 04          	MOV	R3,#DIGIT
 6788:      1A9B AC 01          	MOV	R4,R1B0
 6789:                          	;
 6790:                          	; Now, do the multiply and accumulate t
 6791:                          	;
 6792:      1A9D 8C 01          FMUL3:	MOV	R1B0,R4
 6793:      1A9F E3             	MOVX	A,@R1
 6794:      1AA0 FA             	MOV	R2,A
 6795:      1AA1 91 2B          	ACALL	MUL_NIBBLE
 6796:                          	;
 6797:      1AA3 EA             	MOV	A,R2
 6798:      1AA4 C4             	SWAP	A
 6799:      1AA5 91 2B          	ACALL	MUL_NIBBLE
 6800:      1AA7 1C             	DEC	R4
 6801:      1AA8 DB F3          	DJNZ	R3,FMUL3
 6802:                          	;
 6803:                          	; Now, pack and restore the sign
 6804:                          	;
 6805:      1AAA 8E 30          	MOV	FP_EXP,R6
 6806:      1AAC 8D 2F          	MOV	FP_SIGN,R5
 6807:      1AAE 61 11          	AJMP	PACK		;FINISH IT OFF
 6808:                          	;
 6809:                          	;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 6810:                          	;
 6811:                          FLOATING_DIV:
 6812:                          	;
 6813:                          	;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 6814:                          	;
 6815:      1AB0 91 6A          	ACALL	MDES1
 6816:                          	;
 6817:                          	; Check the exponents
 6818:                          	;
 6819:      1AB2 8D 2F          	MOV	FP_SIGN,R5	;SAVE THE SIGN
 6820:      1AB4 BF 00 06       	CJNE	R7,#0,DIV0	;CLEARS THE CARRY
 6821:      1AB7 71 94          	ACALL	OVERFLOW_AND_EXIT
 6822:      1AB9 E4             	CLR	A

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 124



 Line    I  Addr Code           Source

 6823:      1ABA D2 E3          	SETB	ACC.ZERO_DIVIDE
 6824:      1ABC 22             	RET
 6825:                          	;
 6826:      1ABD EE             DIV0:	MOV	A,R6		;GET EXPONENT
 6827:      1ABE 60 B8          	JZ	FMUL0		;EXIT IF ZERO
 6828:      1AC0 9F             	SUBB	A,R7		;DELTA EXPONENT
 6829:      1AC1 20 E7 04       	JB	ACC.7,D_UNDER
 6830:      1AC4 50 04          	JNC	DIV3
 6831:      1AC6 61 A5          	AJMP	UNDERFLOW_AND_EXIT
 6832:                          	;
 6833:      1AC8 50 C0          D_UNDER:JNC	FOV
 6834:                          	;
 6835:      1ACA 24 81          DIV3:	ADD	A,#129		;CORRECTLY BIAS THE EX
 6836:      1ACC F5 30          	MOV	FP_EXP,A	;SAVE THE EXPONENT
 6837:      1ACE 91 7B          	ACALL	LOADR1_MANTISSA ;LOAD THE DIVIDED
 6838:                          	;
 6839:      1AD0 7A 34          	MOV	R2,#FP_ACCC	;SAVE LOCATION
 6840:      1AD2 AB 00          	MOV	R3,R0B0 	;SAVE POINTER IN R3
 6841:      1AD4 75 2A 00       	MOV	FP_CARRY,#0	;ZERO CARRY BYTE
 6842:                          	;
 6843:      1AD7 7D FF          DIV4:	MOV	R5,#0FFH	;LOOP COUNT
 6844:      1AD9 D3             	SETB	C
 6845:                          	;
 6846:      1ADA 8B 00          DIV5:	MOV	R0B0,R3 	;RESTORE THE EXTERNAL
 6847:      1ADC 79 2E          	MOV	R1,#FP_DIG78	;SET UP INTERNAL POINT
 6848:      1ADE 7F 04          	MOV	R7,#DIGIT	;LOOP COUNT
 6849:      1AE0 50 17          	JNC	DIV7		;EXIT IF NO CARRY
 6850:                          	;
 6851:      1AE2 E2             DIV6:	MOVX	A,@R0		;DO ACCUMLATION
 6852:      1AE3 FE             	MOV	R6,A
 6853:      1AE4 E4             	CLR	A
 6854:      1AE5 34 99          	ADDC	A,#99H
 6855:      1AE7 9E             	SUBB	A,R6
 6856:      1AE8 27             	ADD	A,@R1
 6857:      1AE9 D4             	DA	A
 6858:      1AEA F7             	MOV	@R1,A
 6859:      1AEB 18             	DEC	R0
 6860:      1AEC 19             	DEC	R1
 6861:      1AED DF F3          	DJNZ	R7,DIV6 	;LOOP
 6862:                          	;
 6863:      1AEF 0D             	INC	R5		;SUBTRACT COUNTER
 6864:      1AF0 40 E8          	JC	DIV5		;KEEP LOOPING IF CARRY
 6865:      1AF2 E7             	MOV	A,@R1		;GET CARRY
 6866:      1AF3 94 01          	SUBB	A,#1		;CARRY IS CLEARED
 6867:      1AF5 F7             	MOV	@R1,A		;SAVE CARRY DIGIT
 6868:      1AF6 B3             	CPL	C
 6869:      1AF7 80 E1          	SJMP	DIV5		;LOOP
 6870:                          	;
 6871:                          	; Restore the result if carry was found
 6872:                          	;
 6873:      1AF9 31 F2          DIV7:	ACALL	ADDLP		;ADD NUMBER BACK
 6874:      1AFB 77 00          	MOV	@R1,#0		;CLEAR CARRY
 6875:      1AFD 8A 00          	MOV	R0B0,R2 	;GET SAVE COUNTER
 6876:      1AFF A6 05          	MOV	@R0,5		;SAVE COUNT BYTE
 6877:                          	;
 6878:      1B01 0A             	INC	R2		;ADJUST SAVE COUNTER

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 125



 Line    I  Addr Code           Source

 6879:      1B02 7F 01          	MOV	R7,#1		;BUMP DIVIDEND
 6880:      1B04 71 F3          	ACALL	LEFT
 6881:      1B06 BA 3E CE       	CJNE	R2,#FP_ACC8+2,DIV4
 6882:                          	;
 6883:      1B09 D5 30 02       	DJNZ	FP_EXP,DIV8
 6884:      1B0C 61 A5          	AJMP	UNDERFLOW_AND_EXIT
 6885:                          	;
 6886:      1B0E 75 2A 00       DIV8:	MOV	FP_CARRY,#0
 6887:                          	;
 6888:                          	;**************************************
 6889:                          	;
 6890:                          PACK:	; Pack the mantissa
 6891:                          	;
 6892:                          	;**************************************
 6893:                          	;
 6894:                          	; First, set up the pointers
 6895:                          	;
 6896:      1B11 78 34          	MOV	R0,#FP_ACCC
 6897:      1B13 E6             	MOV	A,@R0		;GET FP_ACCC
 6898:      1B14 FE             	MOV	R6,A		;SAVE FOR ZERO COUNT
 6899:      1B15 60 03          	JZ	PACK0		;JUMP OVER IF ZERO
 6900:      1B17 71 72          	ACALL	INC_FP_EXP	;BUMP THE EXPONENT
 6901:      1B19 18             	DEC	R0
 6902:                          	;
 6903:      1B1A 08             PACK0:	INC	R0		;POINT AT FP_ACC1
 6904:                          	;
 6905:      1B1B 74 08          PACK1:	MOV	A,#8		;ADJUST NIBBLE POINTER
 6906:      1B1D F9             	MOV	R1,A
 6907:      1B1E 28             	ADD	A,R0
 6908:      1B1F F8             	MOV	R0,A
 6909:      1B20 B6 05 00       	CJNE	@R0,#5,PACK11	;SEE IF ADJUSTING NE
 6910:      1B23 40 13          PACK11: JC	PACK31
 6911:                          	;
 6912:      1B25 D3             PACK2:	SETB	C
 6913:      1B26 E4             	CLR	A
 6914:      1B27 18             	DEC	R0
 6915:      1B28 36             	ADDC	A,@R0
 6916:      1B29 D4             	DA	A
 6917:      1B2A D6             	XCHD	A,@R0		;SAVE THE VALUE
 6918:      1B2B 30 E4 09       	JNB	ACC.4,PACK3
 6919:      1B2E D9 F5          	DJNZ	R1,PACK2
 6920:                          	;
 6921:      1B30 18             	DEC	R0
 6922:      1B31 76 01          	MOV	@R0,#1
 6923:      1B33 71 72          	ACALL	INC_FP_EXP
 6924:      1B35 80 18          	SJMP	PACK4
 6925:                          	;
 6926:      1B37 19             PACK3:	DEC	R1
 6927:      1B38 E9             PACK31: MOV	A,R1
 6928:      1B39 C3             	CLR	C
 6929:      1B3A C8             	XCH	A,R0
 6930:      1B3B 98             	SUBB	A,R0
 6931:      1B3C F8             	MOV	R0,A
 6932:                          ;
 6933:                          ;***************************************
 6934:                          ;****** Wulf 1 Bugfix 2 ****************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 126



 Line    I  Addr Code           Source

 6935:                          ;****** Multiplication Error, found by D
 6936:                          ;
 6937:      1B3D 30 28 0F       	jnb	mul_underflow,PACK4
 6938:      1B40 C2 28          	clr	mul_underflow
 6939:      1B42 E5 30          	mov	A,FP_EXP	;test of exceeding in limi
 6940:      1B44 60 07          	jz	UNDER_MD	;message about underflow
 6941:      1B46 F4             	cpl	a		;test of exceeding in limit case
 6942:      1B47 60 04          	jz	UNDER_MD	;message about underflow
 6943:      1B49 F4             	cpl	a		;restore original exp
 6944:      1B4A B4 01 02       	cjne	a,#1,pack4	;jump if not outer limi
 6945:                          UNDER_MD:
 6946:      1B4D 61 A5          	ajmp	UNDERFLOW_AND_EXIT
 6947:                          ;
 6948:                          ;****** continue with original code: ***
 6949:                          ;
 6950:      1B4F 79 2B          PACK4:	MOV	R1,#FP_DIG12
 6951:                          	;
 6952:                          	; Now, pack
 6953:                          	;
 6954:      1B51 E6             PLOOP:	MOV	A,@R0
 6955:      1B52 C4             	SWAP	A		;FLIP THE DIGITS
 6956:      1B53 08             	INC	R0
 6957:      1B54 D6             	XCHD	A,@R0
 6958:      1B55 42 06          	ORL	6,A		;ACCUMULATE THE OR'ED DIGITS
 6959:      1B57 F7             	MOV	@R1,A
 6960:      1B58 08             	INC	R0
 6961:      1B59 09             	INC	R1
 6962:      1B5A B9 2F F4       	CJNE	R1,#FP_SIGN,PLOOP
 6963:      1B5D EE             	MOV	A,R6
 6964:      1B5E 70 03          	JNZ	STORE_ALIGN_TEST_AND_EXIT
 6965:      1B60 75 30 00       	MOV	FP_EXP,#0	;ZERO EXPONENT
 6966:                          	;
 6967:                          	;**************************************
 6968:                          	;
 6969:                          STORE_ALIGN_TEST_AND_EXIT:	;Save the num
 6970:                          	;
 6971:                          	;**************************************
 6972:                          	;
 6973:      1B63 91 5E          	ACALL	LOAD_POINTERS
 6974:      1B65 89 09          	MOV	ARG_STACK,R1	;SET UP THE NEW STACK
 6975:      1B67 78 30          	MOV	R0,#FP_EXP
 6976:                          	;
 6977:                          	; Now load the numbers
 6978:                          	;
 6979:      1B69 E6             STORE2: MOV	A,@R0
 6980:      1B6A F3             	MOVX	@R1,A		;SAVE THE NUMBER
 6981:      1B6B 18             	DEC	R0
 6982:      1B6C 19             	DEC	R1
 6983:      1B6D B8 2A F9       	CJNE	R0,#FP_CARRY,STORE2
 6984:                          	;
 6985:      1B70 E4             	CLR	A		;NO ERRORS
 6986:                          	;
 6987:      1B71 22             PRET:	RET			;EXIT
 6988:                          	;
 6989:                          INC_FP_EXP:
 6990:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 127



 Line    I  Addr Code           Source

 6991:      1B72 05 30          	INC	FP_EXP
 6992:      1B74 E5 30          	MOV	A,FP_EXP
 6993:      1B76 70 F9          	JNZ	PRET		;EXIT IF NOT ZERO
 6994:      1B78 D0 E0          	POP	ACC		;WASTE THE CALLING STACK
 6995:      1B7A D0 E0          	POP	ACC
 6996:      1B7C 61 94          	AJMP	OVERFLOW_AND_EXIT
 6997:                          ;
 6998:                          ;***************************************
 6999:                          ;
 7000:                          UNPACK_R0:	; Unpack BCD digits and load 
 7001:                          ;
 7002:                          ;***************************************
 7003:                          	;
 7004:      1B7E C0 01          	PUSH	R1B0
 7005:      1B80 79 32          	MOV	R1,#FP_NIB8
 7006:                          	;
 7007:      1B82 E2             ULOOP:	MOVX	A,@R0
 7008:      1B83 54 0F          	ANL	A,#0FH
 7009:      1B85 F7             	MOV	@R1,A		;SAVE THE NIBBLE
 7010:      1B86 E2             	MOVX	A,@R0
 7011:      1B87 C4             	SWAP	A
 7012:      1B88 54 0F          	ANL	A,#0FH
 7013:      1B8A 19             	DEC	R1
 7014:      1B8B F7             	MOV	@R1,A		;SAVE THE NIBBLE AGAIN
 7015:      1B8C 18             	DEC	R0
 7016:      1B8D 19             	DEC	R1
 7017:      1B8E B9 2A F1       	CJNE	R1,#FP_NIB1-1,ULOOP
 7018:                          	;
 7019:      1B91 D0 01          	POP	R1B0
 7020:                          	;
 7021:      1B93 22             LOAD7:	RET
 7022:                          	;
 7023:                          	;**************************************
 7024:                          	;
 7025:                          OVERFLOW_AND_EXIT:	;LOAD 99999999 E+127,
 7026:                          	;
 7027:                          	;**************************************
 7028:                          	;
 7029:      1B94 78 2E          	MOV	R0,#FP_DIG78
 7030:      1B96 74 99          	MOV	A,#99H
 7031:                          	;
 7032:      1B98 F6             OVE1:	MOV	@R0,A
 7033:      1B99 18             	DEC	R0
 7034:      1B9A B8 2A FB       	CJNE	R0,#FP_CARRY,OVE1
 7035:                          	;
 7036:      1B9D 75 30 FF       	MOV	FP_EXP,#0FFH
 7037:      1BA0 71 63          	ACALL	STORE_ALIGN_TEST_AND_EXIT
 7038:                          	;
 7039:      1BA2 D2 E1          	SETB	ACC.OVERFLOW
 7040:      1BA4 22             	RET
 7041:                          	;
 7042:                          	;**************************************
 7043:                          	;
 7044:                          UNDERFLOW_AND_EXIT:	;LOAD 0, SET UF BIT,
 7045:                          	;
 7046:                          	;**************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 128



 Line    I  Addr Code           Source

 7047:                          	;
 7048:      1BA5 71 AB          	ACALL	ZERO_AND_EXIT
 7049:      1BA7 E4             	CLR	A
 7050:      1BA8 D2 E0          	SETB	ACC.UNDERFLOW
 7051:      1BAA 22             	RET
 7052:                          	;
 7053:                          	;**************************************
 7054:                          	;
 7055:                          ZERO_AND_EXIT:		;LOAD 0, SET ZERO BIT, A
 7056:                          	;
 7057:                          	;**************************************
 7058:                          	;
 7059:      1BAB 71 B2          	ACALL	FP_CLEAR
 7060:      1BAD 71 63          	ACALL	STORE_ALIGN_TEST_AND_EXIT
 7061:      1BAF D2 E2          	SETB	ACC.ZERO
 7062:      1BB1 22             	RET			;EXIT
 7063:                          	;
 7064:                          	;**************************************
 7065:                          	;
 7066:                          FP_CLEAR:
 7067:                          	;
 7068:                          	; Clear internal storage
 7069:                          	;
 7070:                          	;**************************************
 7071:                          	;
 7072:      1BB2 E4             	CLR	A
 7073:      1BB3 78 3D          	MOV	R0,#FP_ACC8+1
 7074:                          	;
 7075:      1BB5 F6             FPC1:	MOV	@R0,A
 7076:      1BB6 18             	DEC	R0
 7077:      1BB7 B8 29 FB       	CJNE	R0,#FP_TEMP,FPC1
 7078:      1BBA 22             	RET
 7079:                          	;
 7080:                          	;**************************************
 7081:                          	;
 7082:                          RIGHT:	; Shift ACCUMULATOR RIGHT the num
 7083:                          	; Save the shifted values in R4 if SAVE
 7084:                          	;
 7085:                          	;**************************************
 7086:                          	;
 7087:      1BBB 7C 00          	MOV	R4,#0		;IN CASE OF NO SHIFT
 7088:                          	;
 7089:      1BBD C3             RIGHT1: CLR	C
 7090:      1BBE EF             RIGHT2: MOV	A,R7		;GET THE DIGITS TO SHI
 7091:      1BBF 60 22          	JZ	RIGHTL1 	;EXIT IF ZERO
 7092:      1BC1 94 02          	SUBB	A,#2		;TWO TO DO?
 7093:      1BC3 50 1F          	JNC	RIGHT5		;SHIFT TWO NIBBLES
 7094:                          	;
 7095:                          	; Swap one nibble then exit
 7096:                          	;
 7097:      1BC5 C0 00          RIGHT3: PUSH	R0B0		;SAVE POINTER REGISTE
 7098:      1BC7 C0 01          	PUSH	R1B0
 7099:                          	;
 7100:      1BC9 79 2E          	MOV	R1,#FP_DIG78	;LOAD THE POINTERS
 7101:      1BCB 78 2D          	MOV	R0,#FP_DIG56
 7102:      1BCD EC             	MOV	A,R4		;GET THE OVERFLOW REGISTER

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 129



 Line    I  Addr Code           Source

 7103:      1BCE D7             	XCHD	A,@R1		;GET DIGIT 8
 7104:      1BCF C4             	SWAP	A		;FLIP FOR LOAD
 7105:      1BD0 FC             	MOV	R4,A
 7106:                          	;
 7107:      1BD1 E7             RIGHTL: MOV	A,@R1		;GET THE LOW ORDER BY
 7108:      1BD2 D6             	XCHD	A,@R0		;SWAP NIBBLES
 7109:      1BD3 C4             	SWAP	A		;FLIP FOR STORE
 7110:      1BD4 F7             	MOV	@R1,A		;SAVE THE DIGITS
 7111:      1BD5 18             	DEC	R0		;BUMP THE POINTERS
 7112:      1BD6 19             	DEC	R1
 7113:      1BD7 B9 2A F7       	CJNE	R1,#FP_DIG12-1,RIGHTL	;LOOP
 7114:                          	;
 7115:      1BDA E7             	MOV	A,@R1		;ACC = CH8
 7116:      1BDB C4             	SWAP	A		;ACC = 8CH
 7117:      1BDC 54 0F          	ANL	A,#0FH		;ACC = 0CH
 7118:      1BDE F7             	MOV	@R1,A		;CARRY DONE
 7119:      1BDF D0 01          	POP	R1B0		;EXIT
 7120:      1BE1 D0 00          	POP	R0B0		;RESTORE REGISTER
 7121:      1BE3 22             RIGHTL1:RET
 7122:                          	;
 7123:      1BE4 FF             RIGHT5: MOV	R7,A		;SAVE THE NEW SHIFT NU
 7124:      1BE5 E4             	CLR	A
 7125:      1BE6 C5 2A          	XCH	A,FP_CARRY	;SWAP THE NIBBLES
 7126:      1BE8 C5 2B          	XCH	A,FP_DIG12
 7127:      1BEA C5 2C          	XCH	A,FP_DIG34
 7128:      1BEC C5 2D          	XCH	A,FP_DIG56
 7129:      1BEE C5 2E          	XCH	A,FP_DIG78
 7130:      1BF0 FC             	MOV	R4,A		;SAVE THE LAST DIGIT SHIFTED
 7131:      1BF1 80 CB          	SJMP	RIGHT2
 7132:                          	;
 7133:                          	;**************************************
 7134:                          	;
 7135:                          LEFT:	; Shift ACCUMULATOR LEFT the numbe
 7136:                          	;
 7137:                          	;**************************************
 7138:                          	;
 7139:      1BF3 7C 00          	MOV	R4,#00H 	;CLEAR FOR SOME ENTRYS
 7140:                          	;
 7141:      1BF5 C3             LEFT1:	CLR	C
 7142:      1BF6 EF             LEFT2:	MOV	A,R7		;GET SHIFT VALUE
 7143:      1BF7 60 22          	JZ	LEFTL1		;EXIT IF ZERO
 7144:      1BF9 94 02          	SUBB	A,#2		;SEE HOW MANY BYTES TO SHIFT
 7145:      1BFB 50 1F          	JNC	LEFT5
 7146:                          	;
 7147:      1BFD C0 00          LEFT3:	PUSH	R0B0		;SAVE POINTER
 7148:      1BFF C0 01          	PUSH	R1B0
 7149:      1C01 78 2A          	MOV	R0,#FP_CARRY
 7150:      1C03 79 2B          	MOV	R1,#FP_DIG12
 7151:                          	;
 7152:      1C05 E6             	MOV	A,@R0		;ACC=CHCL
 7153:      1C06 C4             	SWAP	A		;ACC = CLCH
 7154:      1C07 F6             	MOV	@R0,A		;ACC = CLCH, @R0 = CLCH
 7155:                          	;
 7156:      1C08 E7             LEFTL:	MOV	A,@R1		;DIG 12
 7157:      1C09 C4             	SWAP	A		;DIG 21
 7158:      1C0A D6             	XCHD	A,@R0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 130



 Line    I  Addr Code           Source

 7159:      1C0B F7             	MOV	@R1,A		;SAVE IT
 7160:      1C0C 08             	INC	R0		;BUMP POINTERS
 7161:      1C0D 09             	INC	R1
 7162:      1C0E B8 2E F7       	CJNE	R0,#FP_DIG78,LEFTL
 7163:                          	;
 7164:      1C11 EC             	MOV	A,R4
 7165:      1C12 C4             	SWAP	A
 7166:      1C13 D6             	XCHD	A,@R0
 7167:      1C14 54 F0          	ANL	A,#0F0H
 7168:      1C16 FC             	MOV	R4,A
 7169:                          	;
 7170:      1C17 D0 01          	POP	R1B0
 7171:      1C19 D0 00          	POP	R0B0		;RESTORE
 7172:      1C1B 22             LEFTL1: RET			;DONE
 7173:                          	;
 7174:      1C1C FF             LEFT5:	MOV	R7,A		;RESTORE COUNT
 7175:      1C1D E4             	CLR	A
 7176:      1C1E CC             	XCH	A,R4		;GET THE RESTORATION BYTE
 7177:      1C1F C5 2E          	XCH	A,FP_DIG78	;DO THE SWAP
 7178:      1C21 C5 2D          	XCH	A,FP_DIG56
 7179:      1C23 C5 2C          	XCH	A,FP_DIG34
 7180:      1C25 C5 2B          	XCH	A,FP_DIG12
 7181:      1C27 C5 2A          	XCH	A,FP_CARRY
 7182:      1C29 80 CB          	SJMP	LEFT2
 7183:                          	;
 7184:                          MUL_NIBBLE:
 7185:                          	;
 7186:                          	; Multiply the nibble in R7 by the FP_N
 7187:                          	; accumulate the product in FP_ACC
 7188:                          	;
 7189:                          	; Set up the pointers for multiplicatio
 7190:                          	;
 7191:      1C2B 54 0F          	ANL	A,#0FH		;STRIP OFF MS NIBBLE
 7192:      1C2D FF             	MOV	R7,A
 7193:      1C2E 78 3C          	MOV	R0,#FP_ACC8
 7194:      1C30 79 32          	MOV	R1,#FP_NIB8
 7195:      1C32 E4             	CLR	A
 7196:      1C33 F5 33          	MOV	FP_ACCX,A
 7197:                          	;
 7198:      1C35 18             MNLOOP: DEC	R0		;BUMP POINTER TO PROPAGA
 7199:      1C36 26             	ADD	A,@R0		;ATTEMPT TO FORCE CARRY
 7200:      1C37 D4             	DA	A		;BCD ADJUST
 7201:      1C38 30 E4 03       	JNB	ACC.4,MNL0	;DON'T ADJUST IF NO NEED
 7202:      1C3B 18             	DEC	R0		;PROPAGATE CARRY TO THE NEXT DI
 7203:      1C3C 06             	INC	@R0		;DO THE ADJUSTING
 7204:      1C3D 08             	INC	R0		;RESTORE R0
 7205:                          	;
 7206:      1C3E D6             MNL0:	XCHD	A,@R0		;RESTORE INITIAL NUMBE
 7207:      1C3F 8F F0          	MOV	B,R7		;GET THE NUBBLE TO MULTIPLY
 7208:      1C41 E7             	MOV	A,@R1		;GET THE OTHER NIBBLE
 7209:      1C42 A4             	MUL	AB		;DO THE MULTIPLY
 7210:      1C43 75 F0 0A       	MOV	B,#10		;NOW BCD ADJUST
 7211:      1C46 84             	DIV	AB
 7212:      1C47 C5 F0          	XCH	A,B		;GET THE REMAINDER
 7213:      1C49 26             	ADD	A,@R0		;PROPAGATE THE PARTIAL PRODU
 7214:      1C4A D4             	DA	A		;BCD ADJUST

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 131



 Line    I  Addr Code           Source

 7215:      1C4B 30 E4 02       	JNB	ACC.4,MNL1	;PROPAGATE PARTIAL PRODU
 7216:      1C4E 05 F0          	INC	B
 7217:                          	;
 7218:      1C50 08             MNL1:	INC	R0
 7219:      1C51 D6             	XCHD	A,@R0		;SAVE THE NEW PRODUCT
 7220:      1C52 18             	DEC	R0
 7221:      1C53 E5 F0          	MOV	A,B		;GET BACK THE QUOTIENT
 7222:      1C55 19             	DEC	R1
 7223:      1C56 B9 2A DC       	CJNE	R1,#FP_NIB1-1,MNLOOP
 7224:                          	;
 7225:      1C59 25 33          	ADD	A,FP_ACCX	;GET THE OVERFLOW
 7226:      1C5B D4             	DA	A		;ADJUST
 7227:      1C5C F6             	MOV	@R0,A		;SAVE IT
 7228:      1C5D 22             	RET			;EXIT
 7229:                          	;
 7230:                          	;**************************************
 7231:                          	;
 7232:                          LOAD_POINTERS:	; Load the ARG_STACK into
 7233:                          	;
 7234:                          	;**************************************
 7235:                          	;
 7236:      1C5E 75 A0 01       	MOV	P2,#ARG_STACK_PAGE
 7237:      1C61 A8 09          	MOV	R0,ARG_STACK
 7238:      1C63 74 06          	MOV	A,#FP_NUMBER_SIZE
 7239:      1C65 28             	ADD	A,R0
 7240:      1C66 F9             	MOV	R1,A
 7241:      1C67 22             	RET
 7242:                          	;
 7243:                          	;**************************************
 7244:                          	;
 7245:                          MUL_DIV_EXP_AND_SIGN:
 7246:                          	;
 7247:                          	; Load the sign into R7, R6. R5 gets th
 7248:                          	; multiply and divide.
 7249:                          	;
 7250:                          	;**************************************
 7251:                          	;
 7252:      1C68 71 B2          	ACALL	FP_CLEAR	;CLEAR INTERNAL MEMORY
 7253:                          	;
 7254:      1C6A 91 5E          MDES1:	ACALL	LOAD_POINTERS	;LOAD REGISTE
 7255:      1C6C E2             	MOVX	A,@R0		;ARG 1 EXP
 7256:      1C6D FF             	MOV	R7,A		;SAVED IN R7
 7257:      1C6E E3             	MOVX	A,@R1		;ARG 2 EXP
 7258:      1C6F FE             	MOV	R6,A		;SAVED IN R6
 7259:      1C70 18             	DEC	R0		;BUMP POINTERS TO SIGN
 7260:      1C71 19             	DEC	R1
 7261:      1C72 E2             	MOVX	A,@R0		;GET THE SIGN
 7262:      1C73 FC             	MOV	R4,A		;SIGN OF ARG1
 7263:      1C74 E3             	MOVX	A,@R1		;GET SIGN OF NEXT ARG
 7264:      1C75 FB             	MOV	R3,A		;SIGN OF ARG2
 7265:      1C76 6C             	XRL	A,R4		;ACC GETS THE NEW SIGN
 7266:      1C77 FD             	MOV	R5,A		;R5 GETS THE NEW SIGN
 7267:                          	;
 7268:                          	; Bump the pointers to point at the LS 
 7269:                          	;
 7270:      1C78 18             	DEC	R0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 132



 Line    I  Addr Code           Source

 7271:      1C79 19             	DEC	R1
 7272:                          	;
 7273:      1C7A 22             	RET
 7274:                          	;
 7275:                          	;**************************************
 7276:                          	;
 7277:                          LOADR1_MANTISSA:
 7278:                          	;
 7279:                          	; Load the mantissa of R0 into FP_Digit
 7280:                          	;
 7281:                          	;**************************************
 7282:                          	;
 7283:      1C7B C0 00          	PUSH	R0B0		;SAVE REGISTER 1
 7284:      1C7D 78 2E          	MOV	R0,#FP_DIG78	;SET UP THE POINTER
 7285:                          	;
 7286:      1C7F E3             LOADR1: MOVX	A,@R1
 7287:      1C80 F6             	MOV	@R0,A
 7288:      1C81 19             	DEC	R1
 7289:      1C82 18             	DEC	R0
 7290:      1C83 B8 2A F9       	CJNE	R0,#FP_CARRY,LOADR1
 7291:                          	;
 7292:      1C86 D0 00          	POP	R0B0
 7293:      1C88 22             	RET
 7294:                          	;
 7295:                          	;**************************************
 7296:                          	;
 7297:                          HEXSCAN:	; Scan a string to determine if
 7298:                          		; set carry if hex, else carry = 0
 7299:                          	;
 7300:                          	;**************************************
 7301:                          	;
 7302:      1C89 B1 5F          	ACALL	GET_DPTR_CHARACTER
 7303:      1C8B C0 83          	PUSH	DPH
 7304:      1C8D C0 82          	PUSH	DPL		;SAVE THE POINTER
 7305:                          	;
 7306:      1C8F E0             HEXSC1: MOVX	A,@DPTR 	;GET THE CHARACTER
 7307:      1C90 F1 ED          	ACALL	DIGIT_CHECK	;SEE IF A DIGIT
 7308:      1C92 40 12          	JC	HS1		;CONTINUE IF A DIGIT
 7309:      1C94 91 A9          	ACALL	HEX_CHECK	;SEE IF HEX
 7310:      1C96 40 0E          	JC	HS1
 7311:                          	;
 7312:      1C98 C2 E5          	CLR	ACC.5		;NO LOWER CASE
 7313:      1C9A B4 48 03       	CJNE	A,#'H',HEXDON
 7314:      1C9D D3             	SETB	C
 7315:      1C9E 80 01          	SJMP	HEXDO1		;NUMBER IS VALID HEX, MAYB
 7316:                          	;
 7317:      1CA0 C3             HEXDON: CLR	C
 7318:                          	;
 7319:      1CA1 D0 82          HEXDO1: POP	DPL		;RESTORE POINTER
 7320:      1CA3 D0 83          	POP	DPH
 7321:      1CA5 22             	RET
 7322:                          	;
 7323:      1CA6 A3             HS1:	INC	DPTR		;BUMP TO NEXT CHARACTER
 7324:      1CA7 80 E6          	SJMP	HEXSC1		;LOOP
 7325:                          	;
 7326:                          HEX_CHECK:	;CHECK FOR A VALID ASCII HEX,

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 133



 Line    I  Addr Code           Source

 7327:                          	;
 7328:      1CA9 C2 E5          	CLR	ACC.5		;WASTE LOWER CASE
 7329:      1CAB B4 47 00       	CJNE	A,#'F'+1,HEX_CHECK1     ;SEE IF F 
 7330:                          HEX_CHECK1:
 7331:      1CAE 40 01          	JC	HC1
 7332:      1CB0 22             	RET
 7333:                          	;
 7334:      1CB1 B4 41 00       HC1:	CJNE	A,#'A',HC11     ;SEE IF A OR G
 7335:      1CB4 B3             HC11:	CPL	C
 7336:      1CB5 22             	RET
 7337:                          	;
 7338:                          PUSHR2R0:
 7339:                          	;
 7340:      1CB6 7B 00          	MOV	R3,#HIGH CONVERT;CONVERSION LOCATIO
 7341:      1CB8 79 58          	MOV	R1,#LOW CONVERT
 7342:      1CBA D1 F7          	ACALL	CONVERT_BINARY_TO_ASCII_STRING
 7343:      1CBC 74 0D          	MOV	A,#0DH		;A CR TO TERMINATE
 7344:      1CBE F3             	MOVX	@R1,A		;SAVE THE CR
 7345:      1CBF 90 00 58       	MOV	DPTR,#CONVERT
 7346:                          	;
 7347:                          	; Falls thru to FLOATING INPUT
 7348:                          	;
 7349:                          	;**************************************
 7350:                          	;
 7351:                          FLOATING_POINT_INPUT:	; Input a floating
 7352:                          			; the DPTR
 7353:                          	;
 7354:                          	;**************************************
 7355:                          	;
 7356:      1CC2 71 B2          	ACALL	FP_CLEAR	;CLEAR EVERYTHING
 7357:      1CC4 B1 5F          	ACALL	GET_DPTR_CHARACTER
 7358:      1CC6 B1 65          	ACALL	PLUS_MINUS_TEST
 7359:      1CC8 92 78          	MOV	MSIGN,C 	;SAVE THE MANTISSA SIGN
 7360:                          	;
 7361:                          	; Now, set up for input loop
 7362:                          	;
 7363:      1CCA 78 34          	MOV	R0,#FP_ACCC
 7364:      1CCC 7E 7F          	MOV	R6,#7FH 	;BASE EXPONENT
 7365:      1CCE D2 D5          	SETB	F0		;SET INITIAL FLAG
 7366:                          	;
 7367:      1CD0 F1 EB          INLOOP: ACALL	GET_DIGIT_CHECK
 7368:      1CD2 50 07          	JNC	GTEST		;IF NOT A CHARACTER, WHAT IS
 7369:      1CD4 54 0F          	ANL	A,#0FH		;STRIP ASCII
 7370:      1CD6 B1 38          	ACALL	STDIG		;STORE THE DIGITS
 7371:                          	;
 7372:      1CD8 A3             INLPIK: INC	DPTR		;BUMP POINTER FOR LOOP
 7373:      1CD9 80 F5          	SJMP	INLOOP		;LOOP FOR INPUT
 7374:                          	;
 7375:      1CDB B4 2E 0C       GTEST:	CJNE	A,#'.',GT1      ;SEE IF A RA
 7376:      1CDE 20 51 63       	JB	FOUND_RADIX,INERR
 7377:      1CE1 D2 51          	SETB	FOUND_RADIX
 7378:      1CE3 B8 34 F2       	CJNE	R0,#FP_ACCC,INLPIK
 7379:      1CE6 D2 52          	SETB	FIRST_RADIX	;SET IF FIRST RADIX
 7380:      1CE8 80 EE          	SJMP	INLPIK		;GET ADDITIONAL DIGITS
 7381:                          	;
 7382:      1CEA 20 D5 57       GT1:	JB	F0,INERR	;ERROR IF NOT CLEARED

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 134



 Line    I  Addr Code           Source

 7383:      1CED B4 65 02       	CJNE	A,#'e',GT11     ;CHECK FOR LOWER C
 7384:      1CF0 80 03          	SJMP	GT12
 7385:      1CF2 B4 45 33       GT11:	CJNE	A,#'E',FINISH_UP
 7386:      1CF5 B1 5E          GT12:	ACALL	INC_AND_GET_DPTR_CHARACTER
 7387:      1CF7 B1 65          	ACALL	PLUS_MINUS_TEST
 7388:      1CF9 92 50          	MOV	XSIGN,C 	;SAVE SIGN STATUS
 7389:      1CFB F1 EB          	ACALL	GET_DIGIT_CHECK
 7390:      1CFD 50 45          	JNC	INERR
 7391:                          	;
 7392:      1CFF 54 0F          	ANL	A,#0FH		;STRIP ASCII BIAS OFF THE C
 7393:      1D01 FD             	MOV	R5,A		;SAVE THE CHARACTER IN R5
 7394:                          	;
 7395:      1D02 A3             GT2:	INC	DPTR
 7396:      1D03 F1 EB          	ACALL	GET_DIGIT_CHECK
 7397:      1D05 50 0D          	JNC	FINISH1
 7398:      1D07 54 0F          	ANL	A,#0FH		;STRIP OFF BIAS
 7399:      1D09 CD             	XCH	A,R5		;GET THE LAST DIGIT
 7400:      1D0A 75 F0 0A       	MOV	B,#10		;MULTIPLY BY TEN
 7401:      1D0D A4             	MUL	AB
 7402:      1D0E 2D             	ADD	A,R5		;ADD TO ORIGINAL VALUE
 7403:      1D0F FD             	MOV	R5,A		;SAVE IN R5
 7404:      1D10 50 F0          	JNC	GT2		;LOOP IF NO CARRY
 7405:      1D12 7D FF          	MOV	R5,#0FFH	;FORCE AN ERROR
 7406:                          	;
 7407:      1D14 ED             FINISH1:MOV	A,R5		;GET THE SIGN
 7408:      1D15 30 50 09       	JNB	XSIGN,POSNUM	;SEE IF EXPONENT IS PO
 7409:      1D18 C3             	CLR	C
 7410:      1D19 9E             	SUBB	A,R6
 7411:      1D1A F4             	CPL	A
 7412:      1D1B 04             	INC	A
 7413:      1D1C 40 09          	JC	FINISH2
 7414:      1D1E 74 01          	MOV	A,#01H
 7415:      1D20 22             	RET
 7416:                          	;
 7417:      1D21 2E             POSNUM: ADD	A,R6		;ADD TO EXPONENT
 7418:      1D22 50 03          	JNC	FINISH2
 7419:                          	;
 7420:      1D24 74 02          POSNM1: MOV	A,#02H
 7421:      1D26 22             	RET
 7422:                          	;
 7423:      1D27 CE             FINISH2:XCH	A,R6		;SAVE THE EXPONENT
 7424:                          	;
 7425:                          FINISH_UP:
 7426:                          	;
 7427:      1D28 8E 30          	MOV	FP_EXP,R6	;SAVE EXPONENT
 7428:      1D2A B8 34 02       	CJNE	R0,#FP_ACCC,FINISH_UP1
 7429:      1D2D 71 B2          	ACALL	FP_CLEAR	;CLEAR THE MEMORY IF 0
 7430:                          FINISH_UP1:
 7431:      1D2F E5 09          	MOV	A,ARG_STACK	;GET THE ARG STACK
 7432:      1D31 C3             	CLR	C
 7433:      1D32 94 0C          	SUBB	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 7434:      1D34 F5 09          	MOV	ARG_STACK,A	;ADJUST FOR STORE
 7435:      1D36 61 11          	AJMP	PACK
 7436:                          	;
 7437:      1D38 C2 D5          STDIG:	CLR	F0		;CLEAR INITIAL DESIGNATOR
 7438:      1D3A 70 0B          	JNZ	STDIG1		;CONTINUE IF NOT ZERO

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 135



 Line    I  Addr Code           Source

 7439:      1D3C B8 34 08       	CJNE	R0,#FP_ACCC,STDIG1
 7440:      1D3F 30 52 04       	JNB	FIRST_RADIX,RET_X
 7441:                          	;
 7442:      1D42 DE 02          DECX:	DJNZ	R6,RET_X
 7443:                          	;
 7444:      1D44 74 FF          INERR:	MOV	A,#0FFH
 7445:                          	;
 7446:      1D46 22             RET_X:	RET
 7447:                          	;
 7448:      1D47 20 53 02       STDIG1: JB	DONE_LOAD,FRTEST
 7449:      1D4A C2 52          	CLR	FIRST_RADIX
 7450:                          	;
 7451:      1D4C 20 52 F3       FRTEST: JB	FIRST_RADIX,DECX
 7452:                          	;
 7453:      1D4F 20 51 01       FDTEST: JB	FOUND_RADIX,FDT1
 7454:      1D52 0E             	INC	R6
 7455:                          	;
 7456:      1D53 20 53 F0       FDT1:	JB	DONE_LOAD,RET_X
 7457:      1D56 B8 3D 02       	CJNE	R0,#FP_ACC8+1,FDT2
 7458:      1D59 D2 53          	SETB	DONE_LOAD
 7459:                          	;
 7460:      1D5B F6             FDT2:	MOV	@R0,A		;SAVE THE STRIPPED ACCU
 7461:      1D5C 08             	INC	R0		;BUMP THE POINTER
 7462:      1D5D 22             	RET			;EXIT
 7463:                          	;
 7464:                          	;**************************************
 7465:                          	;
 7466:                          	; I/O utilities
 7467:                          	;
 7468:                          	;**************************************
 7469:                          	;
 7470:                          INC_AND_GET_DPTR_CHARACTER:
 7471:                          	;
 7472:      1D5E A3             	INC	DPTR
 7473:                          	;
 7474:                          GET_DPTR_CHARACTER:
 7475:                          	;
 7476:      1D5F E0             	MOVX	A,@DPTR 	;GET THE CHARACTER
 7477:      1D60 B4 20 16       	CJNE	A,#' ',PMT1     ;SEE IF A SPACE
 7478:                          	;
 7479:                          	; Kill spaces
 7480:                          	;
 7481:      1D63 80 F9          	SJMP	INC_AND_GET_DPTR_CHARACTER
 7482:                          	;
 7483:                          PLUS_MINUS_TEST:
 7484:                          	;
 7485:      1D65 B4 E3 02       	CJNE	A,#0E3H,PMT11	;SEE IF A PLUS, PLUS
 7486:      1D68 80 0E          	SJMP	PMT3
 7487:      1D6A B4 2B 02       PMT11:	CJNE	A,#'+',PMT12
 7488:      1D6D 80 09          	SJMP	PMT3
 7489:      1D6F B4 E5 02       PMT12:	CJNE	A,#0E5H,PMT13	;SEE IF MINUS,
 7490:      1D72 80 03          	SJMP	PMT2
 7491:      1D74 B4 2D 02       PMT13:	CJNE	A,#'-',PMT1
 7492:                          	;
 7493:      1D77 D3             PMT2:	SETB	C
 7494:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 136



 Line    I  Addr Code           Source

 7495:      1D78 A3             PMT3:	INC	DPTR
 7496:                          	;
 7497:      1D79 22             PMT1:	RET
 7498:                          	;
 7499:                          	;**************************************
 7500:                          	;
 7501:                          FLOATING_POINT_OUTPUT:	; Output the numb
 7502:                          	;
 7503:                          	; IF FORMAT = 00 - FREE FLOATING
 7504:                          	;	    = FX - EXPONENTIAL (X IS THE NUMB
 7505:                          	;	    = NX - N = NUM BEFORE RADIX, X = 
 7506:                          	;		   N + X = 8 MAX
 7507:                          	;
 7508:                          	;**************************************
 7509:                          	;
 7510:      1D7A 91 6A          	ACALL	MDES1		;GET THE NUMBER TO OUTPUT,
 7511:      1D7C 31 A5          	ACALL	POP_AND_EXIT	;OUTPUT POPS THE STA
 7512:      1D7E EF             	MOV	A,R7
 7513:      1D7F FE             	MOV	R6,A		;PUT THE EXPONENT IN R6
 7514:      1D80 71 7E          	ACALL	UNPACK_R0	;UNPACK THE NUMBER
 7515:      1D82 78 2B          	MOV	R0,#FP_NIB1	;POINT AT THE NUMBER
 7516:      1D84 E5 17          	MOV	A,FORMAT	;GET THE FORMAT
 7517:      1D86 FB             	MOV	R3,A		;SAVE IN CASE OF EXP FORMAT
 7518:      1D87 60 49          	JZ	FREE		;FREE FLOATING?
 7519:      1D89 B4 F0 00       	CJNE	A,#0F0H,FPO1	;SEE IF EXPONENTIAL
 7520:      1D8C 50 73          FPO1:	JNC	EXPOUT
 7521:                          	;
 7522:                          	; If here, must be integer USING format
 7523:                          	;
 7524:      1D8E EE             	MOV	A,R6		;GET THE EXPONENT
 7525:      1D8F 70 02          	JNZ	FPO2
 7526:      1D91 7E 80          	MOV	R6,#80H
 7527:      1D93 EB             FPO2:	MOV	A,R3		;GET THE FORMAT
 7528:      1D94 C4             	SWAP	A		;SPLIT INTEGER AND FRACTION
 7529:      1D95 54 0F          	ANL	A,#0FH
 7530:      1D97 FA             	MOV	R2,A		;SAVE INTEGER
 7531:      1D98 D1 67          	ACALL	NUM_LT		;GET THE NUMBER OF INTEGE
 7532:      1D9A CA             	XCH	A,R2		;FLIP FOR SUBB
 7533:      1D9B C3             	CLR	C
 7534:      1D9C 9A             	SUBB	A,R2
 7535:      1D9D FF             	MOV	R7,A
 7536:      1D9E 50 06          	JNC	FPO3
 7537:      1DA0 7D 3F          	MOV	R5,#'?'         ;OUTPUT A QUESTION 
 7538:      1DA2 D1 9C          	ACALL	SOUT1		;NUMBER IS TOO LARGE FOR F
 7539:      1DA4 A1 D2          	AJMP	FREE
 7540:      1DA6 BA 00 07       FPO3:	CJNE	R2,#00,USING0	;SEE IF ZERO
 7541:      1DA9 1F             	DEC	R7
 7542:      1DAA D1 89          	ACALL	SS7
 7543:      1DAC D1 96          	ACALL	ZOUT		;OUTPUT A ZERO
 7544:      1DAE 80 06          	SJMP	USING1
 7545:                          	;
 7546:      1DB0 D1 89          USING0: ACALL	SS7		;OUTPUT SPACES, IF NE
 7547:      1DB2 EA             	MOV	A,R2		;OUTPUT DIGITS
 7548:      1DB3 FF             	MOV	R7,A
 7549:      1DB4 D1 4B          	ACALL	OUTR0
 7550:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 137



 Line    I  Addr Code           Source

 7551:      1DB6 EB             USING1: MOV	A,R3
 7552:      1DB7 54 0F          	ANL	A,#0FH		;GET THE NUMBER RIGHT OF DP
 7553:      1DB9 FA             	MOV	R2,A		;SAVE IT
 7554:      1DBA 60 BD          	JZ	PMT1		;EXIT IF ZERO
 7555:      1DBC D1 92          	ACALL	ROUT		;OUTPUT DP
 7556:      1DBE D1 70          	ACALL	NUM_RT
 7557:      1DC0 B5 02 03       	CJNE	A,2,USINGX	;COMPARE A TO R2
 7558:                          	;
 7559:      1DC3 EA             USINGY: MOV	A,R2
 7560:      1DC4 C1 80          	AJMP	Z7R7
 7561:                          	;
 7562:      1DC6 50 FB          USINGX: JNC	USINGY
 7563:                          	;
 7564:      1DC8 CA             USING2: XCH	A,R2
 7565:      1DC9 C3             	CLR	C
 7566:      1DCA 9A             	SUBB	A,R2
 7567:      1DCB CA             	XCH	A,R2
 7568:      1DCC D1 80          	ACALL	Z7R7		;OUTPUT ZEROS IF NEED TO
 7569:      1DCE EA             	MOV	A,R2
 7570:      1DCF FF             	MOV	R7,A
 7571:      1DD0 C1 4B          	AJMP	OUTR0
 7572:                          	;
 7573:                          	; First, force exponential output, if n
 7574:                          	;
 7575:      1DD2 EE             FREE:	MOV	A,R6		;GET THE EXPONENT
 7576:      1DD3 70 04          	JNZ	FREE1		;IF ZERO, PRINT IT
 7577:      1DD5 D1 9A          	ACALL	SOUT
 7578:      1DD7 C1 96          	AJMP	ZOUT
 7579:                          	;
 7580:      1DD9 7B F0          FREE1:	MOV	R3,#0F0H	;IN CASE EXP NEEDED
 7581:      1DDB 74 77          	MOV	A,#80H-DIGIT-DIGIT-1
 7582:      1DDD 2E             	ADD	A,R6
 7583:      1DDE 40 21          	JC	EXPOUT
 7584:      1DE0 94 F7          	SUBB	A,#0F7H
 7585:      1DE2 40 1D          	JC	EXPOUT
 7586:                          	;
 7587:                          	; Now, just print the number
 7588:                          	;
 7589:      1DE4 D1 8B          	ACALL	SINOUT		;PRINT THE SIGN OF THE NU
 7590:      1DE6 D1 67          	ACALL	NUM_LT		;GET THE NUMBER LEFT OF D
 7591:      1DE8 B4 08 02       	CJNE	A,#8,FREE4
 7592:      1DEB C1 4B          	AJMP	OUTR0
 7593:                          	;
 7594:      1DED D1 4B          FREE4:	ACALL	OUTR0
 7595:      1DEF D1 5D          	ACALL	ZTEST		;TEST FOR TRAILING ZEROS
 7596:      1DF1 60 57          	JZ	U_RET		;DONE IF ALL TRAILING ZEROS
 7597:      1DF3 D1 92          	ACALL	ROUT		;OUTPUT RADIX
 7598:                          	;
 7599:      1DF5 7F 01          FREE2:	MOV	R7,#1		;OUTPUT ONE DIGIT
 7600:      1DF7 D1 4B          	ACALL	OUTR0
 7601:      1DF9 70 4F          	JNZ	U_RET
 7602:      1DFB D1 5D          	ACALL	ZTEST
 7603:      1DFD 60 4B          	JZ	U_RET
 7604:      1DFF 80 F4          	SJMP	FREE2		;LOOP
 7605:                          	;
 7606:      1E01 D1 8B          EXPOUT: ACALL	SINOUT		;PRINT THE SIGN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 138



 Line    I  Addr Code           Source

 7607:      1E03 7F 01          	MOV	R7,#1		;OUTPUT ONE CHARACTER
 7608:      1E05 D1 4B          	ACALL	OUTR0
 7609:      1E07 D1 92          	ACALL	ROUT		;OUTPUT RADIX
 7610:      1E09 EB             	MOV	A,R3		;GET FORMAT
 7611:      1E0A 54 0F          	ANL	A,#0FH		;STRIP INDICATOR
 7612:      1E0C 60 06          	JZ	EXPOTX
 7613:                          	;
 7614:      1E0E FF             	MOV	R7,A		;OUTPUT THE NUMBER OF DIGITS
 7615:      1E0F 1F             	DEC	R7		;ADJUST BECAUSE ONE CHAR ALREAD
 7616:      1E10 D1 4B          	ACALL	OUTR0
 7617:      1E12 80 02          	SJMP	EXPOT4
 7618:                          	;
 7619:      1E14 B1 F5          EXPOTX: ACALL	FREE2		;OUTPUT UNTIL TRAIL
 7620:                          	;
 7621:      1E16 D1 9A          EXPOT4: ACALL	SOUT		;OUTPUT A SPACE
 7622:      1E18 7D 45          	MOV	R5,#'E'
 7623:      1E1A D1 9C          	ACALL	SOUT1		;OUTPUT AN E
 7624:      1E1C EE             	MOV	A,R6		;GET THE EXPONENT
 7625:      1E1D 60 04          	JZ	XOUT0		;EXIT IF ZERO
 7626:      1E1F 14             	DEC	A		;ADJUST FOR THE DIGIT ALREADY OU
 7627:      1E20 B4 80 05       	CJNE	A,#80H,XOUT2	;SEE WHAT IT IS
 7628:                          	;
 7629:      1E23 D1 9A          XOUT0:	ACALL	SOUT
 7630:      1E25 E4             	CLR	A
 7631:      1E26 80 0C          	SJMP	XOUT4
 7632:                          	;
 7633:      1E28 40 06          XOUT2:	JC	XOUT3		;NEGATIVE EXPONENT
 7634:      1E2A 7D 2B          	MOV	R5,#'+'         ;OUTPUT A PLUS SIGN
 7635:      1E2C D1 9C          	ACALL	SOUT1
 7636:      1E2E 80 04          	SJMP	XOUT4
 7637:                          	;
 7638:      1E30 D1 8E          XOUT3:	ACALL	MOUT
 7639:      1E32 F4             	CPL	A		;FLIP BITS
 7640:      1E33 04             	INC	A		;BUMP
 7641:                          	;
 7642:      1E34 C2 E7          XOUT4:	CLR	ACC.7
 7643:      1E36 F8             	MOV	R0,A
 7644:      1E37 7A 00          	MOV	R2,#0
 7645:      1E39 79 58          	MOV	R1,#LOW CONVERT ;CONVERSION LOCATIO
 7646:      1E3B 7B 00          	MOV	R3,#HIGH CONVERT
 7647:      1E3D D1 F7          	ACALL	CONVERT_BINARY_TO_ASCII_STRING
 7648:      1E3F 78 58          	MOV	R0,#LOW CONVERT ;NOW, OUTPUT EXPONE
 7649:                          	;
 7650:      1E41 E2             EXPOT5: MOVX	A,@R0		;GET THE CHARACTER
 7651:      1E42 FD             	MOV	R5,A		;OUTPUT IT
 7652:      1E43 D1 9C          	ACALL	SOUT1
 7653:      1E45 08             	INC	R0		;BUMP THE POINTER
 7654:      1E46 E8             	MOV	A,R0		;GET THE POINTER
 7655:      1E47 B5 01 F7       	CJNE	A,R1B0,EXPOT5	;LOOP
 7656:                          	;
 7657:      1E4A 22             U_RET:	RET			;EXIT
 7658:                          	;
 7659:                          OUTR0:	; Output the characters pointed t
 7660:                          	;
 7661:      1E4B EF             	MOV	A,R7		;GET THE COUNTER
 7662:      1E4C 60 0E          	JZ	OUTR		;EXIT IF DONE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 139



 Line    I  Addr Code           Source

 7663:      1E4E E6             	MOV	A,@R0		;GET THE NUMBER
 7664:      1E4F 44 30          	ORL	A,#30H		;ASCII BIAS
 7665:      1E51 08             	INC	R0		;BUMP POINTER AND COUNTER
 7666:      1E52 1F             	DEC	R7
 7667:      1E53 FD             	MOV	R5,A		;PUT CHARACTER IN OUTPUT REGI
 7668:      1E54 D1 9C          	ACALL	SOUT1		;OUTPUT THE CHARACTER
 7669:      1E56 E4             	CLR	A		;JUST FOR TEST
 7670:      1E57 B8 33 F1       	CJNE	R0,#FP_NIB8+1,OUTR0
 7671:      1E5A 74 55          	MOV	A,#55H		;KNOW WHERE EXIT OCCURED
 7672:                          	;
 7673:      1E5C 22             OUTR:	RET
 7674:                          	;
 7675:      1E5D A9 00          ZTEST:	MOV	R1,R0B0 	;GET POINTER REGISTE
 7676:                          	;
 7677:      1E5F E7             ZT0:	MOV	A,@R1		;GET THE VALUE
 7678:      1E60 70 04          	JNZ	ZT1
 7679:      1E62 09             	INC	R1		;BUMP POINTER
 7680:      1E63 B9 33 F9       	CJNE	R1,#FP_NIB8+1,ZT0
 7681:                          	;
 7682:      1E66 22             ZT1:	RET
 7683:                          	;
 7684:      1E67 EE             NUM_LT: MOV	A,R6		;GET EXPONENT
 7685:      1E68 C3             	CLR	C		;GET READY FOR SUBB
 7686:      1E69 94 80          	SUBB	A,#80H		;SUB EXPONENT BIAS
 7687:      1E6B 50 01          	JNC	NL1		;OK IF NO CARRY
 7688:      1E6D E4             	CLR	A		;NO DIGITS LEFT
 7689:                          	;
 7690:      1E6E FF             NL1:	MOV	R7,A		;SAVE THE COUNT
 7691:      1E6F 22             	RET
 7692:                          	;
 7693:      1E70 C3             NUM_RT: CLR	C		;SUBB AGAIN
 7694:      1E71 74 80          	MOV	A,#80H		;EXPONENT BIAS
 7695:      1E73 9E             	SUBB	A,R6		;GET THE BIASED EXPONENT
 7696:      1E74 50 01          	JNC	NR1
 7697:      1E76 E4             	CLR	A
 7698:                          	;
 7699:      1E77 22             NR1:	RET			;EXIT
 7700:                          	;
 7701:      1E78 EF             SPACE7: MOV	A,R7		;GET THE NUMBER OF SPA
 7702:      1E79 60 FC          	JZ	NR1		;EXIT IF ZERO
 7703:      1E7B D1 9A          	ACALL	SOUT		;OUTPUT A SPACE
 7704:      1E7D 1F             	DEC	R7		;BUMP COUNTER
 7705:      1E7E 80 F8          	SJMP	SPACE7		;LOOP
 7706:                          	;
 7707:      1E80 FF             Z7R7:	MOV	R7,A
 7708:                          	;
 7709:      1E81 EF             ZERO7:	MOV	A,R7		;GET COUNTER
 7710:      1E82 60 F3          	JZ	NR1		;EXIT IF ZERO
 7711:      1E84 D1 96          	ACALL	ZOUT		;OUTPUT A ZERO
 7712:      1E86 1F             	DEC	R7		;BUMP COUNTER
 7713:      1E87 80 F8          	SJMP	ZERO7		;LOOP
 7714:                          	;
 7715:      1E89 D1 78          SS7:	ACALL	SPACE7
 7716:                          	;
 7717:      1E8B EC             SINOUT: MOV	A,R4		;GET THE SIGN
 7718:      1E8C 60 0C          	JZ	SOUT		;OUTPUT A SPACE IF ZERO

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 140



 Line    I  Addr Code           Source

 7719:                          	;
 7720:      1E8E 7D 2D          MOUT:	MOV	R5,#'-'
 7721:      1E90 80 0A          	SJMP	SOUT1		;OUTPUT A MINUS IF NOT
 7722:                          	;
 7723:      1E92 7D 2E          ROUT:	MOV	R5,#'.'         ;OUTPUT A RADI
 7724:      1E94 80 06          	SJMP	SOUT1
 7725:                          	;
 7726:      1E96 7D 30          ZOUT:	MOV	R5,#'0'         ;OUTPUT A ZERO
 7727:      1E98 80 02          	SJMP	SOUT1
 7728:                          	;
 7729:      1E9A 7D 20          SOUT:	MOV	R5,#' '         ;OUTPUT A SPAC
 7730:                          	;
 7731:      1E9C 21 6C          SOUT1:	AJMP	OUTPUT
 7732:                          	;
 7733:                          	;**************************************
 7734:                          	;
 7735:                          CONVERT_ASCII_STRING_TO_BINARY:
 7736:                          	;
 7737:                          	;DPTR POINTS TO ASCII STRING
 7738:                          	;PUT THE BINARY NUMBER IN R2:R0, ERROR 
 7739:                          	;
 7740:                          	;**************************************
 7741:                          	;
 7742:      1E9E 91 89          CASB:	ACALL	HEXSCAN 	;SEE IF HEX NUMBER
 7743:      1EA0 92 23          	MOV	ADD_IN,C	;IF ADD_IN IS SET, THE NUM
 7744:      1EA2 F1 EB          	ACALL	GET_DIGIT_CHECK
 7745:      1EA4 B3             	CPL	C		;FLIP FOR EXIT
 7746:      1EA5 40 28          	JC	RCASB
 7747:      1EA7 7B 00          	MOV	R3,#00H 	;ZERO R3:R1 FOR LOOP
 7748:      1EA9 79 00          	MOV	R1,#00H
 7749:      1EAB 80 15          	SJMP	CASB5
 7750:                          	;
 7751:      1EAD A3             CASB2:	INC	DPTR
 7752:      1EAE 89 00          	MOV	R0B0,R1 	;SAVE THE PRESENT CONVERTE
 7753:      1EB0 8B 02          	MOV	R2B0,R3 	;IN R2:R0
 7754:      1EB2 F1 EB          	ACALL	GET_DIGIT_CHECK
 7755:      1EB4 40 0C          	JC	CASB5
 7756:      1EB6 30 23 16       	JNB	ADD_IN,RCASB	;CONVERSION COMPLETE
 7757:      1EB9 91 A9          	ACALL	HEX_CHECK	;SEE IF HEX NUMBER
 7758:      1EBB 40 03          	JC	CASB4		;PROCEED IF GOOD
 7759:      1EBD A3             	INC	DPTR		;BUMP PAST H
 7760:      1EBE 80 0F          	SJMP	RCASB
 7761:                          	;
 7762:      1EC0 24 09          CASB4:	ADD	A,#9		;ADJUST HEX ASCII BIAS
 7763:                          	;
 7764:      1EC2 75 F0 0A       CASB5:	MOV	B,#10
 7765:      1EC5 30 23 03       	JNB	ADD_IN,CASB6
 7766:      1EC8 75 F0 10       	MOV	B,#16		;HEX MODE
 7767:                          	;
 7768:      1ECB D1 D6          CASB6:	ACALL	MULNUM		;ACCUMULATE THE DIG
 7769:      1ECD 50 DE          	JNC	CASB2		;LOOP IF NO CARRY
 7770:                          	;
 7771:      1ECF E4             RCASB:	CLR	A		;RESET ACC
 7772:      1ED0 92 E1          	MOV	ACC.OVERFLOW,C	;IF OVERFLOW, SAY SO
 7773:      1ED2 22             	RET			;EXIT
 7774:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 141



 Line    I  Addr Code           Source

 7775:      1ED3 75 F0 0A       MULNUM10:MOV	B,#10
 7776:                          	;
 7777:                          	;**************************************
 7778:                          	;
 7779:                          MULNUM: ; Take the next digit in the acc
 7780:                          	; accumulate in R3:R1
 7781:                          	;
 7782:                          	;**************************************
 7783:                          	;
 7784:      1ED6 C0 E0          	PUSH	ACC		;SAVE ACC
 7785:      1ED8 C0 F0          	PUSH	B		;SAVE MULTIPLIER
 7786:      1EDA E9             	MOV	A,R1		;PUT LOW ORDER BITS IN ACC
 7787:      1EDB A4             	MUL	AB		;DO THE MULTIPLY
 7788:      1EDC F9             	MOV	R1,A		;PUT THE RESULT BACK
 7789:      1EDD EB             	MOV	A,R3		;GET THE HIGH ORDER BYTE
 7790:      1EDE AB F0          	MOV	R3,B		;SAVE THE OVERFLOW
 7791:      1EE0 D0 F0          	POP	B		;GET THE MULTIPLIER
 7792:      1EE2 A4             	MUL	AB		;DO IT
 7793:      1EE3 A2 D2          	MOV	C,OV		;SAVE OVERFLOW IN F0
 7794:      1EE5 92 D5          	MOV	F0,C
 7795:      1EE7 2B             	ADD	A,R3		;ADD OVERFLOW TO HIGH RESULT
 7796:      1EE8 FB             	MOV	R3,A		;PUT IT BACK
 7797:      1EE9 D0 E0          	POP	ACC		;GET THE ORIGINAL ACC BACK
 7798:      1EEB 72 D5          	ORL	C,F0		;OR CARRY AND OVERFLOW
 7799:      1EED 40 07          	JC	MULX		;NO GOOD IF THE CARRY IS SET
 7800:                          	;
 7801:      1EEF 54 0F          MUL11:	ANL	A,#0FH		;MASK OFF HIGH ORDER 
 7802:      1EF1 29             	ADD	A,R1		;NOW ADD THE ACC
 7803:      1EF2 F9             	MOV	R1,A		;PUT IT BACK
 7804:      1EF3 E4             	CLR	A		;PROPAGATE THE CARRY
 7805:      1EF4 3B             	ADDC	A,R3
 7806:      1EF5 FB             	MOV	R3,A		;PUT IT BACK
 7807:                          	;
 7808:      1EF6 22             MULX:	RET			;EXIT WITH OR WITHOUT CARRY
 7809:                          	;
 7810:                          CONVERT_BINARY_TO_ASCII_STRING:
 7811:                          ;
 7812:                          ;***************************************
 7813:                          ;****** Elektor 3 Patch ****************
 7814:                          ;****** Performance improvements *******
 7815:                          ;
 7816:                          ;
 7817:                          ;R3:R1 contains the address of the strin
 7818:                          ;R2:R0 contains the value to convert
 7819:                          ;DPTR, R7, R6, and ACC gets clobbered
 7820:                          ;
 7821:                          ;***************************************
 7822:                          ;
 7823:                          ;	CLR	A		;NO LEADING ZEROS
 7824:                          ;	MOV	DPTR,#10000	;SUBTRACT 10000
 7825:                          ;	ACALL	RSUB		;DO THE SUBTRACTION
 7826:                          ;	MOV	DPTR,#1000	;NOW 1000
 7827:                          ;	ACALL	RSUB
 7828:                          ;	MOV	DPTR,#100	;NOW 100
 7829:                          ;	ACALL	RSUB
 7830:                          ;	MOV	DPTR,#10	;NOW 10

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 142



 Line    I  Addr Code           Source

 7831:                          ;	ACALL	RSUB
 7832:                          ;	MOV	DPTR,#1 	;NOW 1
 7833:                          ;	ACALL	RSUB
 7834:                          ;	JZ	RSUB2		;JUMP OVER RET
 7835:                          ;
 7836:                          ;RSUB_R:	RET
 7837:                          ;
 7838:                          ;RSUB:	MOV	R6,#-1		;SET UP THE COUNTER
 7839:                          ;
 7840:                          ;RSUB1: INC	R6		;BUMP THE COUNTER
 7841:                          ;	XCH	A,R2		;DO A FAST COMPARE
 7842:                          ;	CJNE	A,DPH,RSUB11
 7843:                          ;RSUB11: XCH	 A,R2
 7844:                          ;	JC	FAST_DONE
 7845:                          ;	XCH	A,R0		;GET LOW BYTE
 7846:                          ;	SUBB	A,DPL		;SUBTRACT, CARRY IS CLEARE
 7847:                          ;	XCH	A,R0		;PUT IT BACK
 7848:                          ;	XCH	A,R2		;GET THE HIGH BYTE
 7849:                          ;	SUBB	A,DPH		;ADD THE HIGH BYTE
 7850:                          ;	XCH	A,R2		;PUT IT BACK
 7851:                          ;	JNC	RSUB1		;LOOP UNTIL CARRY
 7852:                          ;
 7853:                          ;	XCH	A,R0
 7854:                          ;	ADD	A,DPL		;RESTORE R2:R0
 7855:                          ;	XCH	A,R0
 7856:                          ;	XCH	A,R2
 7857:                          ;	ADDC	A,DPH
 7858:                          ;	XCH	A,R2
 7859:                          ;
 7860:                          ;FAST_DONE:
 7861:                          ;
 7862:                          ;	ORL	A,R6		;OR THE COUNT VALUE
 7863:                          ;	JZ	RSUB_R		;RETURN IF ZERO
 7864:                          ;
 7865:                          ;RSUB2: MOV	A,#'0'          ;GET THE ASC
 7866:                          ;	ADD	A,R6		;ADD THE COUNT
 7867:                          ;
 7868:                          ;RSUB4: MOV	P2,R3		;SET UP P2
 7869:                          ;	MOVX	@R1,A		;PLACE THE VALUE IN MEMORY
 7870:                          ;	INC	R1
 7871:                          ;	CJNE	R1,#00H,RSUB3	;SEE IF RAPPED AROU
 7872:                          ;	INC	R3		;BUMP HIGH BYTE
 7873:                          ;
 7874:                          ;RSUB3: RET			;EXIT
 7875:                          ;
 7876:                          ;****** Faster code starts here: *******
 7877:                          ;
 7878:      1EF7 7D 00          	mov	R5,#0
 7879:                          ;
 7880:      1EF9 EA             RSUB1:	mov	A, R2
 7881:      1EFA 75 F0 0A       	mov	B,#0AH
 7882:      1EFD 84             	div	AB
 7883:      1EFE FA             	mov	R2,A
 7884:      1EFF E8             	mov	A,R0
 7885:      1F00 54 F0          	anl	A,#0F0H
 7886:      1F02 45 F0          	orl	A,B

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 143



 Line    I  Addr Code           Source

 7887:      1F04 C4             	swap	A
 7888:      1F05 75 F0 0A       	mov	B,#0AH
 7889:      1F08 84             	div	AB
 7890:      1F09 C4             	swap	A
 7891:      1F0A FE             	mov	R6,A
 7892:      1F0B E8             	mov	A,R0
 7893:      1F0C 54 0F          	anl	A,#0FH
 7894:      1F0E C4             	swap	A
 7895:      1F0F 45 F0          	orl	A,B
 7896:      1F11 C4             	swap	A
 7897:      1F12 75 F0 0A       	mov	B,#0AH
 7898:      1F15 84             	div	AB
 7899:      1F16 4E             	orl	A,R6
 7900:      1F17 F8             	mov	R0,A
 7901:      1F18 E5 F0          	mov	A,B
 7902:      1F1A 24 30          	add	A,#30H
 7903:      1F1C 0D             	inc	R5
 7904:      1F1D C0 E0          	push	ACC
 7905:      1F1F EA             	mov	A,R2
 7906:      1F20 48             	orl	A,R0
 7907:      1F21 70 D6          	jnz	RSUB1
 7908:                          ;
 7909:      1F23 D0 E0          RSUB2:	pop	ACC
 7910:      1F25 8B A0          	mov	P2,R3
 7911:      1F27 F3             	movx	@R1,A
 7912:      1F28 09             	inc	R1
 7913:      1F29 B9 00 01       	cjne	R1,#0,RSUB3
 7914:      1F2C 0B             	inc	R3
 7915:                          ;
 7916:      1F2D DD F4          RSUB3:	djnz	R5,RSUB2
 7917:      1F2F 22             	ret
 7918:                          ;
 7919:                          ;****** continue with original code: ***
 7920:                          ;
 7921:                          	;**************************************
 7922:                          	;
 7923:                          HEXOUT: ; Output the hex number in R3:R1
 7924:                          	;
 7925:                          	;**************************************
 7926:                          	;
 7927:      1F30 D1 9A          	ACALL	SOUT		;OUTPUT A SPACE
 7928:      1F32 A2 36          	MOV	C,ZSURP 	;GET ZERO SUPPRESSION BIT
 7929:      1F34 92 23          	MOV	ADD_IN,C
 7930:      1F36 EB             	MOV	A,R3		;GET HIGH NIBBLE AND PRINT IT
 7931:      1F37 F1 53          	ACALL	HOUTHI
 7932:      1F39 EB             	MOV	A,R3
 7933:      1F3A F1 54          	ACALL	HOUTLO
 7934:                          	;
 7935:      1F3C C2 23          HEX2X:	CLR	ADD_IN		;DON'T SUPPRESS ZEROS
 7936:      1F3E E9             	MOV	A,R1		;GET LOW NIBBLE AND PRINT IT
 7937:      1F3F F1 53          	ACALL	HOUTHI
 7938:      1F41 E9             	MOV	A,R1
 7939:      1F42 F1 54          	ACALL	HOUTLO
 7940:      1F44 7D 48          	MOV	R5,#'H'         ;OUTPUT H TO INDICA
 7941:                          	;
 7942:      1F46 C1 9C          SOUT_1: AJMP	SOUT1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 144



 Line    I  Addr Code           Source

 7943:                          	;
 7944:      1F48 C2 23          HOUT1:	CLR	ADD_IN		;PRINTED SOMETHING, S
 7945:      1F4A 24 90          	ADD	A,#90H		;CONVERT TO ASCII
 7946:      1F4C D4             	DA	A
 7947:      1F4D 34 40          	ADDC	A,#40H
 7948:      1F4F D4             	DA	A		;GOT IT HERE
 7949:      1F50 FD             	MOV	R5,A		;OUTPUT THE BYTE
 7950:      1F51 80 F3          	SJMP	SOUT_1
 7951:                          	;
 7952:      1F53 C4             HOUTHI: SWAP	A		;SWAP TO OUTPUT HIGH NIB
 7953:                          	;
 7954:      1F54 54 0F          HOUTLO: ANL	A,#0FH		;STRIP
 7955:      1F56 70 F0          	JNZ	HOUT1		;PRINT IF NOT ZERO
 7956:      1F58 30 23 ED       	JNB	ADD_IN,HOUT1	;OUTPUT A ZERO IF NOT 
 7957:      1F5B 22             	RET
 7958:                          ;
 7959:                          ;***************************************
 7960:                          ;******* New baudrate detection ********
 7961:                          ;******* calculate r3:r1=-(Timer2 DIV 16
 7962:                          ;******* Wulf 3 alteration 2 ***********
 7963:                          ;
 7964:                          ;-- comment out for AT98LP52 -----------
 7965:                          ;
 7966:                          ;SERCALC:mov	a,#0F0h
 7967:                          ;	mov	r3,a
 7968:                          ;	mov	r1,TH2
 7969:                          ;	anl	a,r1
 7970:                          ;	swap	a
 7971:                          ;	cpl	a
 7972:                          ;	xch	a,r3
 7973:                          ;	anl	a,TL2
 7974:                          ;	xch	a,r1
 7975:                          ;	anl	a,#00Fh
 7976:                          ;	orl	a,r1
 7977:                          ;	swap	a
 7978:                          ;	cpl	a
 7979:                          ;	mov	r1,ADCON	;save BSY bit
 7980:                          ;	mov	DAPR,#0 	;start A/D for 805xx test
 7981:                          ;	xch	a,r1
 7982:                          ;	ret
 7983:                          ;
 7984:                          ;-- insert for AT98LP52 ----------------
 7985:                          ;TEST_MSG: db	'Speed OK?'
 7986:                          ;	db	00h		; Stop Code
 7987:                          ;-- insert end -------------------------
 7988:                          ;***************************************
 7989:                          ;
 7990:           N      1F78    	ORG	1F78H
 7991:                          	;
 7992:      1F78 20 1A 03       CKS_I:	JB	CKS_B,CS_I
 7993:      1F7B 02 40 1B       	LJMP	401BH
 7994:                          	;
 7995:      1F7E 02 20 88       CS_I:	LJMP	2088H
 7996:                          	;
 7997:      1F81 4E 4F 20 44    E14X:	DB	'NO DATA"'
            1F85 41 54 41 22

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 145



 Line    I  Addr Code           Source

 7998:                          	;
 7999:      1F89 94             E11X:	DB	128+20
 8000:      1F8A 41 52 49 54    	DB	'ARITH. OVERFLOW"'
            1F8E 48 2E 20 4F
            1F92 56 45 52 46
            1F96 4C 4F 57 22
 8001:                          	;
 8002:      1F9A 50 52 4F 47    E16X:	DB	'PROGRAMMING"'
            1F9E 52 41 4D 4D
            1FA2 49 4E 47 22
 8003:                          	;
 8004:      1FA6 43 41 4E       E15X:	DB	'CAN'
 8005:      1FA9 27             	DB	27H
 8006:      1FAA 54 20 43 4F    	DB	'T CONTINUE"'
            1FAE 4E 54 49 4E
            1FB2 55 45 22
 8007:                          	;
 8008:      1FB5 49 4E 56 41    E10X:	DB	'INVALID LINE NUMBER"'
            1FB9 4C 49 44 20
            1FBD 4C 49 4E 45
            1FC1 20 4E 55 4D
            1FC5 42 45 52 22
 8009:                          	;
 8010:      1FC9 50 52 4F 4D    NOROM:	DB	'PROM MODE"'
            1FCD 20 4D 4F 44
            1FD1 45 22
 8011:                          	;
 8012:                          ;***************************************
 8013:                          ;****** Set a new version message ******
 8014:                          ;
 8015:                          ;S_N:	DB	'*MCS-51(tm) BASIC V1.1*'
 8016:                          ;
 8017:      1FD3 2A 4D 43 53    S_N:	DB	'*MCS-BASIC-52 V1.31*"'
            1FD7 2D 42 41 53
            1FDB 49 43 2D 35
            1FDF 32 20 56 31
            1FE3 2E 33 31 2A
            1FE7 22
 8018:                          ;
 8019:                          ;***************************************
 8020:                          ;
 8021:           N      1FEB    	ORG	1FEBH		;FOR LINK COMPATABILITY
 8022:                          	;
 8023:                          GET_DIGIT_CHECK:	; Get a character, then
 8024:                          	;
 8025:      1FEB B1 5F          	ACALL	GET_DPTR_CHARACTER
 8026:                          	;
 8027:                          DIGIT_CHECK:	;CHECK FOR A VALID ASCII DI
 8028:                          	;
 8029:      1FED B4 3A 00       	CJNE	A,#'9'+1,DC10   ;SEE IF ASCII 9 OR
 8030:      1FF0 40 01          DC10:	JC	DC1
 8031:      1FF2 22             	RET
 8032:                          	;
 8033:      1FF3 B4 30 00       DC1:	CJNE	A,#'0',DC11     ;SEE IF ASCII 
 8034:      1FF6 B3             DC11:	CPL	C
 8035:      1FF7 22             	RET

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 146



 Line    I  Addr Code           Source

 8036:                          	;
 8037:           N      1FF8    	ORG	1FF8H
 8038:                          	;
 8039:      1FF8 45 52 52 4F    ERS:	DB	'ERROR: "'
            1FFC 52 3A 20 22
 8040:                          	;
 8041:                          	;**************************************
 8042:                          	;
 8043:                          	XSEG	;External Ram
 8044:                          	;
 8045:                          	;**************************************
 8046:                          	;
 8047:      0000 N      0004    	DS	4
 8048:      0004 N      0001    IBCNT:	DS	1		;LENGTH OF A LINE
 8049:      0005 N      0002    IBLN:	DS	2		;THE LINE NUMBER
 8050:      0007 N      0049    IBUF:	DS	LINLEN		;THE INPUT BUFFER
 8051:      0050 N      000F    CONVT:	DS	15		;CONVERSION LOCATION FOR F
 8052:                          	;
 8053:           N      0100    	ORG	100H
 8054:                          	;
 8055:      0100 N      0001    GTB:	DS	1		;GET LOCATION
 8056:      0101 N      0001    ERRLOC: DS	1		;ERROR TYPE
 8057:      0102 N      0002    ERRNUM: DS	2		;WHERE TO GO ON AN ERROR
 8058:      0104 N      0002    VARTOP: DS	2		;TOP OF VARIABLE STORAGE
 8059:      0106 N      0002    ST_ALL: DS	2		;STORAGE ALLOCATION
 8060:      0108 N      0002    MT_ALL: DS	2		;MATRIX ALLOCATION
 8061:      010A N      0002    MEMTOP: DS	2		;TOP OF MEMORY
 8062:      010C N      0002    RCELL:	DS	2		;RANDOM NUMBER CELL
 8063:      010E N      0005    	DS	FPSIZ-1
 8064:      0113 N      0001    CXTAL:	DS	1		;CRYSTAL
 8065:      0114 N      0005    	DS	FPSIZ-1
 8066:      0119 N      0001    FPT1:	DS	1		;FLOATINP POINT TEMP 1
 8067:      011A N      0005    	DS	FPSIZ-1
 8068:      011F N      0001    FPT2:	DS	1		;FLOATING POINT TEMP 2
 8069:      0120 N      0002    INTLOC: DS	2		;LOCATION TO GO TO ON INTE
 8070:      0122 N      0002    STR_AL: DS	2		;STRING ALLOCATION
 8071:      0124 N      0002    SPV:	DS	2		;SERIAL PORT BAUD RATE
 8072:      0126 N      0002    TIV:	DS	2		;TIMER INTERRUPT NUM AND LOC
 8073:      0128 N      0002    PROGS:	DS	2		;PROGRAM A PROM TIME OUT
 8074:                          ;
 8075:                          ;***************************************
 8076:                          ;****** Disable Intel programming for to
 8077:                          ;****** We don't need this, but don't re
 8078:                          ;
 8079:      012A N      0002    IPROGS: DS	2		;INTELLIGENT PROM PROGRAMM
 8080:                          ;
 8081:                          ;***************************************
 8082:                          ;
 8083:      012C N      0001    TM_TOP: DS	1
 8084:                          ;
 8085:                          ; ---- BASIC-52 Mainroutine End ----
 8086:                          
 8087:                          	CSEG	; Directive is used to select the 
 8088:                          
 8089:                          ;***************************************
 8090:                          ;*                        BASIC-52 V1.31

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 147



 Line    I  Addr Code           Source

 8091:                          ;*          The following code enhanced 
 8092:                          ;*               for I2C communicatin an
 8093:                          ;*--------------------------------------
 8094:                          ;* (C) H.-J. Boehling & D. Wulf 14.11.01
 8095:                          ;*     http://home.arcor.de/h.boehling  
 8096:                          ;*     H-Boehling@gmx.de                
 8097:                          ;***************************************
 8098:                          ;*
 8099:                          ;* Four new I2C communication commands a
 8100:                          ;*
 8101:                          ;* The syntax to use is:
 8102:                          ;*
 8103:                          ;*     I2CSTART           Sends a start 
 8104:                          ;*                        - Returns with
 8105:                          ;*     I2CSTOP            Sends a stop c
 8106:                          ;*                        - Returns with
 8107:                          ;*     I2CPUT [byte]      Sends a byte t
 8108:                          ;*                        - Returns with
 8109:                          ;*     I2CGET [variable]  Reads a byte f
 8110:                          ;*                        - Set 18H (sta
 8111:                          ;*                           DBY(18H) = 
 8112:                          ;*                        - Returns with
 8113:                          ;*   
 8114:                          ;* Register 18H is the I2C communication
 8115:                          ;*
 8116:                          ;*     STATUS=DBY(18H)
 8117:                          ;*      IF STATUS.AND.2=2 PRINT "Time ou
 8118:                          ;*      IF STATUS.AND.4=4 PRINT "Busy er
 8119:                          ;*      IF STATUS.AND.8=8 PRINT "No ackn
 8120:                          ;*
 8121:                          ;*--------------------------------------
 8122:                          ;*
 8123:                          ;* Two new commands to read from or writ
 8124:                          ;*
 8125:                          ;*     WRSFR ([address]) [byte]      Wri
 8126:                          ;*
 8127:                          ;*     RDSFR ([address]) [variable]  Rea
 8128:                          ;*
 8129:                          ;* [address] is the address of the SFR a
 8130:                          ;* 128 (080H) and 255 (0FFH).
 8131:                          ;*
 8132:                          ;***************************************
 8133:                          
 8134:                          ;----- Definitions ---------------------
 8135:                          
 8136:           B        94    SDA		bit	P1.4                    ;I2C se
 8137:           B        95    SCL		bit	P1.5                    ;I2C se
 8138:                          
 8139:           N      0018    status		equ	018H			;Communication status
 8140:                          
 8141:                          ;temp1		equ	11			;Temp. storage. ; *** a
 8142:                          
 8143:                          ;xbit		bit	45			;Command extension prese
 8144:                           
 8145:                          ; the following bits will be set in the 
 8146:                          

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 148



 Line    I  Addr Code           Source

 8147:           N      0002    tout		equ	00000010B		;I2C time out statu
 8148:           N      0004    busy		equ	00000100B		;I2C bus busy statu
 8149:           N      0008    nack		equ	00001000B		;Slave sends no ack
 8150:                          						
 8151:                          ;---------------------------------------
 8152:                          ; The following code is necessary to not
 8153:                          
 8154:           N      2002    		org	2002H			;5Ah at 2002h tells BASIC-
 8155:      2002 5A             		db	5AH			;to call 2048h (see below).
 8156:           N      2048    		org	2048H			;Set bit 45 to tell BASIC-
 8157:                          						;that custom commands or
 8158:      2048 D2 2D          		setb	xbit			;instructions have been
 8159:      204A 22             		ret				;added.
 8160:           N      2070    		org	2070H			;Store starting address of
 8161:      2070 90 24 00       		mov	dptr,#vectortable	;vector table.
 8162:      2073 22             		ret
 8163:           N      2078    		org	2078H			;Store starting address of
 8164:      2078 90 24 0C       		mov	dptr,#tokentable	;token table.
 8165:      207B 22             		ret
 8166:                          
 8167:                          ; The old code for BASIC-52 V1.3 overwri
 8168:                          ; used for a user reset routine! So the 
 8169:                          
 8170:                          ;===== Here starts the code for the new 
 8171:                          
 8172:           N      2400    		org	2400h			;use any available address
 8173:                          
 8174:                          vectortable:					;Vector table starts he
 8175:                          						;Label to branch on:
 8176:      2400 24 40          		dw	i2cstart		;I2CSTART command
 8177:      2402 24 56          		dw	i2cstop			;I2CSTOP command
 8178:      2404 24 62          		dw	i2cput			;I2CPUT command
 8179:      2406 24 92          		dw	i2cget			;I2CGET command
 8180:      2408 25 41          		dw	wrsfr			;WRSFR command
 8181:      240A 25 19          		dw	rdsfr			;RDSFR command
 8182:                          
 8183:                          tokentable:					;Token table starts here
 8184:      240C 10             		db	10H			;1. user defined token for
 8185:      240D 49 32 43 53                    db      'I2CSTART'          
            2411 54 41 52 54
 8186:      2415 00             		db	0			;End of token indicator
 8187:      2416 11             		db	11H			;2.
 8188:      2417 49 32 43 53                    db      'I2CSTOP'
            241B 54 4F 50
 8189:      241E 00             		db	0
 8190:      241F 12             		db	12H			;3.
 8191:      2420 49 32 43 50                    db      'I2CPUT'
            2424 55 54
 8192:      2426 00             		db	0
 8193:      2427 13             		db	13H			;4.
 8194:      2428 49 32 43 47                    db      'I2CGET'
            242C 45 54
 8195:      242E 00             		db	0
 8196:      242F 14                             db      14H             
 8197:      2430 57 52 53 46                    db      'WRSFR'
            2434 52

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 149



 Line    I  Addr Code           Source

 8198:      2435 00             		db	0
 8199:      2436 15                             db      15H             
 8200:      2437 52 44 53 46                    db      'RDSFR'
            243B 52
 8201:      243C 00             		db	0
 8202:                          
 8203:                          ;----- The following is necessary to get
 8204:                          
 8205:      243D DF             		db	0DFH			;Dummy token.
 8206:      243E 7F             		db	07FH			;Unused dummy char.
 8207:                          
 8208:                          ;---------------------------------------
 8209:                          
 8210:      243F FF             		db	0FFH			;End of tokenlist indicator.
 8211:                          
 8212:                          ;---------------------------------------
 8213:                          
 8214:                          ;===== i2cstart - sends an I2C start con
 8215:                          
 8216:      2440 12 24 BA       i2cstart:	call	SCLhigh			;Set SCL to hig
 8217:      2443 7F 04          		mov	R7,#4			;Load time out counter.
 8218:      2445 D2 94          setSDA:		setb	SDA			;Set SDA to high.
 8219:      2447 20 94 06       		jb	SDA,ishigh		;If not high bus is bus
 8220:      244A DF F9          		djnz	R7,setSDA		;If not try until R7 i
 8221:      244C 43 18 04       		orl	status,#busy		;Set busy status.
 8222:      244F 22             		ret				;return to BASIC.
 8223:                          
 8224:      2450 C2 94          ishigh:		clr	SDA			;Set start condition.
 8225:      2452 53 18 00       		anl     status,#0		;Clear I2C status.
 8226:      2455 22              		ret				;return to BASIC.
 8227:                          
 8228:                          ;===== i2cstop - sends an I2C stop condi
 8229:                          
 8230:      2456 53 18 00       i2cstop:	anl 	status,#0		;Clear I2C stat
 8231:      2459 C2 94          		clr	SDA			;Get SDA ready for stop.
 8232:      245B 91 BA          		acall 	SCLhigh			;Set clock for stop.
 8233:      245D 91 B9                     	acall	delay			;Delay 4 machi
 8234:      245F D2 94          		setb	SDA			;Set stop condition.
 8235:      2461 22             		ret				;Return to BASIC.
 8236:                          
 8237:                          ;===== i2cput - sends a byte from a BASI
 8238:                          
 8239:                          ;----- Get value and test for 8 bit only
 8240:                          
 8241:      2462 74 39          i2cput:		mov	A,#39H			;Put value to send
 8242:      2464 12 00 30       		lcall	30H			;argument stack.
 8243:      2467 74 01          		mov	A,#1			;change value to 16 bit
 8244:      2469 12 00 30       		lcall	30H			;integer and write to R3:R
 8245:      246C BB 00 58       		cjne	R3,#0,i2cerror		;If R3 not zero	t
 8246:                          						;value bigger than 0FFH.
 8247:                          						;8 bit integer only error.
 8248:                          
 8249:                          ;----- Send byte to I2C bus ------------
 8250:                          
 8251:      246F E9             		mov	A,R1			;Load byte to send.
 8252:      2470 7E 08          		mov	R6,#8			;Load bit counter

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 150



 Line    I  Addr Code           Source

 8253:      2472 C2 95          send:		clr	SCL			;Make clock low
 8254:      2474 91 B9                     	acall	delay			;Delay 4 machi
 8255:      2476 33             		rlc	A			;Rotate data bit to C.
 8256:      2477 92 94          		mov	SDA,C			;Put data bit on pin.
 8257:      2479 91 BA          		acall	SCLhigh		        ;Send clock.
 8258:      247B 91 B9                     	acall	delay			;Delay 4 machi
 8259:      247D DE F3          		djnz	R6,send			;Repeat until all bits 
 8260:                          
 8261:                          ;----- Read acknowledge from slave -----
 8262:                          	
 8263:      247F C2 95          		clr	SCL			;Make clock low.
 8264:      2481 91 B9                     	acall	delay			;Delay 4 machi
 8265:      2483 D2 94          		setb	SDA			;Release line for acknowled
 8266:      2485 91 BA          		acall	SCLhigh		        ;Send clock for
 8267:      2487 91 B9          	     	acall	delay			;Delay 4 machine cy
 8268:      2489 30 94 03       		jnb	SDA,ackok		;Check for valid acknow
 8269:      248C 43 18 08       		orl	status,#nack		;Set no acknowledge 
 8270:      248F C2 95          ackok:		clr	SCL			;Finish acknowledge bi
 8271:      2491 22             		ret				;Return to BASIC.
 8272:                          
 8273:                          ;===== i2cget - Reads one byte from I2C 
 8274:                          
 8275:      2492 7E 08          i2cget:		mov	R6,#8			;Load bit counter
 8276:      2494 C2 95          read:		clr	SCL			;Make clock low.
 8277:      2496 91 B9                        	acall	delay			;Delay 4 ma
 8278:      2498 91 BA          		acall	SCLhigh		        ;Send clock.
 8279:      249A 91 B9          	   	acall	delay			;Delay 4 machine cycl
 8280:      249C A2 94          		mov	C,SDA			;Get data bit from pin.
 8281:      249E 33             		rlc	A			;Rotate bit into result byte.
 8282:      249F DE F3          		djnz	R6,read			;Repeat until all recei
 8283:                          
 8284:                          ;----- Put received byte on argument sta
 8285:                          
 8286:      24A1 F8             		mov	R0,A			;Load R0 with reseived byte
 8287:      24A2 7A 00          		mov	R2,#0			;Set high byte to zero.
 8288:      24A4 74 9A          		mov	A,#9AH			;Put byte on argument sta
 8289:      24A6 12 00 30       		lcall	30H			;with BASIC funktion.
 8290:                          
 8291:                          ;----- Send acknowledge to slave -------
 8292:                          
 8293:      24A9 C2 95          		clr	SCL			;Set clock low.
 8294:      24AB 91 B9                     	acall	delay			;Delay 4 machi
 8295:      24AD E5 18          		mov	A,status		;Load acknowledge bit
 8296:      24AF 13             		rrc	A			;into C and
 8297:      24B0 92 94          		mov	SDA,C			;send acknowledge bit.
 8298:      24B2 91 BA          		acall	SCLhigh		        ;Send acknowled
 8299:                          
 8300:                          ;----- Set variable to received byte ---
 8301:                          
 8302:      24B4 74 43          		mov	A,#43H			;Set next variable to val
 8303:      24B6 02 00 30       		ljmp	30H			;on argument stack and
 8304:                          						;return to BASIC.
 8305:                          
 8306:                          ;----- delay - generates a delay of 4 ma
 8307:                          
 8308:      24B9 22             delay:		ret				;4 cycles for CALL and RE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 151



 Line    I  Addr Code           Source

 8309:                          
 8310:                          ;----- SCLhigh - sends SCL pin high and 
 8311:                          
 8312:      24BA 7F 04          SCLhigh:	mov	R7,#4			;Load time out coun
 8313:      24BC D2 95          setSCL:	   	setb	SCL			;Set SCL to high.
 8314:      24BE 20 95 05       	       	jb	SCL,quit		;If SCL actually h
 8315:      24C1 DF F9          		djnz	R7,setSCL		;If not try until R7 i
 8316:      24C3 43 18 02       		orl	status,#tout		;Set status time out
 8317:      24C6 22             quit:		ret
 8318:                          
 8319:                          ;----- error - sends an error message to
 8320:                          
 8321:      24C7 74 07          i2cerror:	mov	A,#7			;Send CR/LF
 8322:      24C9 12 00 30       		lcall	30H
 8323:      24CC 7B 24          		mov	R3,#high i2cerrmsg	;Set string add
 8324:      24CE 79 DB          		mov	R1,#low i2cerrmsg
 8325:                          ;error:		setb	34H			;Read string from co
 8326:      24D0 D2 34          error9:		setb	34H			;Read string from co
 8327:      24D2 74 06          		mov	A,#6			;Send String to
 8328:      24D4 12 00 30       		lcall	30H			;terminal.
 8329:      24D7 E4             		clr	A
 8330:      24D8 02 00 30       		ljmp	30H			;Back to command mode.
 8331:                          
 8332:      24DB 45 52 52 4F    i2cerrmsg:      db 'ERROR: BAD I2CPUT ARGUME
            24DF 52 3A 20 42
            24E3 41 44 20 49
            24E7 32 43 50 55
            24EB 54 20 41 52
            24EF 47 55 4D 45
            24F3 4E 54
 8333:      24F5 22             		db	22H			;End of text.  	
 8334:                          
 8335:      24F6 45 52 52 4F    sfrerrmsg:      db 'ERROR: BAD SFR ARGUMENT'
            24FA 52 3A 20 42
            24FE 41 44 20 53
            2502 46 52 20 41
            2506 52 47 55 4D
            250A 45 4E 54
 8336:      250D 22             		db	22H			;End of text.
 8337:                          
 8338:      250E 74 07          sfrerror:	mov	A,#7			;Send CR/LF
 8339:      2510 12 00 30       		lcall	30H
 8340:      2513 7B 24          		mov	R3,#high sfrerrmsg	;Set string add
 8341:      2515 79 F6          		mov	R1,#low sfrerrmsg
 8342:                          ;		sjmp	error  ; *** error -> error9
 8343:      2517 80 B7          		sjmp	error9
 8344:                          
 8345:                          ;===== rdsfr - read from special funtion
 8346:                          
 8347:      2519 74 39          rdsfr:		mov     A,#39H                  
 8348:      251B 12 00 30       		lcall	30H			;argument stack.
 8349:                          
 8350:      251E 74 01          		mov	A,#1			;change value to 16 bit
 8351:      2520 12 00 30       		lcall	30H			;integer and write to R3:R
 8352:                          
 8353:      2523 BB 00 E8       		cjne	R3,#0,sfrerror		;If R3 not zero	t

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 152



 Line    I  Addr Code           Source

 8354:      2526 E9             		mov	A,R1			;Address to Acc.
 8355:      2527 30 E7 E4       		jnb	Acc.7,sfrerror		;If address less t
 8356:      252A FC             		mov	R4,A			;Address to R4.
 8357:                          
 8358:      252B 75 82 88       		mov	DPL,#low sfrgettab	;Set DPTR to ju
 8359:      252E 75 83 25       		mov	DPH,#high sfrgettab	;table.
 8360:      2531 12 25 69       		call	do_sfr			;Read SFR.
 8361:                          
 8362:      2534 F8             		mov	R0,A			;Load R0 with SFR byte.
 8363:      2535 7A 00          		mov	R2,#0			;Set high byte to zero.
 8364:      2537 74 9A          		mov	A,#9AH			;Put byte on argument sta
 8365:      2539 12 00 30       		lcall	30H
 8366:                          
 8367:                          ;----- Set variable to SFR byte --------
 8368:                          
 8369:      253C 74 43          		mov	A,#43H			;Set next variable to val
 8370:      253E 02 00 30       		ljmp	30H			;on argument stack and
 8371:                          						;return to BASIC.
 8372:                          
 8373:                          ;===== wrsfr - write to special funtion 
 8374:                          
 8375:      2541 74 39          wrsfr:		mov     A,#39H                  
 8376:      2543 12 00 30       		lcall	30H			;argument stack.
 8377:                          
 8378:      2546 74 01          		mov	A,#1			;change value to 16 bit
 8379:      2548 12 00 30       		lcall	30H			;integer and write to R3:R
 8380:      254B BB 00 C0       		cjne	R3,#0,sfrerror		;If R3 not zero	t
 8381:      254E E9             		mov	A,R1			;or
 8382:      254F 30 E7 BC       		jnb	Acc.7,sfrerror		;if address less t
 8383:      2552 89 0B          		mov	temp1,R1		;Save address.
 8384:                          
 8385:      2554 74 39          		mov	A,#39H			;Put value to write on
 8386:      2556 12 00 30       		lcall	30H			;argument stack.
 8387:                          
 8388:      2559 74 01          		mov	A,#1			;change value to 16 bit
 8389:      255B 12 00 30       		lcall	30H			;integer and write to R3:R
 8390:      255E BB 00 AD       		cjne	R3,#0,sfrerror		;If R3 not zero	t
 8391:                          						;8 bit integer only error.
 8392:      2561 75 82 86       		mov	DPL,#low sfrputtab	;Set DPTR to ju
 8393:      2564 75 83 25       		mov	DPH,#high sfrputtab	;table.
 8394:      2567 AC 0B          		mov	R4,temp1		;Address to write to R4.
 8395:                          
 8396:                          ;----- do_sfr - read from or wright to S
 8397:                          
 8398:                          ;----- Calculate the jump --------------
 8399:                          
 8400:      2569 EC             do_sfr:		mov	A,R4			;Address to Acc
 8401:      256A 24 80          		add	A,#80H
 8402:      256C FC             		mov	R4,A
 8403:      256D 78 00          		mov	R0,#0
 8404:      256F 25 E0          		add	A,ACC			;*2
 8405:      2571 C8             		xch	A,R0
 8406:      2572 35 E0          		addc	A,ACC			;carry
 8407:      2574 C8             		xch	A,R0
 8408:      2575 25 E0          		add	A,ACC			;*4
 8409:      2577 C8             		xch	A,R0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 153



 Line    I  Addr Code           Source

 8410:      2578 35 E0          		addc	A,ACC			;carry
 8411:      257A C8                             xch     A,R0
 8412:                          
 8413:                          ;----- Load DPTR with offset and jump --
 8414:                          
 8415:      257B 25 82                          add     A,DPL
 8416:      257D F5 82          		mov	DPL,A
 8417:      257F E8             		mov	A,R0
 8418:      2580 35 83          		addc	A,DPH
 8419:      2582 F5 83          		mov	DPH,A
 8420:      2584 EC             		mov	A,R4
 8421:      2585 73             		jmp	@A+DPTR			;Jump into table.
 8422:                          
 8423:                          ;----- The direct addressing table -----
 8424:                          
 8425:      2586 89 80          sfrputtab:	mov	128,R1
 8426:      2588 E5 80          sfrgettab:	mov	A,128
 8427:      258A 22             		ret
 8428:      258B 89 81          		mov	129,R1
 8429:      258D E5 81          		mov	A,129
 8430:      258F 22             		ret
 8431:      2590 89 82          		mov	130,R1
 8432:      2592 E5 82          		mov	A,130
 8433:      2594 22             		ret
 8434:      2595 89 83          		mov	131,R1
 8435:      2597 E5 83          		mov	A,131
 8436:      2599 22             		ret
 8437:      259A 89 84          		mov	132,R1
 8438:      259C E5 84          		mov	A,132
 8439:      259E 22             		ret
 8440:      259F 89 85          		mov	133,R1
 8441:      25A1 E5 85          		mov	A,133
 8442:      25A3 22             		ret
 8443:      25A4 89 86          		mov	134,R1
 8444:      25A6 E5 86          		mov	A,134
 8445:      25A8 22             		ret
 8446:      25A9 89 87          		mov	135,R1
 8447:      25AB E5 87          		mov	A,135
 8448:      25AD 22             		ret
 8449:      25AE 89 88          		mov	136,R1
 8450:      25B0 E5 88          		mov	A,136
 8451:      25B2 22             		ret
 8452:      25B3 89 89          		mov	137,R1
 8453:      25B5 E5 89          		mov	A,137
 8454:      25B7 22             		ret
 8455:      25B8 89 8A          		mov	138,R1
 8456:      25BA E5 8A          		mov	A,138
 8457:      25BC 22             		ret
 8458:      25BD 89 8B          		mov	139,R1
 8459:      25BF E5 8B          		mov	A,139
 8460:      25C1 22             		ret
 8461:      25C2 89 8C          		mov	140,R1
 8462:      25C4 E5 8C          		mov	A,140
 8463:      25C6 22             		ret
 8464:      25C7 89 8D          		mov	141,R1
 8465:      25C9 E5 8D          		mov	A,141

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 154



 Line    I  Addr Code           Source

 8466:      25CB 22             		ret
 8467:      25CC 89 8E          		mov	142,R1
 8468:      25CE E5 8E          		mov	A,142
 8469:      25D0 22             		ret
 8470:      25D1 89 8F          		mov	143,R1
 8471:      25D3 E5 8F          		mov	A,143
 8472:      25D5 22             		ret
 8473:      25D6 89 90          		mov	144,R1
 8474:      25D8 E5 90          		mov	A,144
 8475:      25DA 22             		ret
 8476:      25DB 89 91          		mov	145,R1
 8477:      25DD E5 91          		mov	A,145
 8478:      25DF 22             		ret
 8479:      25E0 89 92          		mov	146,R1
 8480:      25E2 E5 92          		mov	A,146
 8481:      25E4 22             		ret
 8482:      25E5 89 93          		mov	147,R1
 8483:      25E7 E5 93          		mov	A,147
 8484:      25E9 22             		ret
 8485:      25EA 89 94          		mov	148,R1
 8486:      25EC E5 94          		mov	A,148
 8487:      25EE 22             		ret
 8488:      25EF 89 95          		mov	149,R1
 8489:      25F1 E5 95          		mov	A,149
 8490:      25F3 22             		ret
 8491:      25F4 89 96          		mov	150,R1
 8492:      25F6 E5 96          		mov	A,150
 8493:      25F8 22             		ret
 8494:      25F9 89 97          		mov	151,R1
 8495:      25FB E5 97          		mov	A,151
 8496:      25FD 22             		ret
 8497:      25FE 89 98          		mov	152,R1
 8498:      2600 E5 98          		mov	A,152
 8499:      2602 22             		ret
 8500:      2603 89 99          		mov	153,R1
 8501:      2605 E5 99          		mov	A,153
 8502:      2607 22             		ret
 8503:      2608 89 9A          		mov	154,R1
 8504:      260A E5 9A          		mov	A,154
 8505:      260C 22             		ret
 8506:      260D 89 9B          		mov	155,R1
 8507:      260F E5 9B          		mov	A,155
 8508:      2611 22             		ret
 8509:      2612 89 9C          		mov	156,R1
 8510:      2614 E5 9C          		mov	A,156
 8511:      2616 22             		ret
 8512:      2617 89 9D          		mov	157,R1
 8513:      2619 E5 9D          		mov	A,157
 8514:      261B 22             		ret
 8515:      261C 89 9E          		mov	158,R1
 8516:      261E E5 9E          		mov	A,158
 8517:      2620 22             		ret
 8518:      2621 89 9F          		mov	159,R1
 8519:      2623 E5 9F          		mov	A,159
 8520:      2625 22             		ret
 8521:      2626 89 A0          		mov	160,R1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 155



 Line    I  Addr Code           Source

 8522:      2628 E5 A0          		mov	A,160
 8523:      262A 22             		ret
 8524:      262B 89 A1          		mov	161,R1
 8525:      262D E5 A1          		mov	A,161
 8526:      262F 22             		ret
 8527:      2630 89 A2          		mov	162,R1
 8528:      2632 E5 A2          		mov	A,162
 8529:      2634 22             		ret
 8530:      2635 89 A3          		mov	163,R1
 8531:      2637 E5 A3          		mov	A,163
 8532:      2639 22             		ret
 8533:      263A 89 A4          		mov	164,R1
 8534:      263C E5 A4          		mov	A,164
 8535:      263E 22             		ret
 8536:      263F 89 A5          		mov	165,R1
 8537:      2641 E5 A5          		mov	A,165
 8538:      2643 22             		ret
 8539:      2644 89 A6          		mov	166,R1
 8540:      2646 E5 A6          		mov	A,166
 8541:      2648 22             		ret
 8542:      2649 89 A7          		mov	167,R1
 8543:      264B E5 A7          		mov	A,167
 8544:      264D 22             		ret
 8545:      264E 89 A8          		mov	168,R1
 8546:      2650 E5 A8          		mov	A,168
 8547:      2652 22             		ret
 8548:      2653 89 A9          		mov	169,R1
 8549:      2655 E5 A9          		mov	A,169
 8550:      2657 22             		ret
 8551:      2658 89 AA          		mov	170,R1
 8552:      265A E5 AA          		mov	A,170
 8553:      265C 22             		ret
 8554:      265D 89 AB          		mov	171,R1
 8555:      265F E5 AB          		mov	A,171
 8556:      2661 22             		ret
 8557:      2662 89 AC          		mov	172,R1
 8558:      2664 E5 AC          		mov	A,172
 8559:      2666 22             		ret
 8560:      2667 89 AD          		mov	173,R1
 8561:      2669 E5 AD          		mov	A,173
 8562:      266B 22             		ret
 8563:      266C 89 AE          		mov	174,R1
 8564:      266E E5 AE          		mov	A,174
 8565:      2670 22             		ret
 8566:      2671 89 AF          		mov	175,R1
 8567:      2673 E5 AF          		mov	A,175
 8568:      2675 22             		ret
 8569:      2676 89 B0          		mov	176,R1
 8570:      2678 E5 B0          		mov	A,176
 8571:      267A 22             		ret
 8572:      267B 89 B1          		mov	177,R1
 8573:      267D E5 B1          		mov	A,177
 8574:      267F 22             		ret
 8575:      2680 89 B2          		mov	178,R1
 8576:      2682 E5 B2          		mov	A,178
 8577:      2684 22             		ret

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 156



 Line    I  Addr Code           Source

 8578:      2685 89 B3          		mov	179,R1
 8579:      2687 E5 B3          		mov	A,179
 8580:      2689 22             		ret
 8581:      268A 89 B4          		mov	180,R1
 8582:      268C E5 B4          		mov	A,180
 8583:      268E 22             		ret
 8584:      268F 89 B5          		mov	181,R1
 8585:      2691 E5 B5          		mov	A,181
 8586:      2693 22             		ret
 8587:      2694 89 B6          		mov	182,R1
 8588:      2696 E5 B6          		mov	A,182
 8589:      2698 22             		ret
 8590:      2699 89 B7          		mov	183,R1
 8591:      269B E5 B7          		mov	A,183
 8592:      269D 22             		ret
 8593:      269E 89 B8          		mov	184,R1
 8594:      26A0 E5 B8          		mov	A,184
 8595:      26A2 22             		ret
 8596:      26A3 89 B9          		mov	185,R1
 8597:      26A5 E5 B9          		mov	A,185
 8598:      26A7 22             		ret
 8599:      26A8 89 BA          		mov	186,R1
 8600:      26AA E5 BA          		mov	A,186
 8601:      26AC 22             		ret
 8602:      26AD 89 BB          		mov	187,R1
 8603:      26AF E5 BB          		mov	A,187
 8604:      26B1 22             		ret
 8605:      26B2 89 BC          		mov	188,R1
 8606:      26B4 E5 BC          		mov	A,188
 8607:      26B6 22             		ret
 8608:      26B7 89 BD          		mov	189,R1
 8609:      26B9 E5 BD          		mov	A,189
 8610:      26BB 22             		ret
 8611:      26BC 89 BE          		mov	190,R1
 8612:      26BE E5 BE          		mov	A,190
 8613:      26C0 22             		ret
 8614:      26C1 89 BF          		mov	191,R1
 8615:      26C3 E5 BF          		mov	A,191
 8616:      26C5 22             		ret
 8617:      26C6 89 C0          		mov	192,R1
 8618:      26C8 E5 C0          		mov	A,192
 8619:      26CA 22             		ret
 8620:      26CB 89 C1          		mov	193,R1
 8621:      26CD E5 C1          		mov	A,193
 8622:      26CF 22             		ret
 8623:      26D0 89 C2          		mov	194,R1
 8624:      26D2 E5 C2          		mov	A,194
 8625:      26D4 22             		ret
 8626:      26D5 89 C3          		mov	195,R1
 8627:      26D7 E5 C3          		mov	A,195
 8628:      26D9 22             		ret
 8629:      26DA 89 C4          		mov	196,R1
 8630:      26DC E5 C4          		mov	A,196
 8631:      26DE 22             		ret
 8632:      26DF 89 C5          		mov	197,R1
 8633:      26E1 E5 C5          		mov	A,197

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 157



 Line    I  Addr Code           Source

 8634:      26E3 22             		ret
 8635:      26E4 89 C6          		mov	198,R1
 8636:      26E6 E5 C6          		mov	A,198
 8637:      26E8 22             		ret
 8638:      26E9 89 C7          		mov	199,R1
 8639:      26EB E5 C7          		mov	A,199
 8640:      26ED 22             		ret
 8641:      26EE 89 C8          		mov	200,R1
 8642:      26F0 E5 C8          		mov	A,200
 8643:      26F2 22             		ret
 8644:      26F3 89 C9          		mov	201,R1
 8645:      26F5 E5 C9          		mov	A,201
 8646:      26F7 22             		ret
 8647:      26F8 89 CA          		mov	202,R1
 8648:      26FA E5 CA          		mov	A,202
 8649:      26FC 22             		ret
 8650:      26FD 89 CB          		mov	203,R1
 8651:      26FF E5 CB          		mov	A,203
 8652:      2701 22             		ret
 8653:      2702 89 CC          		mov	204,R1
 8654:      2704 E5 CC          		mov	A,204
 8655:      2706 22             		ret
 8656:      2707 89 CD          		mov	205,R1
 8657:      2709 E5 CD          		mov	A,205
 8658:      270B 22             		ret
 8659:      270C 89 CE          		mov	206,R1
 8660:      270E E5 CE          		mov	A,206
 8661:      2710 22             		ret
 8662:      2711 89 CF          		mov	207,R1
 8663:      2713 E5 CF          		mov	A,207
 8664:      2715 22             		ret
 8665:      2716 89 D0          		mov	208,R1
 8666:      2718 E5 D0          		mov	A,208
 8667:      271A 22             		ret
 8668:      271B 89 D1          		mov	209,R1
 8669:      271D E5 D1          		mov	A,209
 8670:      271F 22             		ret
 8671:      2720 89 D2          		mov	210,R1
 8672:      2722 E5 D2          		mov	A,210
 8673:      2724 22             		ret
 8674:      2725 89 D3          		mov	211,R1
 8675:      2727 E5 D3          		mov	A,211
 8676:      2729 22             		ret
 8677:      272A 89 D4          		mov	212,R1
 8678:      272C E5 D4          		mov	A,212
 8679:      272E 22             		ret
 8680:      272F 89 D5          		mov	213,R1
 8681:      2731 E5 D5          		mov	A,213
 8682:      2733 22             		ret
 8683:      2734 89 D6          		mov	214,R1
 8684:      2736 E5 D6          		mov	A,214
 8685:      2738 22             		ret
 8686:      2739 89 D7          		mov	215,R1
 8687:      273B E5 D7          		mov	A,215
 8688:      273D 22             		ret
 8689:      273E 89 D8          		mov	216,R1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 158



 Line    I  Addr Code           Source

 8690:      2740 E5 D8          		mov	A,216
 8691:      2742 22             		ret
 8692:      2743 89 D9          		mov	217,R1
 8693:      2745 E5 D9          		mov	A,217
 8694:      2747 22             		ret
 8695:      2748 89 DA          		mov	218,R1
 8696:      274A E5 DA          		mov	A,218
 8697:      274C 22             		ret
 8698:      274D 89 DB          		mov	219,R1
 8699:      274F E5 DB          		mov	A,219
 8700:      2751 22             		ret
 8701:      2752 89 DC          		mov	220,R1
 8702:      2754 E5 DC          		mov	A,220
 8703:      2756 22             		ret
 8704:      2757 89 DD          		mov	221,R1
 8705:      2759 E5 DD          		mov	A,221
 8706:      275B 22             		ret
 8707:      275C 89 DE          		mov	222,R1
 8708:      275E E5 DE          		mov	A,222
 8709:      2760 22             		ret
 8710:      2761 89 DF          		mov	223,R1
 8711:      2763 E5 DF          		mov	A,223
 8712:      2765 22             		ret
 8713:      2766 89 E0          		mov	224,R1
 8714:      2768 E5 E0          		mov	A,224
 8715:      276A 22             		ret
 8716:      276B 89 E1          		mov	225,R1
 8717:      276D E5 E1          		mov	A,225
 8718:      276F 22             		ret
 8719:      2770 89 E2          		mov	226,R1
 8720:      2772 E5 E2          		mov	A,226
 8721:      2774 22             		ret
 8722:      2775 89 E3          		mov	227,R1
 8723:      2777 E5 E3          		mov	A,227
 8724:      2779 22             		ret
 8725:      277A 89 E4          		mov	228,R1
 8726:      277C E5 E4          		mov	A,228
 8727:      277E 22             		ret
 8728:      277F 89 E5          		mov	229,R1
 8729:      2781 E5 E5          		mov	A,229
 8730:      2783 22             		ret
 8731:      2784 89 E6          		mov	230,R1
 8732:      2786 E5 E6          		mov	A,230
 8733:      2788 22             		ret
 8734:      2789 89 E7          		mov	231,R1
 8735:      278B E5 E7          		mov	A,231
 8736:      278D 22             		ret
 8737:      278E 89 E8          		mov	232,R1
 8738:      2790 E5 E8          		mov	A,232
 8739:      2792 22             		ret
 8740:      2793 89 E9          		mov	233,R1
 8741:      2795 E5 E9          		mov	A,233
 8742:      2797 22             		ret
 8743:      2798 89 EA          		mov	234,R1
 8744:      279A E5 EA          		mov	A,234
 8745:      279C 22             		ret

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 159



 Line    I  Addr Code           Source

 8746:      279D 89 EB          		mov	235,R1
 8747:      279F E5 EB          		mov	A,235
 8748:      27A1 22             		ret
 8749:      27A2 89 EC          		mov	236,R1
 8750:      27A4 E5 EC          		mov	A,236
 8751:      27A6 22             		ret
 8752:      27A7 89 ED          		mov	237,R1
 8753:      27A9 E5 ED          		mov	A,237
 8754:      27AB 22             		ret
 8755:      27AC 89 EE          		mov	238,R1
 8756:      27AE E5 EE          		mov	A,238
 8757:      27B0 22             		ret
 8758:      27B1 89 EF          		mov	239,R1
 8759:      27B3 E5 EF          		mov	A,239
 8760:      27B5 22             		ret
 8761:      27B6 89 F0          		mov	240,R1
 8762:      27B8 E5 F0          		mov	A,240
 8763:      27BA 22             		ret
 8764:      27BB 89 F1          		mov	241,R1
 8765:      27BD E5 F1          		mov	A,241
 8766:      27BF 22             		ret
 8767:      27C0 89 F2          		mov	242,R1
 8768:      27C2 E5 F2          		mov	A,242
 8769:      27C4 22             		ret
 8770:      27C5 89 F3          		mov	243,R1
 8771:      27C7 E5 F3          		mov	A,243
 8772:      27C9 22             		ret
 8773:      27CA 89 F4          		mov	244,R1
 8774:      27CC E5 F4          		mov	A,244
 8775:      27CE 22             		ret
 8776:      27CF 89 F5          		mov	245,R1
 8777:      27D1 E5 F5          		mov	A,245
 8778:      27D3 22             		ret
 8779:      27D4 89 F6          		mov	246,R1
 8780:      27D6 E5 F6          		mov	A,246
 8781:      27D8 22             		ret
 8782:      27D9 89 F7          		mov	247,R1
 8783:      27DB E5 F7          		mov	A,247
 8784:      27DD 22             		ret
 8785:      27DE 89 F8          		mov	248,R1
 8786:      27E0 E5 F8          		mov	A,248
 8787:      27E2 22             		ret
 8788:      27E3 89 F9          		mov	249,R1
 8789:      27E5 E5 F9          		mov	A,249
 8790:      27E7 22             		ret
 8791:      27E8 89 FA          		mov	250,R1
 8792:      27EA E5 FA          		mov	A,250
 8793:      27EC 22             		ret
 8794:      27ED 89 FB          		mov	251,R1
 8795:      27EF E5 FB          		mov	A,251
 8796:      27F1 22             		ret
 8797:      27F2 89 FC          		mov	252,R1
 8798:      27F4 E5 FC          		mov	A,252
 8799:      27F6 22             		ret
 8800:      27F7 89 FD          		mov	253,R1
 8801:      27F9 E5 FD          		mov	A,253

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 160



 Line    I  Addr Code           Source

 8802:      27FB 22             		ret
 8803:      27FC 89 FE          		mov	254,R1
 8804:      27FE E5 FE          		mov	A,254
 8805:      2800 22             		ret
 8806:      2801 89 FF          		mov	255,R1
 8807:      2803 E5 FF          		mov	A,255
 8808:      2805 22             		ret
 8809:                          
 8810:                          ;---------------------------------------
 8811:                          
 8812:                          		end
 8813:                          

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 161




Segment usage:
   Code      :   9172 bytes
   Data      :      0 bytes
   Idata     :      0 bytes
   Edata     :      0 bytes
   Fdata     :      0 bytes
   Xdata     :    140 bytes
   Bit       :      0 bits

   Register banks used: ---

   Warnings: 0
   Errors:   0


C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 162



              L I S T   O F   S Y M B O L S
              =============================


SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
??C51ASM                         NUMBER   8051
??CODE_SIZE                      NUMBER   0000
??DEVICE                         NUMBER   0000
??ERAM_SIZE                      NUMBER   0000
??FDATA_SIZE                     NUMBER   0000
??RAM_SIZE                       NUMBER   0100
??VERSION                        NUMBER   0120
??_AT89C2051_                    NUMBER   001B
??_AT89C4051_                    NUMBER   001C
??_AT89C51ED2_                   NUMBER   0026
??_AT89C51IC2_                   NUMBER   0024
??_AT89C51ID2_                   NUMBER   0025
??_AT89C51RB2_                   NUMBER   0021
??_AT89C51RC2_                   NUMBER   0022
??_AT89C51RC_                    NUMBER   0020
??_AT89C51RD2_                   NUMBER   0023
??_AT89C51_                      NUMBER   001D
??_AT89C52_                      NUMBER   001E
??_AT89C55WD_                    NUMBER   001F
??_AT89LP2052_                   NUMBER   0001
??_AT89LP213_                    NUMBER   0003
??_AT89LP214_                    NUMBER   0004
??_AT89LP216_                    NUMBER   0005
??_AT89LP3240_                   NUMBER   000A
??_AT89LP4052_                   NUMBER   0002
??_AT89LP428_                    NUMBER   0006
??_AT89LP51ED2_                  NUMBER   0011
??_AT89LP51IC2_                  NUMBER   000E
??_AT89LP51ID2_                  NUMBER   0010
??_AT89LP51RB2_                  NUMBER   000C
??_AT89LP51RC2_                  NUMBER   000D
??_AT89LP51RD2_                  NUMBER   000F
??_AT89LP51_                     NUMBER   0007
??_AT89LP52_                     NUMBER   0008
??_AT89LP6440_                   NUMBER   000B
??_AT89LP828_                    NUMBER   0009
??_AT89LS51_                     NUMBER   0019
??_AT89LS52_                     NUMBER   001A
??_AT89S2051_                    NUMBER   0012
??_AT89S4051_                    NUMBER   0013
??_AT89S51_                      NUMBER   0014
??_AT89S52_                      NUMBER   0015
??_AT89S53_                      NUMBER   0016
??_AT89S8252_                    NUMBER   0017
??_AT89S8253_                    NUMBER   0018
??_DEFAULT_                      NUMBER   0000
AABS                             CODE     138F      4877
AADD                             CODE     1741      5836
AANL                             CODE     1484      5163
AATAN                            CODE     11E0      4540
AATAN1                           CODE     11EE      4547
AC                               BIT        D6
AC1                              CODE     096C      2741
ACBYTE                           CODE     13AD      4922
ACC                              DATA       E0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 163



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
ACKOK                            CODE     248F      8270
ACOS                             CODE     116D      4437
ADBYTE                           CODE     13B6      4934
ADCON                            NUMBER   00D8       522
ADDLP                            CODE     19F2      6590
ADDPTR                           CODE     05DE      1982
ADDPTR1                          CODE     05E6      1986
ADD_IN                           BIT        23      6397
ADD_R                            CODE     19F0      6588
ADIV                             CODE     140A      5021
AEL1                             CODE     1282      4677
AELP                             CODE     1270      4665
AEQ                              CODE     13DB      4983
AEQ1                             CODE     13DD      4984
AETOX                            CODE     1327      4798
AEXL                             CODE     134E      4821
AEXP                             CODE     132B      4801
AEXP1                            CODE     133D      4812
AFREE                            CODE     1711      5809
AGE                              CODE     13E7      4991
AGET                             CODE     14A9      5196
AGT                              CODE     13C5      4965
AGT1                             CODE     13C9      4967
AI1                              CODE     137A      4856
AI11                             CODE     1381      4861
AI2                              CODE     1382      4863
AI21                             CODE     138A      4869
AI3                              CODE     138E      4873
AINT                             CODE     136D      4845
AL                               CODE     0D4F      3522
AL1                              CODE     0D52      3523
AL2                              CODE     0D57      3525
AL3                              CODE     0D58      3526
ALE                              CODE     13EB      4994
ALEN                             CODE     1721      5818
ALN                              CODE     12C0      4732
ALN1                             CODE     12CD      4739
ALN11                            CODE     12EF      4761
ALNE                             CODE     12E5      4755
ALNL                             CODE     12D3      4745
ALNO                             CODE     12F8      4766
ALPAR                            CODE     13AC      4918
ALT                              CODE     13D6      4979
ALT1                             CODE     13D8      4980
AMUL                             CODE     11B0      4492
ANE                              CODE     13E1      4987
ANEG                             CODE     13A1      4906
ANOT                             CODE     1496      5179
ANU                              CODE     0D44      3516
AORL                             CODE     148D      5171
AP1                              CODE     14E5      5261
APCON                            CODE     14E9      5264
ARCAP2                           CODE     14DF      5253
ARG1_EXP_IS_LARGER               CODE     1A56      6689
ARG1_EXP_IS_LARGER1              CODE     1A57      6692
ARG1_EXP_IS_LARGER2              CODE     1A5A      6695
ARGF                             BIT        24       442
ARG_STACK                        NUMBER   0009      6366
ARG_STACK_PAGE                   NUMBER   0001      6367

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 164



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
ARND                             CODE     13F1      5000
ASGN                             CODE     1395      4889
ASIN                             CODE     1171      4446
ASIN1                            CODE     1187      4457
ASQR                             CODE     128D      4690
ASTKA                            NUMBER   0009       382
ASTKAH                           NUMBER   0001       547
ASUB                             CODE     171C      5815
AT2CON                           CODE     14D3      5242
ATAN                             CODE     11D0      4524
ATCON                            CODE     14D7      5247
ATIM0                            CODE     14C1      5226
ATIM1                            CODE     14C7      5230
ATIM2                            CODE     14CD      5234
ATIME                            CODE     1729      5823
ATMOD                            CODE     14DB      5250
ATTAB                            CODE     112A      4339
AXBYTE                           CODE     13BE      4945
AXBYTE1                          CODE     13C0      4950
AXRL                             CODE     1498      5181
AXTAL                            CODE     0FD9      4053
AXTAL0                           CODE     1657      5616
AXTAL1                           CODE     165C      5619
AXTAL2                           CODE     1679      5653
AXTAL3                           CODE     121F      4591
A_D                              CODE     1260      4649
A_IE                             CODE     14B9      5220
A_IP                             CODE     14BD      5223
B                                DATA       F0
B4800                            NUMBER   00B2       539
B9600                            NUMBER   00D9       540
BABC                             NUMBER   0027       494
BAUD19K                          NUMBER   00B2      1450
BCHR                             CODE     082F      2523
BCHR1                            CODE     0835      2525
BCK                              CODE     078D      2366
BD                               BIT        DF       489
BELL                             NUMBER   0007       531
BG1                              CODE     0428      1452
BG3                              CODE     0467      1484
BI                               BIT        32       466
BO                               BIT        2C       460
BOFAH                            NUMBER   0013       402
BOFAL                            NUMBER   0014       403
BOTH_PLUS                        CODE     1A5E      6704
BR0                              CODE     07F1      2476
BR2                              CODE     083E      2529
BS                               NUMBER   0008       532
BUSY                             NUMBER   0004      8148
B_C                              CODE     0AA4      2980
B_TXA                            CODE     0F23      3913
B_TXA1                           CODE     0F2D      3918
C0                               CODE     0CF6      3468
C0C                              CODE     1025      4139
C0ORX1                           BIT        34       475
C1                               CODE     0CFD      3472
C1C                              CODE     1030      4145
C2                               CODE     0D06      3477
C2C                              CODE     102F      4143

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 165



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
C2_T2                            CODE     146C      5132
C3C                              CODE     1035      4149
CASB                             CODE     1E9E      7742
CASB2                            CODE     1EAD      7751
CASB4                            CODE     1EC0      7762
CASB5                            CODE     1EC2      7764
CASB6                            CODE     1ECB      7768
CBIAS                            CODE     167B      5655
CC1                              CODE     1844      6023
CCAL                             CODE     051C      1742
CCAL1                            CODE     052C      1759
CCLR3                            CODE     068C      2162
CCONT                            CODE     183E      6020
CERASE                           CODE     0500      1721
CILOOP                           CODE     080F      2503
CILOOP1                          CODE     0811      2504
CIUB                             BIT        1E       434
CI_RET                           CODE     07BE      2410
CI_RET1                          CODE     07BF      2411
CKS_B                            BIT        1A       426
CKS_I                            CODE     1F78      7992
CL1                              CODE     106F      4187
CL2                              CODE     1074      4190
CL3                              CODE     1092      4206
CL6                              CODE     1094      4208
CL7                              CODE     109D      4212
CLIST                            CODE     104E      4170
CLIST1                           CODE     106B      4184
CLN_UP                           CODE     0F17      3905
CLOCK_CFG                        NUMBER   00B9       204
CLOOP                            CODE     1A66      6716
CL_1                             CODE     067D      2150
CL_2                             CODE     068B      2160
CMND1                            CODE     1787      5891
CMND11                           CODE     17EB      5952
CMND3                            CODE     17C4      5930
CMND31                           CODE     17D1      5935
CMND5                            CODE     17DD      5941
CMNDD                            CODE     010F       718
CMNDLK                           CODE     0855      2542
CMNDR                            CODE     1794      5908
CMNDSP                           NUMBER   004D       516
CMNX                             CODE     179B      5912
CMNX1                            CODE     17A8      5918
CMPLK                            CODE     1208      4568
CN0                              CODE     0FFE      4108
CN0T                             CODE     101C      4132
CN0T1                            CODE     1005      4111
CN0T2                            CODE     1010      4120
CN0T3                            CODE     1012      4123
CN0T4                            CODE     101B      4131
CNEW                             CODE     065C      2115
CNEW1                            CODE     0662      2127
CNTRLC                           NUMBER   0003       533
CNTRLD                           NUMBER   0004       534
CNT_S                            BIT        35       476
CNULL                            CODE     0B08      3087
CNX                              CODE     0FF9      4100
COB                              BIT        1B       427

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 166



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
CONB                             BIT        17       423
CONST                            CODE     0FEF      4091
CONVERT                          NUMBER   0058      6369
CONVERT_ASCII_STRING_TO_BINARY   CODE     1E9E      7735
CONVERT_BINARY_TO_ASCII_STRING   CODE     1EF7      7810
CONVT                            XDATA    0050      8051
COUB                             BIT        1C       430
CPROG                            CODE     048A      1637
CPROG1                           CODE     048D      1639
CPROG2                           CODE     04B1      1657
CPS                              CODE     0EA9      3776
CR                               NUMBER   000D       529
CR0                              CODE     03EC      1290
CR1                              CODE     0400      1315
CR11                             CODE     0403      1316
CR2                              CODE     040C      1321
CR20                             CODE     0419      1327
CRAM                             CODE     177F      5879
CRLF                             CODE     06A5      2194
CRLF2                            CODE     06A3      2192
CROM                             CODE     053C      1778
CRP                              CODE     06AD      2203
CRS                              CODE     03E0      1284
CRS1                             CODE     03E5      1286
CRS2                             CODE     03E8      1287
CRST                             CODE     038B      1208
CRST1                            CODE     03A4      1243
CRST2                            CODE     03A7      1246
CRUN                             CODE     0802      2495
CS1                              CODE     0B47      3156
CSC                              CODE     0BBD      3240
CSETUP                           CODE     0B4B      3159
CSETUP1                          CODE     0B56      3165
CSTAKA                           CODE     142C      5062
CSTAKA2                          CODE     142A      5060
CSTKA                            NUMBER   0011       397
CSTKAH                           NUMBER   0000       548
CSTS                             CODE     07C8      2426
CSTS1                            CODE     07CE      2434
CSTS2                            CODE     07D4      2438
CSY                              CODE     0A1E      2878
CSY1                             CODE     0A2E      2890
CSY2                             CODE     0A3A      2898
CS_I                             CODE     1F7E      7995
CXFER                            CODE     1773      5865
CXTAL                            XDATA    0113      8064
CY                               BIT        D7
C_1                              CODE     0F12      3902
C_2                              CODE     0F0D      3899
C_BIT                            BIT        2E       462
C_EX                             CODE     07D7      2451
C_K                              CODE     0540      1785
C_TST                            CODE     0EC6      3803
D1                               CODE     05DC      1971
DACK                             BIT        96       480
DAPR                             NUMBER   00DA       523
DBTWO                            CODE     1194      4467
DC1                              CODE     1FF3      8033
DC10                             CODE     1FF0      8030

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 167



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
DC11                             CODE     1FF6      8034
DCMPX                            CODE     05CC      1959
DEC3210                          CODE     158B      5413
DEC3211                          CODE     158F      5415
DEC3212                          CODE     1590      5416
DEC76                            CODE     1647      5593
DEC77                            CODE     164C      5596
DECDP                            CODE     05C2      1941
DECDP1                           CODE     05C8      1944
DECDP2                           CODE     05C0      1939
DECX                             CODE     1D42      7442
DEC_ASTKA                        CODE     120B      4572
DEC_ASTKA1                       CODE     1212      4579
DEC_R                            CODE     1589      5410
DELAY                            CODE     24B9      8308
DELTST                           CODE     0EE1      3838
DELTST1                          CODE     0EE3      3839
DIGIT                            NUMBER   0004       557
DIGIT_CHECK                      CODE     1FED      8027
DIRF                             BIT        2F       463
DIV0                             CODE     1ABD      6826
DIV3                             CODE     1ACA      6835
DIV4                             CODE     1AD7      6843
DIV5                             CODE     1ADA      6846
DIV6                             CODE     1AE2      6851
DIV7                             CODE     1AF9      6873
DIV8                             CODE     1B0E      6886
DLD                              CODE     062B      2063
DONE_LOAD                        BIT        53      6401
DO_SFR                           CODE     2569      8400
DPH                              DATA       83
DPL                              DATA       82
DP_B                             CODE     0E9B      3768
DP_T                             CODE     0EA2      3772
DRQ                              BIT        31       465
DT1                              CODE     0EE8      3843
DTEMP                            CODE     184D      6029
DTYPE                            NUMBER   0003       551
DUBSUB                           CODE     0A02      2848
D_CHK                            CODE     0DCC      3603
D_L1                             CODE     0AF8      3065
D_UNDER                          CODE     1AC8      6833
E10X                             CODE     1FB5      8008
E11X                             CODE     1F89      7999
E14X                             CODE     1F81      7997
E15X                             CODE     1FA6      8004
E16X                             CODE     1F9A      8002
E1X                              CODE     1746      5846
E1XX                             CODE     1885      6071
E1XX1                            CODE     1887      6072
E1XX2                            CODE     188C      6075
E2X                              CODE     1751      5847
E3X                              CODE     1828      6009
E3XX                             CODE     09BD      2799
E4XX                             CODE     0BC1      3243
E4YY                             CODE     121A      4587
E5X                              CODE     1816      6007
E6X                              CODE     1761      5850
E7X                              CODE     1804      6004

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 168



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
EA                               BIT        AF
EATC                             CODE     0CE5      3452
EBIAS                            CODE     1261      4657
EIG                              CODE     036D      1200
EIGP                             CODE     0E4E      3682
EK                               CODE     0C0E      3306
ENDBIT                           BIT        29       457
EOF                              NUMBER   0001       546
EP1                              CODE     0F45      3955
EP2                              CODE     0F49      3958
EP21                             CODE     0F52      3962
EP22                             CODE     0F5B      3966
EP3                              CODE     0F6F      3977
EP4                              CODE     0F71      3979
EP41                             CODE     0F76      3982
EP42                             CODE     0F7B      3984
EP5                              CODE     0F82      3988
ER0                              CODE     1874      6061
ER1                              CODE     18B8      6108
ER2                              CODE     18C2      6117
ER3                              CODE     18D1      6125
ER31                             CODE     18EE      6138
ER4                              CODE     18FB      6145
ERA1                             CODE     050D      1728
ERAMEND                          NUMBER   03FF       564
ERL4                             CODE     0844      2533
ERPAR                            CODE     0CE3      3450
ERRLK                            CODE     04D6      1682
ERRLOC                           XDATA    0101      8056
ERRNUM                           XDATA    0102      8057
ERROR                            CODE     188F      6087
ERROR0                           CODE     189B      6094
ERROR01                          CODE     18A2      6097
ERROR1                           CODE     1890      6088
ERROR9                           CODE     24D0      8326
ERRS                             CODE     18AD      6102
ERS                              CODE     1FF8      8039
ES                               BIT        AC
ET0                              BIT        A9
ET1                              BIT        AB
EX0                              BIT        A8
EX1                              BIT        AA
EXA                              CODE     037B      1202
EXC                              CODE     0383      1204
EXI                              CODE     1836      6012
EXP1                             CODE     17F8      5972
EXP11                            CODE     17F2      5965
EXPONENTS_EQUAL                  CODE     1A5B      6698
EXPOT4                           CODE     1E16      7621
EXPOT5                           CODE     1E41      7650
EXPOTX                           CODE     1E14      7619
EXPOUT                           CODE     1E01      7606
EXPRB                            CODE     0F43      3953
E_FIND                           CODE     0A93      2970
F0                               BIT        D5
FCMP                             CODE     1202      4564
FDT1                             CODE     1D53      7456
FDT2                             CODE     1D5B      7460
FDTEST                           CODE     1D4F      7453

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 169



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
FINDC                            CODE     0EEE      3856
FINDCR                           CODE     0EEC      3854
FINISH1                          CODE     1D14      7407
FINISH2                          CODE     1D27      7423
FINISH_UP                        CODE     1D28      7425
FINISH_UP1                       CODE     1D2F      7430
FIRST_RADIX                      BIT        52      6400
FL1                              CODE     0AD3      3030
FL11                             CODE     0AD7      3034
FL2                              CODE     0AEC      3048
FL3                              CODE     0ADC      3037
FLOATING_ADD                     CODE     1993      6467
FLOATING_COMP                    CODE     1A43      6664
FLOATING_DIV                     CODE     1AB0      6811
FLOATING_MUL                     CODE     1A73      6732
FLOATING_POINT_INPUT             CODE     1CC2      7351
FLOATING_POINT_OUTPUT            CODE     1D7A      7501
FLOATING_SUB                     CODE     1989      6456
FMUL0                            CODE     1A78      6741
FMUL1                            CODE     1A7A      6745
FMUL2                            CODE     1A8C      6769
FMUL21                           CODE     1A8E      6770
FMUL3                            CODE     1A9D      6792
FMUL_OVER                        CODE     1A88      6755
FNDCL2                           CODE     0EF6      3862
FNDCL3                           CODE     0EFA      3865
FORMAT                           NUMBER   0017       406
FOUND_RADIX                      BIT        51      6399
FOV                              CODE     1A8A      6759
FPC1                             CODE     1BB5      7075
FPO1                             CODE     1D8C      7520
FPO2                             CODE     1D93      7527
FPO3                             CODE     1DA6      7540
FPONE                            CODE     16F2      5788
FPSIZ                            NUMBER   0006       556
FPT1                             XDATA    0119      8066
FPT2                             XDATA    011F      8068
FPTS                             CODE     104B      4162
FPTST                            CODE     1038      4151
FPTST1                           CODE     1045      4159
FP_ACC1                          NUMBER   0035      6419
FP_ACC2                          NUMBER   0036      6420
FP_ACC3                          NUMBER   0037      6421
FP_ACC4                          NUMBER   0038      6422
FP_ACC5                          NUMBER   0039      6423
FP_ACC6                          NUMBER   003A      6424
FP_ACC7                          NUMBER   003B      6425
FP_ACC8                          NUMBER   003C      6426
FP_ACCC                          NUMBER   0034      6418
FP_ACCS                          NUMBER   003D      6427
FP_ACCX                          NUMBER   0033      6417
FP_BASE                          CODE     196F      6441
FP_BASE1                         CODE     1971      6442
FP_BASE10                        CODE     1983      6451
FP_BASE11                        CODE     1985      6452
FP_BASE12                        CODE     1987      6453
FP_BASE2                         CODE     1973      6443
FP_BASE3                         CODE     1975      6444
FP_BASE4                         CODE     1977      6445

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 170



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
FP_BASE5                         CODE     1979      6446
FP_BASE6                         CODE     197B      6447
FP_BASE7                         CODE     197D      6448
FP_BASE8                         CODE     197F      6449
FP_BASE9                         CODE     1981      6450
FP_CARRY                         NUMBER   002A      6396
FP_CLEAR                         CODE     1BB2      7066
FP_DIG12                         NUMBER   002B      6402
FP_DIG34                         NUMBER   002C      6403
FP_DIG56                         NUMBER   002D      6404
FP_DIG78                         NUMBER   002E      6405
FP_EXP                           NUMBER   0030      6408
FP_NIB1                          NUMBER   002B      6409
FP_NIB2                          NUMBER   002C      6410
FP_NIB3                          NUMBER   002D      6411
FP_NIB4                          NUMBER   002E      6412
FP_NIB5                          NUMBER   002F      6413
FP_NIB6                          NUMBER   0030      6414
FP_NIB7                          NUMBER   0031      6415
FP_NIB8                          NUMBER   0032      6416
FP_NUMBER_SIZE                   NUMBER   0006      6378
FP_SIGN                          NUMBER   002F      6406
FP_STATUS                        NUMBER   0028      6394
FP_TEMP                          NUMBER   0029      6395
FREE                             CODE     1DD2      7575
FREE1                            CODE     1DD9      7580
FREE2                            CODE     1DF5      7599
FREE4                            CODE     1DED      7594
FRTEST                           CODE     1D4C      7451
FS                               CODE     13D0      4972
FSIZE                            NUMBER   0011       561
FSTK                             CODE     13CB      4969
FSUB10                           CODE     1A41      6660
FSUB5                            CODE     1A10      6620
FSUB6                            CODE     1A1B      6631
FSUB7                            CODE     1A1F      6634
FSUB8                            CODE     1A2A      6642
FSUB81                           CODE     1A2D      6643
FSUB9                            CODE     1A30      6648
FTYPE                            NUMBER   0001       549
FUL1                             CODE     15B0      5467
FULL                             CODE     15A8      5460
F_VAR                            CODE     0619      2050
F_VAR0                           CODE     0620      2054
F_VAR1                           CODE     0636      2071
F_VAR2                           CODE     0643      2082
G1                               CODE     058F      1880
G2                               CODE     05A2      1890
G3                               CODE     05A6      1893
G4                               CODE     05A9      1896
G5                               CODE     05AC      1898
GC                               CODE     0ECD      3815
GCI                              CODE     0ED5      3821
GCI1                             CODE     0ED7      3825
GCI11                            CODE     0EDE      3829
GETEND                           CODE     058A      1876
GETLIN                           CODE     058C      1878
GET_DIGIT_CHECK                  CODE     1FEB      8023
GET_DPTR_CHARACTER               CODE     1D5F      7474

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 171



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
GET_NUM                          CODE     1957      6247
GLN                              CODE     0AD1      3028
GT1                              CODE     1CEA      7382
GT11                             CODE     1CF2      7385
GT12                             CODE     1CF5      7386
GT2                              CODE     1D02      7395
GTB                              XDATA    0100      8055
GTEST                            CODE     1CDB      7375
GTRD                             BIT        18       424
GTX                              CODE     1547      5339
GTX1                             CODE     155A      5350
GTYPE                            NUMBER   0002       550
HC1                              CODE     1CB1      7334
HC11                             CODE     1CB4      7335
HEX2X                            CODE     1F3C      7935
HEXDO1                           CODE     1CA1      7319
HEXDON                           CODE     1CA0      7317
HEXOUT                           CODE     1F30      7923
HEXSC1                           CODE     1C8F      7306
HEXSCAN                          CODE     1C89      7297
HEX_CHECK                        CODE     1CA9      7326
HEX_CHECK1                       CODE     1CAE      7330
HMODE                            BIT        37       478
HOUT1                            CODE     1F48      7944
HOUTHI                           CODE     1F53      7952
HOUTLO                           CODE     1F54      7954
HS1                              CODE     1CA6      7323
H_RET                            CODE     196B      6283
I2                               CODE     123B      4620
I21                              CODE     1247      4627
I2CERRMSG                        CODE     24DB      8332
I2CERROR                         CODE     24C7      8321
I2CGET                           CODE     2492      8275
I2CPUT                           CODE     2462      8241
I2CSTART                         CODE     2440      8216
I2CSTOP                          CODE     2456      8230
IAN                              CODE     00F3       706
IAT                              CODE     090B      2686
IAT1                             CODE     090E      2687
IBCNT                            XDATA    0004      8048
IBLK                             CODE     193F      6229
IBLK1                            CODE     194E      6235
IBLN                             XDATA    0005      8049
IBUF                             XDATA    0007      8050
ICLR                             CODE     069A      2177
ICLR1                            CODE     069F      2183
IE                               DATA       A8
IE0                              BIT        89
IE1                              BIT        8B
IFIX                             CODE     1223      4598
IFIXL                            CODE     0E90      3750
IGC                              CODE     0ECB      3813
ILOOP                            CODE     0813      2508
ILOOP1                           CODE     081F      2512
IMOV                             CODE     1566      5364
IN2                              CODE     0DFD      3640
IN2A                             CODE     0E02      3643
IN3                              CODE     0E0F      3649
IN3A                             CODE     0E20      3659

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 172



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
IN5                              CODE     0E40      3674
IN6                              CODE     0E49      3678
INBIT                            BIT        1D       433
INC3210                          CODE     1576      5386
INC3211                          CODE     157B      5390
INC3212                          CODE     1580      5393
INCH1                            CODE     07AA      2391
INCH11                           CODE     07AF      2393
INCH12                           CODE     07B4      2395
INCH13                           CODE     07BB      2403
INCHAR                           CODE     0791      2375
INCHAR1                          CODE     0799      2378
INCHAR2                          CODE     07A1      2385
INC_AND_GET_DPTR_CHARACTER       CODE     1D5E      7470
INC_ASTKA                        CODE     124F      4634
INC_FP_EXP                       CODE     1B72      6989
INERR                            CODE     1D44      7444
INL0                             CODE     06D6      2237
INL1                             CODE     06DD      2242
INL11                            CODE     06E6      2246
INL2                             CODE     06D3      2235
INL2B                            CODE     06EC      2251
INL2B1                           CODE     06F2      2254
INL2B2                           CODE     06F5      2255
INL6                             CODE     06FE      2261
INLINE                           CODE     06D8      2239
INLOOP                           CODE     1CD0      7367
INLPIK                           CODE     1CD8      7372
INLX                             CODE     06E8      2248
INPROG                           BIT        11       417
INP_B                            BIT        22       440
INS                              CODE     0103       710
INSR                             CODE     1517      5307
INSR1                            CODE     1523      5314
INT0                             BIT        B2
INT1                             BIT        B3
INTBIT                           BIT        12       418
INTERR                           CODE     0F30      3930
INTERR1                          CODE     0F32      3931
INTERX                           CODE     0938      2712
INTERX1                          CODE     093B      2714
INTERX2                          CODE     0941      2716
INTERX3                          CODE     0948      2719
INTERX4                          CODE     094D      2721
INTGER                           CODE     0F35      3934
INTGRC                           BIT        19      6370
INTLOC                           XDATA    0120      8069
INTPEN                           BIT        16       422
INTXAH                           NUMBER   0042       506
INTXAL                           NUMBER   0043       507
IP                               DATA       B8
IPROGS                           XDATA    012A      8079
IRAMTOP                          NUMBER   00FF       524
ISAV                             BIT        2B       459
ISHIGH                           CODE     2450      8224
ISTA0                            CODE     0950      2723
ISTA01                           CODE     095A      2727
ISTA1                            CODE     095C      2729
ISTAT                            CODE     08F8      2677

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 173



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
ISTAT1                           CODE     0900      2680
ISTAX                            CODE     091C      2695
ISTAX1                           CODE     0921      2698
ISTAY                            CODE     0925      2702
ISTAY1                           CODE     0928      2703
ISTAY2                           CODE     092D      2705
IST_CAL                          CODE     09E7      2833
IT0                              BIT        88
IT1                              BIT        8A
ITRAP                            CODE     086A      2564
ITRAP1                           CODE     0872      2569
ITRAP2                           CODE     087A      2574
ITRAP21                          CODE     087D      2575
ITRAP3                           CODE     0882      2583
ITRET                            CODE     0F40      3940
I_DL                             CODE     185B      6039
I_DR                             CODE     1902      6155
I_L                              CODE     0849      2536
I_PI                             CODE     0E95      3757
I_RET                            CODE     1871      6056
I_S                              CODE     0933      2709
I_S1                             CODE     0936      2710
I_T0                             BIT        26       444
L20DPI                           CODE     0573      1826
L31DPI                           CODE     05BA      1926
LCLR                             CODE     05E7      1990
LDPTRI                           CODE     05B0      1910
LD_A                             CODE     0FE9      4081
LD_T                             CODE     0582      1853
LEFT                             CODE     1BF3      7135
LEFT1                            CODE     1BF5      7141
LEFT2                            CODE     1BF6      7142
LEFT3                            CODE     1BFD      7147
LEFT5                            CODE     1C1C      7174
LEFTL                            CODE     1C08      7156
LEFTL1                           CODE     1C1B      7172
LF                               NUMBER   000A       530
LIN1                             CODE     155C      5352
LINE                             CODE     14F0      5280
LINE0                            CODE     14ED      5278
LINE1                            CODE     150B      5297
LINEB                            BIT        15       421
LINLEN                           NUMBER   0049       545
LMOV                             CODE     156D      5380
LNTAB                            CODE     16A9      5693
LN_D                             CODE     131B      4784
LOAD1                            CODE     19AD      6503
LOAD2                            CODE     19BD      6515
LOAD21                           CODE     19C5      6522
LOAD22                           CODE     19CA      6528
LOAD23                           CODE     19CE      6531
LOAD25                           CODE     19E3      6579
LOAD7                            CODE     1B93      7021
LOADR1                           CODE     1C7F      7286
LOADR1_MANTISSA                  CODE     1C7B      7277
LOAD_POINTERS                    CODE     1C5E      7232
LP                               BIT        97       479
LPB                              BIT        19       425
LTOUT1                           CODE     074A      2324

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 174



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
LTX                              CODE     1528      5320
LTX1                             CODE     152F      5325
LTX2                             CODE     1543      5336
L_RET                            CODE     0EEB      3845
MDES1                            CODE     1C6A      7254
MEMTOP                           XDATA    010A      8061
MILLIV                           NUMBER   0047       510
MNL0                             CODE     1C3E      7206
MNL1                             CODE     1C50      7218
MNLOOP                           CODE     1C35      7198
MOUT                             CODE     1E8E      7720
MSIGN                            BIT        78      6407
MT1                              NUMBER   0045       508
MT2                              NUMBER   0046       509
MT_ALL                           XDATA    0108      8060
MU1                              CODE     136B      4837
MUL11                            CODE     1EEF      7801
MULNUM                           CODE     1ED6      7779
MULNUM10                         CODE     1ED3      7775
MULX                             CODE     1EF6      7808
MUL_DIV_EXP_AND_SIGN             CODE     1C68      7245
MUL_NIBBLE                       CODE     1C2B      7184
MUL_UNDERFLOW                    BIT        28       453
N4                               CODE     0BC6      3246
NACK                             NUMBER   0008      8149
NL1                              CODE     1E6E      7690
NLC                              CODE     077A      2356
NLC1                             CODE     077F      2358
NLC2                             CODE     0782      2359
NLC3                             CODE     0786      2361
NMARK_L                          CODE     1A96      6775
NMOV                             CODE     159D      5442
NMOV1                            CODE     15A7      5450
NOGO                             CODE     056E      1821
NOPASS                           CODE     0F21      3910
NOROM                            CODE     1FC9      8010
NO_C                             BIT        30       464
NR1                              CODE     1E77      7699
NTWO                             CODE     1161      4404
NULL                             NUMBER   0000       535
NULLCT                           NUMBER   0015       404
NUMC                             CODE     0C19      3313
NUMC1                            CODE     0C22      3318
NUM_LT                           CODE     1E67      7684
NUM_RT                           CODE     1E70      7693
ONE                              CODE     0E8E      3744
ON_ERR                           BIT        13       419
OOPS                             CODE     0D3A      3502
OPBOL                            CODE     00CF       664
OPTAB                            CODE     0057       588
OTI                              BIT        14       420
OTS                              BIT        10       416
OTST                             CODE     1938      6216
OTST1                            CODE     193E      6221
OUTPUT                           CODE     196C      6431
OUTR                             CODE     1E5C      7673
OUTR0                            CODE     1E4B      7659
OV                               BIT        D2
OVE1                             CODE     1B98      7032

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 175



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
OVERFLOW                         NUMBER   0001      6380
OVERFLOW_AND_EXIT                CODE     1B94      7025
P                                BIT        D0
P0                               DATA       80
P1                               DATA       90
P2                               DATA       A0
P3                               DATA       B0
PACK                             CODE     1B11      6890
PACK0                            CODE     1B1A      6903
PACK1                            CODE     1B1B      6905
PACK11                           CODE     1B23      6910
PACK2                            CODE     1B25      6912
PACK3                            CODE     1B37      6926
PACK31                           CODE     1B38      6927
PACK4                            CODE     1B4F      6950
PAREN_INT                        CODE     0E97      3763
PCL                              CODE     1439      5077
PCON                             DATA       87
PCON0                            NUMBER   0087       517
PG1                              CODE     04BD      1668
PG10                             CODE     04BC      1666
PG101                            CODE     04B5      1661
PG2                              CODE     04C3      1672
PG31                             CODE     04F7      1705
PG4                              CODE     04C0      1670
PG5                              CODE     04CB      1677
PG6                              CODE     04D0      1680
PG7                              CODE     04D9      1685
PG8                              CODE     046F      1494
PGR                              CODE     04B3      1659
PGU                              CODE     04F8      1709
PHEAD                            NUMBER   0016       405
PIE                              CODE     17FE      5991
PIPI                             CODE     147F      5154
PLNEXP                           CODE     1430      5065
PLOOP                            CODE     1B51      6954
PLUS_MINUS_TEST                  CODE     1D65      7483
PMT1                             CODE     1D79      7497
PMT11                            CODE     1D6A      7487
PMT12                            CODE     1D6F      7489
PMT13                            CODE     1D74      7491
PMT2                             CODE     1D77      7493
PMT3                             CODE     1D78      7495
PMTOP                            CODE     164F      5606
PMTOP1                           CODE     1652      5607
PN0                              CODE     06C3      2221
PN01                             CODE     06CC      2225
PN02                             CODE     06CD      2226
PN1                              CODE     06B9      2212
POLY1                            CODE     11A3      4484
POLYC                            CODE     119B      4475
POPAS                            CODE     0FD3      4050
POP_AND_EXIT                     CODE     19A5      6494
POP_T1                           CODE     1448      5092
POSNM1                           CODE     1D24      7420
POSNUM                           CODE     1D21      7417
POTWO                            CODE     1192      4465
PP                               CODE     15BA      5483
PPL                              CODE     15CD      5494

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 176



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
PPL1                             CODE     15D2      5497
PPL2                             CODE     15D7      5502
PPL21                            CODE     15DC      5505
PPL22                            CODE     15E1      5507
PPL3                             CODE     15F0      5519
PPL4                             CODE     15F5      5525
PPL41                            CODE     15FE      5534
PPL6                             CODE     1622      5558
PPL61                            CODE     162B      5563
PPL7                             CODE     162F      5566
PPL71                            CODE     1630      5567
PPL9                             CODE     1643      5579
PPL91                            CODE     1644      5580
PPLX                             CODE     1609      5543
PPLY                             CODE     1616      5549
PPLY1                            CODE     161B      5554
PPX                              CODE     15E5      5510
PRET                             CODE     1B71      6987
PRNTCR                           CODE     06C1      2219
PROGS                            XDATA    0128      8073
PS                               BIT        BC
PSTART                           NUMBER   0200       560
PSW                              DATA       D0
PT0                              BIT        B9
PT1                              BIT        BB
PTIME                            CODE     0709      2279
PUSHAS                           CODE     0FDD      4060
PUSHC                            CODE     1433      5073
PUSHCS                           CODE     0BB1      3231
PUSHCS1                          CODE     0BB6      3233
PUSHCS2                          CODE     0BBC      3238
PUSHR2R0                         CODE     1CB6      7338
PUSH_ONE                         CODE     1443      5087
PUSH_T1                          CODE     144F      5098
PUSH_T11                         CODE     1451      5101
PUSH_T12                         CODE     1453      5103
PX0                              BIT        B8
PX1                              BIT        BA
P_E                              CODE     0CDF      3447
P_T2                             CODE     1456      5106
P_Z                              CODE     1375      4853
QUIT                             CODE     24C6      8317
R0B0                             NUMBER   0000       369
R1B0                             NUMBER   0001       370
R2B0                             NUMBER   0002       371
R3B0                             NUMBER   0003       372
R3CK                             CODE     09D5      2815
R4B0                             NUMBER   0004       373
R5B0                             NUMBER   0005       374
R6B0                             NUMBER   0006       375
R76S                             CODE     0DEF      3621
R7B0                             NUMBER   0007       376
RB8                              BIT        9A
RC1                              CODE     066F      2135
RC2                              CODE     0673      2138
RCAPH2                           NUMBER   00CB       520
RCAPL2                           NUMBER   00CA       521
RCASB                            CODE     1ECF      7771
RCELL                            XDATA    010C      8062

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 177



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
RCL                              CODE     0885      2584
RCL1                             CODE     088A      2592
RCL2                             CODE     0892      2599
RCL3                             CODE     0898      2603
RCL4                             CODE     089E      2607
RCL5                             CODE     08A4      2611
RCL6                             CODE     08AA      2615
RCLEAR                           CODE     0664      2129
RD                               BIT        B7
RDSFR                            CODE     2519      8347
RDYS                             CODE     00FD       708
READ                             CODE     2494      8276
RECIP                            CODE     127C      4673
REN                              BIT        9C
RETBIT                           BIT        25       443
RET_X                            CODE     1D46      7446
RF1                              CODE     055E      1808
RF2                              CODE     0565      1814
RF3                              CODE     056B      1819
RFX                              CODE     0564      1812
RI                               BIT        98
RIGHT                            CODE     1BBB      7082
RIGHT1                           CODE     1BBD      7089
RIGHT2                           CODE     1BBE      7090
RIGHT3                           CODE     1BC5      7097
RIGHT5                           CODE     1BE4      7123
RIGHTL                           CODE     1BD1      7107
RIGHTL1                          CODE     1BE3      7121
RL1                              CODE     0AF4      3061
RLINE                            CODE     0AF2      3059
RMOV                             CODE     1581      5405
RO1                              CODE     0543      1793
RO11                             CODE     054E      1799
ROMADR                           NUMBER   8000       552
ROMFD                            CODE     055B      1806
ROM_P                            CODE     06AF      2205
ROM_P1                           CODE     06B7      2210
ROUT                             CODE     1E92      7723
RROM                             CODE     07C0      2419
RS0                              BIT        D3
RS1                              BIT        D4
RSUB1                            CODE     1EF9      7880
RSUB2                            CODE     1F23      7909
RSUB3                            CODE     1F2D      7916
RTST                             CODE     0AC7      3011
RTST1                            CODE     0AD0      3019
RTXAH                            NUMBER   0012       398
RTXAL                            NUMBER   0010       396
RV                               CODE     11B5      4497
RXD                              BIT        B0
S0RELH                           NUMBER   00BA       519
S0RELL                           NUMBER   00AA       518
S13                              CODE     0D3D      3504
S20DP                            CODE     1424      5047
S31DP                            CODE     0605      2019
S31DP2                           CODE     0603      2017
S31L                             CODE     170E      5807
SA                               CODE     0D1B      3489
SA1                              CODE     0D22      3492

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 178



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
SA2                              CODE     0D26      3494
SAFE_MOD                         NUMBER   00A1       205
SAVE_T                           NUMBER   004A       513
SBAUD                            CODE     16F9      5797
SBAUD1                           NUMBER   00C2       210
SBUF                             DATA       99
SBUF1                            NUMBER   00C1       209
SCALL                            CODE     0E63      3702
SCL                              BIT        95      8137
SCLHIGH                          CODE     24BA      8312
SCLOCK                           CODE     1918      6174
SCLR                             CODE     068F      2166
SCON                             DATA       98
SCON1                            NUMBER   00C0       206
SC_R                             CODE     192D      6194
SD0                              CODE     0D5C      3530
SD01                             CODE     0D59      3528
SDA                              BIT        94      8136
SDI                              CODE     0DBC      3594
SDIMX                            CODE     0D61      3533
SE0                              CODE     0CBE      3413
SE1                              CODE     199F      6488
SEND                             CODE     2472      8253
SERR1                            CODE     18B3      6105
SETFSYS                          CODE     0436      1464
SETREG                           CODE     1253      4641
SETREG1                          CODE     1254      4642
SETSCL                           CODE     24BC      8313
SETSDA                           CODE     2445      8218
SF2                              CODE     0A53      2918
SF21                             CODE     0A56      2920
SF3                              CODE     0A72      2935
SFOR                             CODE     0A3C      2906
SFRERRMSG                        CODE     24F6      8335
SFRERROR                         CODE     250E      8338
SFRGETTAB                        CODE     2588      8426
SFRPUTTAB                        CODE     2586      8425
SGOSUB                           CODE     0B2D      3135
SGOTO                            CODE     0AAA      2991
SGS0                             CODE     0B2F      3137
SGS1                             CODE     0B35      3141
SGT1                             CODE     0AAC      2993
SGT11                            CODE     0AB7      2999
SGT2                             CODE     0AB9      3001
SGT21                            CODE     0AC1      3004
SIF                              CODE     0A86      2963
SIF1                             CODE     0A90      2968
SIGNS_DIFFERENT                  CODE     1A53      6684
SIN0                             CODE     11FC      4554
SINOUT                           CODE     1E8B      7717
SINPUT                           CODE     0DF5      3634
SINTAB                           CODE     16CE      5743
SLET                             CODE     096E      2750
SLET0                            CODE     09C2      2802
SLET1                            CODE     09C6      2805
SLET2                            CODE     09C8      2807
SM                               CODE     0C5F      3364
SM0                              BIT        9F
SM01                             CODE     0C6D      3370

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 179



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
SM02                             CODE     0C71      3372
SM1                              BIT        9E
SM2                              BIT        9D
SNEXT                            CODE     0B5F      3176
SONERR                           CODE     140F      5026
SONEXT                           CODE     1419      5038
SOT                              CODE     0E56      3688
SOUT                             CODE     1E9A      7729
SOUT1                            CODE     1E9C      7731
SOUT_1                           CODE     1F46      7942
SP                               DATA       81
SP0                              CODE     0C3C      3342
SP1                              CODE     0C43      3347
SP2                              CODE     0C3F      3344
SP4                              CODE     0C47      3350
SP6                              CODE     0C52      3356
SP7                              CODE     0C57      3359
SP8                              CODE     0C75      3375
SP9                              CODE     0CD7      3434
SP9A                             CODE     0CDE      3439
SPACE7                           CODE     1E78      7701
SPEOP                            CODE     09D9      2818
SPEOP1                           CODE     09DD      2820
SPH0                             CODE     0C29      3328
SPH1                             CODE     0C2B      3330
SPINT                            BIT        1F       437
SPOP                             CODE     0A7D      2950
SPOP1                            CODE     0A85      2955
SPRINT                           CODE     0C2D      3332
SPRINT1                          CODE     0C31      3334
SPRINT2                          CODE     0C38      3339
SPSAV                            NUMBER   003E       502
SPUSH                            CODE     0A76      2944
SPV                              XDATA    0124      8071
SP_H                             NUMBER   004B       514
SP_L                             NUMBER   004C       515
SQ                               CODE     0C7C      3379
SQR1                             CODE     12A3      4703
SQR2                             CODE     12AA      4710
SQR4                             CODE     12AD      4715
SQR41                            CODE     12BE      4724
SQ_ERR                           CODE     128A      4682
SR0                              CODE     0B14      3112
SR01                             CODE     0B24      3122
SRD                              CODE     0BE9      3284
SRD0                             CODE     0BE5      3281
SRD1                             CODE     0BF2      3289
SRD2                             CODE     0BF4      3291
SRD21                            CODE     0BFE      3296
SRD4                             CODE     0BFF      3298
SRD5                             CODE     0C06      3302
SRD51                            CODE     0C09      3303
SRD6                             CODE     0C11      3308
SREAD                            CODE     0BE3      3279
SRESTR                           CODE     0BCE      3256
SRESTR1                          CODE     0BD0      3257
SRETI                            CODE     0B0E      3101
SRETRN                           CODE     0B10      3109
SRT                              CODE     1219      4585

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 180



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
SS                               CODE     0D12      3484
SS7                              CODE     1E89      7715
SSOOP                            CODE     099D      2778
SSTOP                            CODE     0858      2549
SSTOP0                           CODE     0860      2553
STACKTP                          NUMBER   00FE       525
STATD                            CODE     0123       743
STATUS                           NUMBER   0018      8139
STDIG                            CODE     1D38      7437
STDIG1                           CODE     1D47      7448
STEROT                           CODE     070F      2295
STESIZ                           NUMBER   0009       558
STJ                              CODE     0020       312
STK                              CODE     0041       355
STONE                            CODE     1686      5669
STONE1                           CODE     168B      5676
STOPBIT                          BIT        20       438
STORE2                           CODE     1B69      6979
STORE_ALIGN_TEST_AND_EXIT        CODE     1B63      6969
STP                              CODE     00EE       704
STQ                              CODE     0033       347
STRING                           CODE     060C      2030
STRIP                            CODE     11DA      4530
STR_AL                           XDATA    0122      8070
STS                              CODE     003E       353
STU                              CODE     0044       358
ST_A                             CODE     0FE5      4071
ST_ALL                           XDATA    0106      8059
SUBLP                            CODE     19FB      6599
SUI                              CODE     192E      6198
SUNTIL                           CODE     0B01      3078
SUO                              CODE     1933      6208
SWAP_AND_EXIT                    CODE     199B      6481
SWAP_ASTKA                       CODE     145A      5111
SWHILE                           CODE     0AFC      3074
SX                               CODE     0C81      3382
SX1                              CODE     0C97      3391
S_0                              CODE     0982      2761
S_1                              CODE     09B2      2792
S_11                             CODE     09BA      2796
S_3                              CODE     0991      2771
S_4                              CODE     099F      2780
S_41                             CODE     09A6      2783
S_5                              CODE     09AD      2789
S_C                              CODE     0EBF      3791
S_C_1                            CODE     0E72      3714
S_DO                             CODE     0F05      3887
S_E                              CODE     098C      2767
S_L                              CODE     1461      5121
S_LEN                            NUMBER   003F       503
S_N                              CODE     1FD3      8017
S_ON                             CODE     0CEB      3458
S_WU                             CODE     0B03      3080
T0                               BIT        B4
T1                               BIT        B5
T2CON                            NUMBER   00C8       198
T2MOD                            NUMBER   00C9       203
TB                               CODE     15B5      5470
TB8                              BIT        9B

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 181



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
TBR                              CODE     1599      5430
TBYTE                            CODE     1596      5427
TCON                             DATA       88
TEMP1                            NUMBER   000B       387
TEMP2                            NUMBER   000C       388
TEMP3                            NUMBER   000D       389
TEMP4                            NUMBER   000E       390
TEMP5                            NUMBER   000F       391
TEMPD                            CODE     1854      6033
TEMP_COMP                        CODE     131C      4788
TEROT                            CODE     0711      2297
TEROT01                          CODE     0717      2300
TEROT02                          CODE     071E      2303
TEROT03                          CODE     0727      2307
TEROT04                          CODE     072F      2310
TEROT1                           CODE     0766      2344
TEROT11                          CODE     076C      2347
TEROT2                           CODE     0773      2351
TEST_USER                        CODE     17E0      5946
TF0                              BIT        8D
TF1                              BIT        8F
TH0                              DATA       8C
TH1                              DATA       8D
TH2                              NUMBER   00CD       200
THREE                            CODE     0E78      3720
TI                               BIT        99
TIMER_LOAD                       CODE     052D      1763
TIMER_LOAD1                      CODE     052F      1768
TIV                              XDATA    0126      8072
TL0                              DATA       8A
TL1                              DATA       8B
TL2                              NUMBER   00CC       199
TMOD                             DATA       89
TMR0                             NUMBER   00C8      1093
TMR1                             NUMBER   00C9      1097
TMR2                             NUMBER   00CA      1101
TM_TOP                           XDATA    012C      8083
TOKENTABLE                       CODE     240C      8183
TOKTAB                           CODE     0175       791
TOUT                             NUMBER   0002      8147
TR                               CODE     1913      6164
TR0                              BIT        8C
TR1                              BIT        8E
TRC2                             NUMBER   00CE      1121
TT2C                             NUMBER   00CB      1109
TTC                              NUMBER   00CC      1113
TTIME                            CODE     1167      4422
TTM                              NUMBER   00CD      1117
TVH                              NUMBER   0048       511
TVL                              NUMBER   0049       512
TWO                              CODE     0E85      3733
TWOL                             CODE     14A1      5189
TWO_EX                           CODE     14B3      5208
TWO_EY                           CODE     14B4      5211
TWO_R2                           CODE     14B1      5205
TXAH                             NUMBER   000A       383
TXAL                             NUMBER   0008       381
TXD                              BIT        B1
TXX                              CODE     075F      2339

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 182



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
T_1                              CODE     073A      2315
T_ADD                            NUMBER   00E3       974
T_ASC                            NUMBER   00D1      1133
T_BIT                            BIT        92       488
T_BUF                            CODE     176C      5854
T_CHR                            NUMBER   00D3      1143
T_CMND                           NUMBER   00F0      1147
T_CMP                            CODE     07E3      2465
T_CR                             NUMBER   00AA       943
T_DATA                           NUMBER   009C       891
T_DIR                            NUMBER   0090       855
T_DP                             CODE     0EB8      3785
T_ELSE                           NUMBER   00A8       935
T_EQU                            NUMBER   00EA       996
T_F1                             CODE     0A9E      2976
T_GOSB                           NUMBER   009F       901
T_GOTO                           NUMBER   0083       806
T_HH                             NUMBER   0040       504
T_IE                             NUMBER   00C6      1085
T_IP                             NUMBER   00C7      1089
T_L                              CODE     196C      6432
T_LAST                           NUMBER   00A4       917
T_LL                             NUMBER   0041       505
T_LPAR                           NUMBER   00E0       964
T_MTOP                           NUMBER   00C4      1081
T_NEG                            NUMBER   00E9       994
T_P1                             NUMBER   00CF      1125
T_PC                             NUMBER   00D0      1129
T_REM                            NUMBER   0096       872
T_SPC                            NUMBER   00A9       939
T_STEP                           NUMBER   00A7       931
T_STOP                           NUMBER   0090       851
T_SUB                            NUMBER   00E5       981
T_T                              CODE     08B0      2625
T_T01                            CODE     08BE      2632
T_T1                             CODE     08CE      2639
T_T2                             CODE     08DF      2656
T_TAB                            NUMBER   00A4       919
T_THEN                           NUMBER   00A5       923
T_TIME                           NUMBER   00C5      1105
T_TO                             NUMBER   00A6       927
T_TRAP                           CODE     08E5      2662
T_ULAST                          NUMBER   00BE      1060
T_UOP                            NUMBER   00B0      1016
T_USE                            NUMBER   00D2      1137
T_XTAL                           NUMBER   00C3      1077
T_X_S                            CODE     0B39      3144
U1RI                             BIT        C0       208
U1TI                             BIT        C1       207
U3                               CODE     0C9B      3394
U4                               CODE     0C9F      3397
U5                               CODE     0CA9      3402
U5A                              CODE     0CC0      3415
U6                               CODE     0CCD      3427
U7                               CODE     0CCF      3429
U8                               CODE     0CC9      3424
U8A                              CODE     0CC4      3419
U8B                              CODE     0CC6      3421
UBIT                             BIT        2A       458

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 183



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
UE                               CODE     1513      5302
ULOOP                            CODE     1B82      7007
UNDERFLOW                        NUMBER   0000      6379
UNDERFLOW_AND_EXIT               CODE     1BA5      7044
UNDER_MD                         CODE     1B4D      6945
UNPACK_R0                        CODE     1B7E      7000
UOPBOL                           CODE     00E0       683
UPB                              BIT        27       445
UPP0                             CODE     10AE      4243
UPP01                            CODE     10B1      4244
UPP02                            CODE     10BC      4250
UPP03                            CODE     10C1      4252
UPP04                            CODE     10C6      4254
UPP1                             CODE     10DD      4268
UPP11                            CODE     10E3      4271
UPP1A                            CODE     10D9      4265
UPP2                             CODE     10EC      4275
UPP3                             CODE     1101      4288
UPP4                             CODE     110D      4296
UPP41                            CODE     1115      4300
UPP42                            CODE     1119      4302
UPP7                             CODE     1121      4308
UPP7A                            CODE     111F      4306
UPP8                             CODE     1123      4310
UPP81                            CODE     1125      4312
UPP9                             CODE     10CD      4258
UPP91                            CODE     10D5      4262
UPPL                             CODE     10A3      4223
UPPL0                            CODE     10A0      4214
UPRNT                            CODE     06BF      2217
UP_2                             CODE     10F7      4282
UP_3                             CODE     10FA      4284
UP_4                             CODE     10FD      4285
USENT                            CODE     0047       569
USING0                           CODE     1DB0      7546
USING1                           CODE     1DB6      7551
USING2                           CODE     1DC8      7564
USINGX                           CODE     1DC6      7562
USINGY                           CODE     1DC3      7559
U_ID1                            CODE     1860      6046
U_IDL                            BIT        21       439
U_RET                            CODE     1E4A      7657
V4                               CODE     0DB4      3589
VAR                              CODE     0D65      3536
VAR1                             CODE     0D67      3538
VAR11                            CODE     0D71      3543
VAR2                             CODE     0D9A      3570
VARB                             CODE     0A0D      2864
VARCOP                           CODE     1472      5144
VARD                             CODE     0A10      2866
VARTOP                           XDATA    0104      8058
VAR_ER                           CODE     0F01      3877
VECTORTABLE                      CODE     2400      8174
VX                               CODE     0D80      3557
VY                               CODE     0D74      3547
V_C                              CODE     1474      5146
WCR                              CODE     0EFC      3867
WE                               CODE     0F41      3943
WR                               BIT        B6

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 184



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
WRSFR                            CODE     2541      8375
X3120                            CODE     0DAD      3581
X31DP                            CODE     0579      1839
XBILT                            CODE     0FB8      4028
XBILT1                           CODE     0FC2      4032
XBIT                             BIT        2D       461
XLPAR                            CODE     0FC4      4034
XOP                              CODE     0F86      3993
XOP1                             CODE     0F90      3998
XOP11                            CODE     0FA3      4009
XOP12                            CODE     0FAD      4017
XOP2                             CODE     0FAF      4021
XOP3                             CODE     0FCA      4038
XOUT0                            CODE     1E23      7629
XOUT2                            CODE     1E28      7633
XOUT3                            CODE     1E30      7638
XOUT4                            CODE     1E34      7642
XPOP                             CODE     0FD1      4042
XSIGN                            BIT        50      6398
XTALV                            CODE     17EC      5958
XXI                              CODE     0B67      3181
XXI1                             CODE     0B76      3191
XXI2                             CODE     0BAB      3218
XXI3                             CODE     0BAF      3220
X_TR                             CODE     0BD6      3263
Z7R7                             CODE     1E80      7707
ZERO                             NUMBER   0002      6381
ZERO7                            CODE     1E81      7709
ZERO_AND_EXIT                    CODE     1BAB      7055
ZERO_DIVIDE                      NUMBER   0003      6382
ZOUT                             CODE     1E96      7726
ZRO                              CODE     04E0      1691
ZSURP                            BIT        36       477
ZT0                              CODE     1E5F      7677
ZT1                              CODE     1E66      7682
ZTEST                            CODE     1E5D      7675
